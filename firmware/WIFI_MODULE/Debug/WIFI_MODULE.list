
WIFI_MODULE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aebc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d7c  0800afd0  0800afd0  0001afd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd4c  0800cd4c  000204bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800cd4c  0800cd4c  000204bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cd4c  0800cd4c  000204bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd4c  0800cd4c  0001cd4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd50  0800cd50  0001cd50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004bc  20000000  0800cd54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000154c  200004bc  0800d210  000204bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a08  0800d210  00021a08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000204e5  2**0
                  CONTENTS, READONLY
 13 .debug_info   000150f6  00000000  00000000  00020528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000335a  00000000  00000000  0003561e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  00038978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe6  00000000  00000000  00039dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ac4f  00000000  00000000  0003ada6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018bc4  00000000  00000000  000559f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095928  00000000  00000000  0006e5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006db8  00000000  00000000  00103ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0010ac9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200004bc 	.word	0x200004bc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800afb4 	.word	0x0800afb4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200004c0 	.word	0x200004c0
 800014c:	0800afb4 	.word	0x0800afb4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <__aeabi_d2lz>:
 800110c:	b538      	push	{r3, r4, r5, lr}
 800110e:	4605      	mov	r5, r0
 8001110:	460c      	mov	r4, r1
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4628      	mov	r0, r5
 8001118:	4621      	mov	r1, r4
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x20>
 8001120:	4628      	mov	r0, r5
 8001122:	4621      	mov	r1, r4
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4628      	mov	r0, r5
 800112e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc73 	bl	8000a38 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc64 	bl	8000a38 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8001184:	4a03      	ldr	r2, [pc, #12]	; (8001194 <DS3231_Init+0x18>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	200004d8 	.word	0x200004d8

08001198 <Wifi_FirstInit>:
//SetUp IP
 char *deviceIP = "192.168.1.69";
 char *gateway = "192.168.1.1";
 char *subnet = "255.255.255.0";

void Wifi_FirstInit(WIFI_MODE mode){
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]

	//char *SSID, char *PASS,
	// Enable WIFI module
	Wifi_Enable();
 80011a2:	f000 f92d 	bl	8001400 <Wifi_Enable>

	switch (mode) {
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d002      	beq.n	80011b2 <Wifi_FirstInit+0x1a>
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d017      	beq.n	80011e0 <Wifi_FirstInit+0x48>
			Wifi_RxClear();

			break;

		default:
			break;
 80011b0:	e045      	b.n	800123e <Wifi_FirstInit+0xa6>
			if(Wifi_SetMode(WIFI_MODE_STA) == false)
 80011b2:	2001      	movs	r0, #1
 80011b4:	f000 f9fc 	bl	80015b0 <Wifi_SetMode>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d100      	bne.n	80011c0 <Wifi_FirstInit+0x28>
				while(1);
 80011be:	e7fe      	b.n	80011be <Wifi_FirstInit+0x26>
			if(Wifi_TcpIp_SetMultiConnection(false)==false)
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 fb27 	bl	8001814 <Wifi_TcpIp_SetMultiConnection>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d100      	bne.n	80011ce <Wifi_FirstInit+0x36>
				while(1);
 80011cc:	e7fe      	b.n	80011cc <Wifi_FirstInit+0x34>
			if(Wifi_StationConnectToAp("CPlus","23242526",NULL) ==false)
 80011ce:	2200      	movs	r2, #0
 80011d0:	491d      	ldr	r1, [pc, #116]	; (8001248 <Wifi_FirstInit+0xb0>)
 80011d2:	481e      	ldr	r0, [pc, #120]	; (800124c <Wifi_FirstInit+0xb4>)
 80011d4:	f000 fa36 	bl	8001644 <Wifi_StationConnectToAp>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d12e      	bne.n	800123c <Wifi_FirstInit+0xa4>
			 	while(1);
 80011de:	e7fe      	b.n	80011de <Wifi_FirstInit+0x46>
			if(Wifi_Init() == false)
 80011e0:	f000 f864 	bl	80012ac <Wifi_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d100      	bne.n	80011ec <Wifi_FirstInit+0x54>
				while(1);
 80011ea:	e7fe      	b.n	80011ea <Wifi_FirstInit+0x52>
			if(Wifi_SetMode(WIFI_MODE_AP) == false)
 80011ec:	2002      	movs	r0, #2
 80011ee:	f000 f9df 	bl	80015b0 <Wifi_SetMode>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d100      	bne.n	80011fa <Wifi_FirstInit+0x62>
				while(1);
 80011f8:	e7fe      	b.n	80011f8 <Wifi_FirstInit+0x60>
			if(Wifi_TcpIp_SetMultiConnection(true)==false)
 80011fa:	2001      	movs	r0, #1
 80011fc:	f000 fb0a 	bl	8001814 <Wifi_TcpIp_SetMultiConnection>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d100      	bne.n	8001208 <Wifi_FirstInit+0x70>
				while(1);
 8001206:	e7fe      	b.n	8001206 <Wifi_FirstInit+0x6e>
			if(Wifi_TcpIp_StartTcpConnection(80)==false)
 8001208:	2050      	movs	r0, #80	; 0x50
 800120a:	f000 fb49 	bl	80018a0 <Wifi_TcpIp_StartTcpConnection>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d100      	bne.n	8001216 <Wifi_FirstInit+0x7e>
				while(1);
 8001214:	e7fe      	b.n	8001214 <Wifi_FirstInit+0x7c>
			if(Wifi_SoftAp_Create("MyESP8266AP","12345678",5, WifiEncryptionType_WPA2_PSK) == false)
 8001216:	2303      	movs	r3, #3
 8001218:	2205      	movs	r2, #5
 800121a:	490d      	ldr	r1, [pc, #52]	; (8001250 <Wifi_FirstInit+0xb8>)
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <Wifi_FirstInit+0xbc>)
 800121e:	f000 fa5f 	bl	80016e0 <Wifi_SoftAp_Create>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d100      	bne.n	800122a <Wifi_FirstInit+0x92>
				while(1);
 8001228:	e7fe      	b.n	8001228 <Wifi_FirstInit+0x90>
			if(Wifi_GetIP() == false)
 800122a:	f000 faa5 	bl	8001778 <Wifi_GetIP>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d100      	bne.n	8001236 <Wifi_FirstInit+0x9e>
				while(1);
 8001234:	e7fe      	b.n	8001234 <Wifi_FirstInit+0x9c>
			Wifi_RxClear();
 8001236:	f000 f8a9 	bl	800138c <Wifi_RxClear>
			break;
 800123a:	e000      	b.n	800123e <Wifi_FirstInit+0xa6>
			break;
 800123c:	bf00      	nop
	}
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	0800affc 	.word	0x0800affc
 800124c:	0800b008 	.word	0x0800b008
 8001250:	0800b010 	.word	0x0800b010
 8001254:	0800b01c 	.word	0x0800b01c

08001258 <Get_after>:
//
//}


//#########################################################################################################
int Get_after(const char* buffer) {
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b087      	sub	sp, #28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    const char* substr = "+IPD,";
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <Get_after+0x50>)
 8001262:	617b      	str	r3, [r7, #20]
    uint8_t ipd_index = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	74fb      	strb	r3, [r7, #19]

    // Tìm vị trí của chuỗi con "+IPD,"
    char* ipd_pos = strstr(buffer, substr);
 8001268:	6979      	ldr	r1, [r7, #20]
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f006 f964 	bl	8007538 <strstr>
 8001270:	60f8      	str	r0, [r7, #12]
    if (ipd_pos != NULL) {
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d010      	beq.n	800129a <Get_after+0x42>
        // Lấy vị trí ký tự đầu tiên sau chuỗi con "+IPD,"
        ipd_index = ipd_pos - buffer + strlen(substr);
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	b2dc      	uxtb	r4, r3
 8001280:	6978      	ldr	r0, [r7, #20]
 8001282:	f7fe ff65 	bl	8000150 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	4423      	add	r3, r4
 800128c:	74fb      	strb	r3, [r7, #19]
        // Trả về giá trị đứng sau chuỗi con "+IPD,"
        return buffer[ipd_index] - '0'; // Chuyển đổi ký tự sang số nguyên
 800128e:	7cfb      	ldrb	r3, [r7, #19]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	3b30      	subs	r3, #48	; 0x30
 8001298:	e001      	b.n	800129e <Get_after+0x46>
    } else {
        // Trường hợp không tìm thấy chuỗi con "+IPD,"
        // Trả về một giá trị mặc định hoặc thực hiện xử lý phù hợp
        return -1; // Đây chỉ là giá trị mặc định, bạn có thể điều chỉnh tùy ý
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800129e:	4618      	mov	r0, r3
 80012a0:	371c      	adds	r7, #28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd90      	pop	{r4, r7, pc}
 80012a6:	bf00      	nop
 80012a8:	0800b028 	.word	0x0800b028

080012ac <Wifi_Init>:
//#########################################################################################################


//#########################################################################################################
bool Wifi_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af02      	add	r7, sp, #8
	uint8_t result;
	bool returnVal=false;
 80012b2:	2300      	movs	r3, #0
 80012b4:	71fb      	strb	r3, [r7, #7]
	// Clean the variables and start the interruption to work with the UART
	do
	{
		Wifi_RxClear();
 80012b6:	f000 f869 	bl	800138c <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT\r\n");
 80012ba:	4919      	ldr	r1, [pc, #100]	; (8001320 <Wifi_Init+0x74>)
 80012bc:	4819      	ldr	r0, [pc, #100]	; (8001324 <Wifi_Init+0x78>)
 80012be:	f006 f865 	bl	800738c <siprintf>

		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80012c2:	4818      	ldr	r0, [pc, #96]	; (8001324 <Wifi_Init+0x78>)
 80012c4:	f000 f88a 	bl	80013dc <Wifi_SendString>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d01e      	beq.n	800130c <Wifi_Init+0x60>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80012ce:	1db9      	adds	r1, r7, #6
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <Wifi_Init+0x7c>)
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <Wifi_Init+0x80>)
 80012d6:	2202      	movs	r2, #2
 80012d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012dc:	f000 f8b4 	bl	8001448 <Wifi_WaitForString>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d014      	beq.n	8001310 <Wifi_Init+0x64>
			break;
		if(result==2)
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d013      	beq.n	8001314 <Wifi_Init+0x68>
			break;
		returnVal = true;
 80012ec:	2301      	movs	r3, #1
 80012ee:	71fb      	strb	r3, [r7, #7]
		test((char*)Wifi.TxBuffer,"RUNNING...");
 80012f0:	490f      	ldr	r1, [pc, #60]	; (8001330 <Wifi_Init+0x84>)
 80012f2:	480c      	ldr	r0, [pc, #48]	; (8001324 <Wifi_Init+0x78>)
 80012f4:	f005 fc8c 	bl	8006c10 <test>
		Wifi_RxClear();
 80012f8:	f000 f848 	bl	800138c <Wifi_RxClear>
		Wifi_TxClear();
 80012fc:	f000 f862 	bl	80013c4 <Wifi_TxClear>
		HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8001300:	2201      	movs	r2, #1
 8001302:	490c      	ldr	r1, [pc, #48]	; (8001334 <Wifi_Init+0x88>)
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <Wifi_Init+0x8c>)
 8001306:	f004 fb32 	bl	800596e <HAL_UART_Receive_IT>
 800130a:	e004      	b.n	8001316 <Wifi_Init+0x6a>
			break;
 800130c:	bf00      	nop
 800130e:	e002      	b.n	8001316 <Wifi_Init+0x6a>
			break;
 8001310:	bf00      	nop
 8001312:	e000      	b.n	8001316 <Wifi_Init+0x6a>
			break;
 8001314:	bf00      	nop
	}while(0);
	return returnVal;
 8001316:	79fb      	ldrb	r3, [r7, #7]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	0800b030 	.word	0x0800b030
 8001324:	20000cc7 	.word	0x20000cc7
 8001328:	0800b03c 	.word	0x0800b03c
 800132c:	0800b038 	.word	0x0800b038
 8001330:	0800b044 	.word	0x0800b044
 8001334:	200004de 	.word	0x200004de
 8001338:	20001460 	.word	0x20001460

0800133c <Wifi_SendRaw>:

//#########################################################################################################
bool Wifi_SendRaw(uint8_t *data,uint16_t len)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
	if(len <= _WIFI_TX_SIZE)
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134e:	d813      	bhi.n	8001378 <Wifi_SendRaw+0x3c>
	{
		// Send the information in data through the UART of the ESP8266
		memcpy(Wifi.TxBuffer,data,len);
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	461a      	mov	r2, r3
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	480b      	ldr	r0, [pc, #44]	; (8001384 <Wifi_SendRaw+0x48>)
 8001358:	f006 f977 	bl	800764a <memcpy>
		if(HAL_UART_Transmit(&_WIFI_USART,data,len,900) == HAL_OK)
 800135c:	887a      	ldrh	r2, [r7, #2]
 800135e:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4808      	ldr	r0, [pc, #32]	; (8001388 <Wifi_SendRaw+0x4c>)
 8001366:	f004 fa7f 	bl	8005868 <HAL_UART_Transmit>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <Wifi_SendRaw+0x38>
			return true;
 8001370:	2301      	movs	r3, #1
 8001372:	e002      	b.n	800137a <Wifi_SendRaw+0x3e>
		else
			return false;
 8001374:	2300      	movs	r3, #0
 8001376:	e000      	b.n	800137a <Wifi_SendRaw+0x3e>
	}
	else
		return false;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000cc7 	.word	0x20000cc7
 8001388:	20001460 	.word	0x20001460

0800138c <Wifi_RxClear>:

//#########################################################################################################
void Wifi_RxClear(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	// Delete all data in the RxBuffer array

	memset(Wifi.RxBuffer,0,_WIFI_RX_SIZE);
 8001390:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 8001394:	2100      	movs	r1, #0
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <Wifi_RxClear+0x28>)
 8001398:	f006 f897 	bl	80074ca <memset>
	Wifi.RxIndex=0;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <Wifi_RxClear+0x2c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f8a3 2bec 	strh.w	r2, [r3, #3052]	; 0xbec
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 80013a4:	2201      	movs	r2, #1
 80013a6:	4905      	ldr	r1, [pc, #20]	; (80013bc <Wifi_RxClear+0x30>)
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <Wifi_RxClear+0x34>)
 80013aa:	f004 fae0 	bl	800596e <HAL_UART_Receive_IT>
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200004df 	.word	0x200004df
 80013b8:	200004dc 	.word	0x200004dc
 80013bc:	200004de 	.word	0x200004de
 80013c0:	20001460 	.word	0x20001460

080013c4 <Wifi_TxClear>:

//#########################################################################################################
void Wifi_TxClear(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	memset(Wifi.TxBuffer,0,_WIFI_TX_SIZE);
 80013c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013cc:	2100      	movs	r1, #0
 80013ce:	4802      	ldr	r0, [pc, #8]	; (80013d8 <Wifi_TxClear+0x14>)
 80013d0:	f006 f87b 	bl	80074ca <memset>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000cc7 	.word	0x20000cc7

080013dc <Wifi_SendString>:

//#########################################################################################################
bool Wifi_SendString(char *data)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	return Wifi_SendRaw((uint8_t*)data,strlen(data));
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7fe feb3 	bl	8000150 <strlen>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4619      	mov	r1, r3
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ffa3 	bl	800133c <Wifi_SendRaw>
 80013f6:	4603      	mov	r3, r0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <Wifi_Enable>:

//#########################################################################################################
void Wifi_Enable(void){
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	// It is necessary to set HIGH both pins of the module to work correctly
	HAL_GPIO_WritePin (_BANK_WIFI_BUTTONS,_BUTTON_ENABLE, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800140a:	480e      	ldr	r0, [pc, #56]	; (8001444 <Wifi_Enable+0x44>)
 800140c:	f002 fc3b 	bl	8003c86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (_BANK_WIFI_BUTTONS,_BUTTON_RST, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	2104      	movs	r1, #4
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <Wifi_Enable+0x44>)
 8001416:	f002 fc36 	bl	8003c86 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800141a:	2064      	movs	r0, #100	; 0x64
 800141c:	f001 fcb6 	bl	8002d8c <HAL_Delay>
	HAL_GPIO_WritePin (_BANK_WIFI_BUTTONS,_BUTTON_ENABLE, GPIO_PIN_SET);
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <Wifi_Enable+0x44>)
 8001428:	f002 fc2d 	bl	8003c86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (_BANK_WIFI_BUTTONS,_BUTTON_RST, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	2104      	movs	r1, #4
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <Wifi_Enable+0x44>)
 8001432:	f002 fc28 	bl	8003c86 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8001436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800143a:	f001 fca7 	bl	8002d8c <HAL_Delay>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40010800 	.word	0x40010800

08001448 <Wifi_WaitForString>:
}

//#########################################################################################################

bool Wifi_WaitForString(uint32_t TimeOut_ms,uint8_t *result,uint8_t CountOfParameter,...)
{
 8001448:	b40c      	push	{r2, r3}
 800144a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800144e:	b089      	sub	sp, #36	; 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	466b      	mov	r3, sp
 8001458:	461e      	mov	r6, r3
	 *
	 * If the ESP8266 return a AT+OK after the last command, the function is going to
	 * return a true value and the result number would be 1.
	 */

	if(result == NULL)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <Wifi_WaitForString+0x1c>
		return false;
 8001460:	2300      	movs	r3, #0
 8001462:	e074      	b.n	800154e <Wifi_WaitForString+0x106>
	if(CountOfParameter == 0)
 8001464:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <Wifi_WaitForString+0x28>
		return false;
 800146c:	2300      	movs	r3, #0
 800146e:	e06e      	b.n	800154e <Wifi_WaitForString+0x106>

	*result=0;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]

	va_list tag;
		va_start (tag,CountOfParameter);
 8001476:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800147a:	60bb      	str	r3, [r7, #8]
		char *arg[CountOfParameter];
 800147c:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 8001480:	460b      	mov	r3, r1
 8001482:	3b01      	subs	r3, #1
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	b2cb      	uxtb	r3, r1
 8001488:	2200      	movs	r2, #0
 800148a:	4698      	mov	r8, r3
 800148c:	4691      	mov	r9, r2
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800149a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800149e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80014a2:	b2cb      	uxtb	r3, r1
 80014a4:	2200      	movs	r2, #0
 80014a6:	461c      	mov	r4, r3
 80014a8:	4615      	mov	r5, r2
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	016b      	lsls	r3, r5, #5
 80014b4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80014b8:	0162      	lsls	r2, r4, #5
 80014ba:	460b      	mov	r3, r1
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	3307      	adds	r3, #7
 80014c0:	08db      	lsrs	r3, r3, #3
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	ebad 0d03 	sub.w	sp, sp, r3
 80014c8:	466b      	mov	r3, sp
 80014ca:	3303      	adds	r3, #3
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	60fb      	str	r3, [r7, #12]
		for(uint8_t i=0; i<CountOfParameter ; i++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	77fb      	strb	r3, [r7, #31]
 80014d6:	e00a      	b.n	80014ee <Wifi_WaitForString+0xa6>
			arg[i] = va_arg (tag, char *);
 80014d8:	7ffa      	ldrb	r2, [r7, #31]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1d19      	adds	r1, r3, #4
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	6819      	ldr	r1, [r3, #0]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(uint8_t i=0; i<CountOfParameter ; i++)
 80014e8:	7ffb      	ldrb	r3, [r7, #31]
 80014ea:	3301      	adds	r3, #1
 80014ec:	77fb      	strb	r3, [r7, #31]
 80014ee:	7ffa      	ldrb	r2, [r7, #31]
 80014f0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d3ef      	bcc.n	80014d8 <Wifi_WaitForString+0x90>
	va_end (tag);

	for(uint32_t t=0 ; t<TimeOut_ms ; t+=20)
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
 80014fc:	e022      	b.n	8001544 <Wifi_WaitForString+0xfc>
	{
		HAL_Delay(20);
 80014fe:	2014      	movs	r0, #20
 8001500:	f001 fc44 	bl	8002d8c <HAL_Delay>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8001504:	2300      	movs	r3, #0
 8001506:	75fb      	strb	r3, [r7, #23]
 8001508:	e014      	b.n	8001534 <Wifi_WaitForString+0xec>
		{
			if(strstr((char*)Wifi.RxBuffer,arg[mx])!=NULL)
 800150a:	7dfa      	ldrb	r2, [r7, #23]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001512:	4619      	mov	r1, r3
 8001514:	4812      	ldr	r0, [pc, #72]	; (8001560 <Wifi_WaitForString+0x118>)
 8001516:	f006 f80f 	bl	8007538 <strstr>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <Wifi_WaitForString+0xe6>
			{
				*result = mx+1;
 8001520:	7dfb      	ldrb	r3, [r7, #23]
 8001522:	3301      	adds	r3, #1
 8001524:	b2da      	uxtb	r2, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	701a      	strb	r2, [r3, #0]
				return true;
 800152a:	2301      	movs	r3, #1
 800152c:	e00f      	b.n	800154e <Wifi_WaitForString+0x106>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 800152e:	7dfb      	ldrb	r3, [r7, #23]
 8001530:	3301      	adds	r3, #1
 8001532:	75fb      	strb	r3, [r7, #23]
 8001534:	7dfa      	ldrb	r2, [r7, #23]
 8001536:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800153a:	429a      	cmp	r2, r3
 800153c:	d3e5      	bcc.n	800150a <Wifi_WaitForString+0xc2>
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=20)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	3314      	adds	r3, #20
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	d3d8      	bcc.n	80014fe <Wifi_WaitForString+0xb6>
			}
		}
	}
	// timeout
	return false;
 800154c:	2300      	movs	r3, #0
 800154e:	46b5      	mov	sp, r6

}
 8001550:	4618      	mov	r0, r3
 8001552:	3724      	adds	r7, #36	; 0x24
 8001554:	46bd      	mov	sp, r7
 8001556:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800155a:	b002      	add	sp, #8
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	200004df 	.word	0x200004df

08001564 <Wifi_RxCallBack>:

void Wifi_RxCallBack(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	Wifi.RxBuffer[Wifi.RxIndex] = Wifi.usartBuff;
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <Wifi_RxCallBack+0x40>)
 800156a:	f8b3 3bec 	ldrh.w	r3, [r3, #3052]	; 0xbec
 800156e:	4619      	mov	r1, r3
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <Wifi_RxCallBack+0x40>)
 8001572:	789a      	ldrb	r2, [r3, #2]
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <Wifi_RxCallBack+0x40>)
 8001576:	440b      	add	r3, r1
 8001578:	70da      	strb	r2, [r3, #3]
	if(Wifi.RxIndex < _WIFI_RX_SIZE)
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <Wifi_RxCallBack+0x40>)
 800157c:	f8b3 3bec 	ldrh.w	r3, [r3, #3052]	; 0xbec
 8001580:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 8001584:	d207      	bcs.n	8001596 <Wifi_RxCallBack+0x32>
	  Wifi.RxIndex++;
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <Wifi_RxCallBack+0x40>)
 8001588:	f8b3 3bec 	ldrh.w	r3, [r3, #3052]	; 0xbec
 800158c:	3301      	adds	r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <Wifi_RxCallBack+0x40>)
 8001592:	f8a3 2bec 	strh.w	r2, [r3, #3052]	; 0xbec
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8001596:	2201      	movs	r2, #1
 8001598:	4903      	ldr	r1, [pc, #12]	; (80015a8 <Wifi_RxCallBack+0x44>)
 800159a:	4804      	ldr	r0, [pc, #16]	; (80015ac <Wifi_RxCallBack+0x48>)
 800159c:	f004 f9e7 	bl	800596e <HAL_UART_Receive_IT>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200004dc 	.word	0x200004dc
 80015a8:	200004de 	.word	0x200004de
 80015ac:	20001460 	.word	0x20001460

080015b0 <Wifi_SetMode>:




bool Wifi_SetMode(WIFI_MODE WifiMode_){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af02      	add	r7, sp, #8
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
	uint8_t result;
	bool returnVal = true;
 80015ba:	2301      	movs	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]

	do{
		Wifi_RxClear();
 80015be:	f7ff fee5 	bl	800138c <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR=%d\r\n",WifiMode_);
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4919      	ldr	r1, [pc, #100]	; (800162c <Wifi_SetMode+0x7c>)
 80015c8:	4819      	ldr	r0, [pc, #100]	; (8001630 <Wifi_SetMode+0x80>)
 80015ca:	f005 fedf 	bl	800738c <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <Wifi_SetMode+0x80>)
 80015d0:	f7ff ff04 	bl	80013dc <Wifi_SendString>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d01e      	beq.n	8001618 <Wifi_SetMode+0x68>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80015da:	f107 010e 	add.w	r1, r7, #14
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <Wifi_SetMode+0x84>)
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <Wifi_SetMode+0x88>)
 80015e4:	2202      	movs	r2, #2
 80015e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ea:	f7ff ff2d 	bl	8001448 <Wifi_WaitForString>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <Wifi_SetMode+0x6c>
			break;			// The timeout was completed and the string was not there
		if(result == 2)		// It was find the "ERROR" String in the receiving information
 80015f4:	7bbb      	ldrb	r3, [r7, #14]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d012      	beq.n	8001620 <Wifi_SetMode+0x70>
			break;
		Wifi.Mode = WifiMode_;
 80015fa:	4a10      	ldr	r2, [pc, #64]	; (800163c <Wifi_SetMode+0x8c>)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f882 3bef 	strb.w	r3, [r2, #3055]	; 0xbef
		returnVal=true;
 8001602:	2301      	movs	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
		test((char*)Wifi.TxBuffer,"RUNNING...");
 8001606:	490e      	ldr	r1, [pc, #56]	; (8001640 <Wifi_SetMode+0x90>)
 8001608:	4809      	ldr	r0, [pc, #36]	; (8001630 <Wifi_SetMode+0x80>)
 800160a:	f005 fb01 	bl	8006c10 <test>
		Wifi_RxClear();
 800160e:	f7ff febd 	bl	800138c <Wifi_RxClear>
		Wifi_TxClear();
 8001612:	f7ff fed7 	bl	80013c4 <Wifi_TxClear>
 8001616:	e004      	b.n	8001622 <Wifi_SetMode+0x72>
			break;
 8001618:	bf00      	nop
 800161a:	e002      	b.n	8001622 <Wifi_SetMode+0x72>
			break;			// The timeout was completed and the string was not there
 800161c:	bf00      	nop
 800161e:	e000      	b.n	8001622 <Wifi_SetMode+0x72>
			break;
 8001620:	bf00      	nop
	}while(0);
	return returnVal;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	0800b06c 	.word	0x0800b06c
 8001630:	20000cc7 	.word	0x20000cc7
 8001634:	0800b03c 	.word	0x0800b03c
 8001638:	0800b038 	.word	0x0800b038
 800163c:	200004dc 	.word	0x200004dc
 8001640:	0800b044 	.word	0x0800b044

08001644 <Wifi_StationConnectToAp>:
		returnVal=true;
	}while(0);
	return returnVal;
}

bool Wifi_StationConnectToAp(char *SSID,char *Pass, char *MAC){
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af02      	add	r7, sp, #8
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
	uint8_t result;
	bool returnVal = false;
 8001650:	2300      	movs	r3, #0
 8001652:	75fb      	strb	r3, [r7, #23]

	do {
		/*
		 * It connects to a WiFi network who has all the parameters correctly
		 */
		Wifi_RxClear();
 8001654:	f7ff fe9a 	bl	800138c <Wifi_RxClear>
		if(MAC == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d106      	bne.n	800166c <Wifi_StationConnectToAp+0x28>
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\"\r\n",SSID,Pass);
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4919      	ldr	r1, [pc, #100]	; (80016c8 <Wifi_StationConnectToAp+0x84>)
 8001664:	4819      	ldr	r0, [pc, #100]	; (80016cc <Wifi_StationConnectToAp+0x88>)
 8001666:	f005 fe91 	bl	800738c <siprintf>
 800166a:	e007      	b.n	800167c <Wifi_StationConnectToAp+0x38>
		else
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\",\"%s\"\r\n",SSID,Pass,MAC);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4916      	ldr	r1, [pc, #88]	; (80016d0 <Wifi_StationConnectToAp+0x8c>)
 8001676:	4815      	ldr	r0, [pc, #84]	; (80016cc <Wifi_StationConnectToAp+0x88>)
 8001678:	f005 fe88 	bl	800738c <siprintf>

		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800167c:	4813      	ldr	r0, [pc, #76]	; (80016cc <Wifi_StationConnectToAp+0x88>)
 800167e:	f7ff fead 	bl	80013dc <Wifi_SendString>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d014      	beq.n	80016b2 <Wifi_StationConnectToAp+0x6e>
			break;

		if(Wifi_WaitForString(_WIFI_WAIT_TIME_VERYHIGH,&result,3,"\r\nOK\r\n","\r\nERROR\r\n","\r\nFAIL\r\n")==false)
 8001688:	f107 0116 	add.w	r1, r7, #22
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <Wifi_StationConnectToAp+0x90>)
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <Wifi_StationConnectToAp+0x94>)
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <Wifi_StationConnectToAp+0x98>)
 8001696:	2203      	movs	r2, #3
 8001698:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800169c:	f7ff fed4 	bl	8001448 <Wifi_WaitForString>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d007      	beq.n	80016b6 <Wifi_StationConnectToAp+0x72>
			break;

		if(result > 1)		// If the result is higher to 1 is because there were an error
 80016a6:	7dbb      	ldrb	r3, [r7, #22]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d806      	bhi.n	80016ba <Wifi_StationConnectToAp+0x76>
			break;

		returnVal=true;
 80016ac:	2301      	movs	r3, #1
 80016ae:	75fb      	strb	r3, [r7, #23]
 80016b0:	e004      	b.n	80016bc <Wifi_StationConnectToAp+0x78>
			break;
 80016b2:	bf00      	nop
 80016b4:	e002      	b.n	80016bc <Wifi_StationConnectToAp+0x78>
			break;
 80016b6:	bf00      	nop
 80016b8:	e000      	b.n	80016bc <Wifi_StationConnectToAp+0x78>
			break;
 80016ba:	bf00      	nop
	} while (0);
	return returnVal;
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	0800b0bc 	.word	0x0800b0bc
 80016cc:	20000cc7 	.word	0x20000cc7
 80016d0:	0800b0d8 	.word	0x0800b0d8
 80016d4:	0800b100 	.word	0x0800b100
 80016d8:	0800b10c 	.word	0x0800b10c
 80016dc:	0800b0f8 	.word	0x0800b0f8

080016e0 <Wifi_SoftAp_Create>:
	}while(0);
	return returnVal;
}

bool  Wifi_SoftAp_Create(char *SSID,char *password,uint8_t channel,WifiEncryptionType_t WifiEncryptionType)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	4611      	mov	r1, r2
 80016ec:	461a      	mov	r2, r3
 80016ee:	460b      	mov	r3, r1
 80016f0:	71fb      	strb	r3, [r7, #7]
 80016f2:	4613      	mov	r3, r2
 80016f4:	71bb      	strb	r3, [r7, #6]
	uint8_t result;
	bool	returnVal=false;
 80016f6:	2300      	movs	r3, #0
 80016f8:	75fb      	strb	r3, [r7, #23]
	{
		/*
		 * It creates the SoftAP (Small WiFi Network) that it is possible with the ESP8266
		 * the data of this network is defined by the inputs of the function
		 */
		Wifi_RxClear();
 80016fa:	f7ff fe47 	bl	800138c <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWSAP=\"%s\",\"%s\",%d,%d\r\n",SSID,password,channel,WifiEncryptionType);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	79ba      	ldrb	r2, [r7, #6]
 8001702:	9201      	str	r2, [sp, #4]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4916      	ldr	r1, [pc, #88]	; (8001764 <Wifi_SoftAp_Create+0x84>)
 800170c:	4816      	ldr	r0, [pc, #88]	; (8001768 <Wifi_SoftAp_Create+0x88>)
 800170e:	f005 fe3d 	bl	800738c <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001712:	4815      	ldr	r0, [pc, #84]	; (8001768 <Wifi_SoftAp_Create+0x88>)
 8001714:	f7ff fe62 	bl	80013dc <Wifi_SendString>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d018      	beq.n	8001750 <Wifi_SoftAp_Create+0x70>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800171e:	f107 0116 	add.w	r1, r7, #22
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <Wifi_SoftAp_Create+0x8c>)
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <Wifi_SoftAp_Create+0x90>)
 8001728:	2202      	movs	r2, #2
 800172a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800172e:	f7ff fe8b 	bl	8001448 <Wifi_WaitForString>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00d      	beq.n	8001754 <Wifi_SoftAp_Create+0x74>
			break;			// The timeout was completed and the string was not there
		if(result == 2)		// It was find the "ERROR" String in the receiving information
 8001738:	7dbb      	ldrb	r3, [r7, #22]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d00c      	beq.n	8001758 <Wifi_SoftAp_Create+0x78>
			break;

		returnVal=true;
 800173e:	2301      	movs	r3, #1
 8001740:	75fb      	strb	r3, [r7, #23]
		Wifi_TxClear();
 8001742:	f7ff fe3f 	bl	80013c4 <Wifi_TxClear>
		test((char*)Wifi.TxBuffer,"RUNNING...");
 8001746:	490b      	ldr	r1, [pc, #44]	; (8001774 <Wifi_SoftAp_Create+0x94>)
 8001748:	4807      	ldr	r0, [pc, #28]	; (8001768 <Wifi_SoftAp_Create+0x88>)
 800174a:	f005 fa61 	bl	8006c10 <test>
 800174e:	e004      	b.n	800175a <Wifi_SoftAp_Create+0x7a>
			break;
 8001750:	bf00      	nop
 8001752:	e002      	b.n	800175a <Wifi_SoftAp_Create+0x7a>
			break;			// The timeout was completed and the string was not there
 8001754:	bf00      	nop
 8001756:	e000      	b.n	800175a <Wifi_SoftAp_Create+0x7a>
			break;
 8001758:	bf00      	nop
	}while(0);
	return returnVal;
 800175a:	7dfb      	ldrb	r3, [r7, #23]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	0800b134 	.word	0x0800b134
 8001768:	20000cc7 	.word	0x20000cc7
 800176c:	0800b03c 	.word	0x0800b03c
 8001770:	0800b038 	.word	0x0800b038
 8001774:	0800b044 	.word	0x0800b044

08001778 <Wifi_GetIP>:

bool Wifi_GetIP(void){
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af02      	add	r7, sp, #8
	uint8_t result;
	bool returnVal = false;
 800177e:	2300      	movs	r3, #0
 8001780:	71fb      	strb	r3, [r7, #7]
	do {
		Wifi_RxClear();
 8001782:	f7ff fe03 	bl	800138c <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer, "AT+CIFSR\r\n");
 8001786:	491a      	ldr	r1, [pc, #104]	; (80017f0 <Wifi_GetIP+0x78>)
 8001788:	481a      	ldr	r0, [pc, #104]	; (80017f4 <Wifi_GetIP+0x7c>)
 800178a:	f005 fdff 	bl	800738c <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800178e:	4819      	ldr	r0, [pc, #100]	; (80017f4 <Wifi_GetIP+0x7c>)
 8001790:	f7ff fe24 	bl	80013dc <Wifi_SendString>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d01f      	beq.n	80017da <Wifi_GetIP+0x62>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW, &result, 2,"OK","ERROR") == false)
 800179a:	1db9      	adds	r1, r7, #6
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <Wifi_GetIP+0x80>)
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	4b16      	ldr	r3, [pc, #88]	; (80017fc <Wifi_GetIP+0x84>)
 80017a2:	2202      	movs	r2, #2
 80017a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017a8:	f7ff fe4e 	bl	8001448 <Wifi_WaitForString>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d015      	beq.n	80017de <Wifi_GetIP+0x66>
			break;
		if(result == 2)
 80017b2:	79bb      	ldrb	r3, [r7, #6]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d014      	beq.n	80017e2 <Wifi_GetIP+0x6a>
			break;
		sscanf((char*)Wifi.RxBuffer,"AT+CIFSR\r\n\n+CIFSR:APIP,\"%[^\"]",Wifi.MyIP);
 80017b8:	4a11      	ldr	r2, [pc, #68]	; (8001800 <Wifi_GetIP+0x88>)
 80017ba:	4912      	ldr	r1, [pc, #72]	; (8001804 <Wifi_GetIP+0x8c>)
 80017bc:	4812      	ldr	r0, [pc, #72]	; (8001808 <Wifi_GetIP+0x90>)
 80017be:	f005 fe05 	bl	80073cc <siscanf>
		sscanf((char*)Wifi.RxBuffer,"AT+CIFSR\r\r\n+CIFSR:STAIP,\"%[^\"]",Wifi.MyIP);
 80017c2:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <Wifi_GetIP+0x88>)
 80017c4:	4911      	ldr	r1, [pc, #68]	; (800180c <Wifi_GetIP+0x94>)
 80017c6:	4810      	ldr	r0, [pc, #64]	; (8001808 <Wifi_GetIP+0x90>)
 80017c8:	f005 fe00 	bl	80073cc <siscanf>
		returnVal = true;
 80017cc:	2301      	movs	r3, #1
 80017ce:	71fb      	strb	r3, [r7, #7]
		test((char*)Wifi.TxBuffer,"RUNNING...");
 80017d0:	490f      	ldr	r1, [pc, #60]	; (8001810 <Wifi_GetIP+0x98>)
 80017d2:	4808      	ldr	r0, [pc, #32]	; (80017f4 <Wifi_GetIP+0x7c>)
 80017d4:	f005 fa1c 	bl	8006c10 <test>
 80017d8:	e004      	b.n	80017e4 <Wifi_GetIP+0x6c>
			break;
 80017da:	bf00      	nop
 80017dc:	e002      	b.n	80017e4 <Wifi_GetIP+0x6c>
			break;
 80017de:	bf00      	nop
 80017e0:	e000      	b.n	80017e4 <Wifi_GetIP+0x6c>
			break;
 80017e2:	bf00      	nop
	} while (0);
	return returnVal;
 80017e4:	79fb      	ldrb	r3, [r7, #7]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	0800b150 	.word	0x0800b150
 80017f4:	20000cc7 	.word	0x20000cc7
 80017f8:	0800b03c 	.word	0x0800b03c
 80017fc:	0800b038 	.word	0x0800b038
 8001800:	200010cc 	.word	0x200010cc
 8001804:	0800b15c 	.word	0x0800b15c
 8001808:	200004df 	.word	0x200004df
 800180c:	0800b17c 	.word	0x0800b17c
 8001810:	0800b044 	.word	0x0800b044

08001814 <Wifi_TcpIp_SetMultiConnection>:

bool  Wifi_TcpIp_SetMultiConnection(bool EnableMultiConnections)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af02      	add	r7, sp, #8
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
	uint8_t result;
	bool	returnVal=false;
 800181e:	2300      	movs	r3, #0
 8001820:	73fb      	strb	r3, [r7, #15]
	do
	{
		// Enable or Disable the multiconnection possibility
		Wifi_RxClear();
 8001822:	f7ff fdb3 	bl	800138c <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX=%d\r\n",EnableMultiConnections);
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	461a      	mov	r2, r3
 800182a:	4917      	ldr	r1, [pc, #92]	; (8001888 <Wifi_TcpIp_SetMultiConnection+0x74>)
 800182c:	4817      	ldr	r0, [pc, #92]	; (800188c <Wifi_TcpIp_SetMultiConnection+0x78>)
 800182e:	f005 fdad 	bl	800738c <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001832:	4816      	ldr	r0, [pc, #88]	; (800188c <Wifi_TcpIp_SetMultiConnection+0x78>)
 8001834:	f7ff fdd2 	bl	80013dc <Wifi_SendString>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d01a      	beq.n	8001874 <Wifi_TcpIp_SetMultiConnection+0x60>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800183e:	f107 010e 	add.w	r1, r7, #14
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <Wifi_TcpIp_SetMultiConnection+0x7c>)
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <Wifi_TcpIp_SetMultiConnection+0x80>)
 8001848:	2202      	movs	r2, #2
 800184a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800184e:	f7ff fdfb 	bl	8001448 <Wifi_WaitForString>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00f      	beq.n	8001878 <Wifi_TcpIp_SetMultiConnection+0x64>
			break;
		if(result == 2)
 8001858:	7bbb      	ldrb	r3, [r7, #14]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d00e      	beq.n	800187c <Wifi_TcpIp_SetMultiConnection+0x68>
			break;
    Wifi.TcpIpMultiConnection=EnableMultiConnections;
 800185e:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <Wifi_TcpIp_SetMultiConnection+0x84>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f882 3d22 	strb.w	r3, [r2, #3362]	; 0xd22
		returnVal=true;
 8001866:	2301      	movs	r3, #1
 8001868:	73fb      	strb	r3, [r7, #15]
		test((char*)Wifi.TxBuffer,"RUNNING...");
 800186a:	490c      	ldr	r1, [pc, #48]	; (800189c <Wifi_TcpIp_SetMultiConnection+0x88>)
 800186c:	4807      	ldr	r0, [pc, #28]	; (800188c <Wifi_TcpIp_SetMultiConnection+0x78>)
 800186e:	f005 f9cf 	bl	8006c10 <test>
 8001872:	e004      	b.n	800187e <Wifi_TcpIp_SetMultiConnection+0x6a>
			break;
 8001874:	bf00      	nop
 8001876:	e002      	b.n	800187e <Wifi_TcpIp_SetMultiConnection+0x6a>
			break;
 8001878:	bf00      	nop
 800187a:	e000      	b.n	800187e <Wifi_TcpIp_SetMultiConnection+0x6a>
			break;
 800187c:	bf00      	nop
	}while(0);
	return returnVal;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	0800b19c 	.word	0x0800b19c
 800188c:	20000cc7 	.word	0x20000cc7
 8001890:	0800b03c 	.word	0x0800b03c
 8001894:	0800b038 	.word	0x0800b038
 8001898:	200004dc 	.word	0x200004dc
 800189c:	0800b044 	.word	0x0800b044

080018a0 <Wifi_TcpIp_StartTcpConnection>:

bool  Wifi_TcpIp_StartTcpConnection(uint16_t RemotePort)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
	uint8_t result;
	bool	returnVal=false;
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]
		/*
		 * It makes a TCP server and then it creates a TCP Connection according to the
		 * settings in the function. It uses a very high time of waiting because the
		 * ESP8266 takes a lot of time to create a connection with a TCP the first time.
		 */
		Wifi_RxClear();
 80018ae:	f7ff fd6d 	bl	800138c <Wifi_RxClear>
		if(Wifi.TcpIpMultiConnection==true){
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <Wifi_TcpIp_StartTcpConnection+0x78>)
 80018b4:	f893 3d22 	ldrb.w	r3, [r3, #3362]	; 0xd22
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d11b      	bne.n	80018f4 <Wifi_TcpIp_StartTcpConnection+0x54>
			sprintf((char*)Wifi.TxBuffer,"AT+CIPSERVER=1,%d\r\n",RemotePort);
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	461a      	mov	r2, r3
 80018c0:	4916      	ldr	r1, [pc, #88]	; (800191c <Wifi_TcpIp_StartTcpConnection+0x7c>)
 80018c2:	4817      	ldr	r0, [pc, #92]	; (8001920 <Wifi_TcpIp_StartTcpConnection+0x80>)
 80018c4:	f005 fd62 	bl	800738c <siprintf>
			if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80018c8:	4815      	ldr	r0, [pc, #84]	; (8001920 <Wifi_TcpIp_StartTcpConnection+0x80>)
 80018ca:	f7ff fd87 	bl	80013dc <Wifi_SendString>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d016      	beq.n	8001902 <Wifi_TcpIp_StartTcpConnection+0x62>
				break;
			if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80018d4:	f107 010e 	add.w	r1, r7, #14
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <Wifi_TcpIp_StartTcpConnection+0x84>)
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <Wifi_TcpIp_StartTcpConnection+0x88>)
 80018de:	2202      	movs	r2, #2
 80018e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018e4:	f7ff fdb0 	bl	8001448 <Wifi_WaitForString>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00b      	beq.n	8001906 <Wifi_TcpIp_StartTcpConnection+0x66>
				break;			// The timeout was completed and the string was not there
			if(result == 2)		// It was find the "ERROR" String in the receiving information
 80018ee:	7bbb      	ldrb	r3, [r7, #14]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d00a      	beq.n	800190a <Wifi_TcpIp_StartTcpConnection+0x6a>
//			break;
//		if(Wifi_WaitForString(_WIFI_WAIT_TIME_HIGH,&result,3,"OK","CONNECT","ERROR")==false)
//			break;
//		if(result == 3)
//			break;
		returnVal=true;
 80018f4:	2301      	movs	r3, #1
 80018f6:	73fb      	strb	r3, [r7, #15]
		test((char*)Wifi.TxBuffer,"RUNNING...");
 80018f8:	490c      	ldr	r1, [pc, #48]	; (800192c <Wifi_TcpIp_StartTcpConnection+0x8c>)
 80018fa:	4809      	ldr	r0, [pc, #36]	; (8001920 <Wifi_TcpIp_StartTcpConnection+0x80>)
 80018fc:	f005 f988 	bl	8006c10 <test>
 8001900:	e004      	b.n	800190c <Wifi_TcpIp_StartTcpConnection+0x6c>
				break;
 8001902:	bf00      	nop
 8001904:	e002      	b.n	800190c <Wifi_TcpIp_StartTcpConnection+0x6c>
				break;			// The timeout was completed and the string was not there
 8001906:	bf00      	nop
 8001908:	e000      	b.n	800190c <Wifi_TcpIp_StartTcpConnection+0x6c>
				break;
 800190a:	bf00      	nop
	}while(0);
	return returnVal;
 800190c:	7bfb      	ldrb	r3, [r7, #15]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200004dc 	.word	0x200004dc
 800191c:	0800b0a8 	.word	0x0800b0a8
 8001920:	20000cc7 	.word	0x20000cc7
 8001924:	0800b03c 	.word	0x0800b03c
 8001928:	0800b038 	.word	0x0800b038
 800192c:	0800b044 	.word	0x0800b044

08001930 <Wifi_TcpIp_CreateTCPConnection>:

bool Wifi_TcpIp_CreateTCPConnection(char *RemoteIp,uint16_t RemotePort){
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af02      	add	r7, sp, #8
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
	uint8_t result;
		bool	returnVal=false;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]
	do
		{
	    Wifi_RxClear();
 8001940:	f7ff fd24 	bl	800138c <Wifi_RxClear>
		if(Wifi.TcpIpMultiConnection==false)
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <Wifi_TcpIp_CreateTCPConnection+0x74>)
 8001946:	f893 3d22 	ldrb.w	r3, [r3, #3362]	; 0xd22
 800194a:	2b00      	cmp	r3, #0
 800194c:	d105      	bne.n	800195a <Wifi_TcpIp_CreateTCPConnection+0x2a>
		  sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",RemoteIp,RemotePort);
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4915      	ldr	r1, [pc, #84]	; (80019a8 <Wifi_TcpIp_CreateTCPConnection+0x78>)
 8001954:	4815      	ldr	r0, [pc, #84]	; (80019ac <Wifi_TcpIp_CreateTCPConnection+0x7c>)
 8001956:	f005 fd19 	bl	800738c <siprintf>
//		else
//		  sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=%d,\"TCP\",\"%s\",%d,%d\r\n",LinkId,RemoteIp,RemotePort,TimeOut);
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800195a:	4814      	ldr	r0, [pc, #80]	; (80019ac <Wifi_TcpIp_CreateTCPConnection+0x7c>)
 800195c:	f7ff fd3e 	bl	80013dc <Wifi_SendString>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d014      	beq.n	8001990 <Wifi_TcpIp_CreateTCPConnection+0x60>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_HIGH,&result,3,"OK","CONNECT","ERROR")==false)
 8001966:	f107 010e 	add.w	r1, r7, #14
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <Wifi_TcpIp_CreateTCPConnection+0x80>)
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <Wifi_TcpIp_CreateTCPConnection+0x84>)
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <Wifi_TcpIp_CreateTCPConnection+0x88>)
 8001974:	2203      	movs	r2, #3
 8001976:	f643 2098 	movw	r0, #15000	; 0x3a98
 800197a:	f7ff fd65 	bl	8001448 <Wifi_WaitForString>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <Wifi_TcpIp_CreateTCPConnection+0x64>
			break;
		if(result == 3)
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d006      	beq.n	8001998 <Wifi_TcpIp_CreateTCPConnection+0x68>
			break;
		returnVal=true;
 800198a:	2301      	movs	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
 800198e:	e004      	b.n	800199a <Wifi_TcpIp_CreateTCPConnection+0x6a>
			break;
 8001990:	bf00      	nop
 8001992:	e002      	b.n	800199a <Wifi_TcpIp_CreateTCPConnection+0x6a>
			break;
 8001994:	bf00      	nop
 8001996:	e000      	b.n	800199a <Wifi_TcpIp_CreateTCPConnection+0x6a>
			break;
 8001998:	bf00      	nop
		}while(0);
	return returnVal;
 800199a:	7bfb      	ldrb	r3, [r7, #15]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200004dc 	.word	0x200004dc
 80019a8:	0800b1ac 	.word	0x0800b1ac
 80019ac:	20000cc7 	.word	0x20000cc7
 80019b0:	0800b03c 	.word	0x0800b03c
 80019b4:	0800b1c8 	.word	0x0800b1c8
 80019b8:	0800b038 	.word	0x0800b038

080019bc <Wifi_TcpIp_SendDataTcp>:

bool  Wifi_TcpIp_SendDataTcp(uint8_t LinkId,uint16_t dataLen,uint8_t *data)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	4603      	mov	r3, r0
 80019c4:	603a      	str	r2, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
 80019c8:	460b      	mov	r3, r1
 80019ca:	80bb      	strh	r3, [r7, #4]
	uint8_t result;
	bool	returnVal=false;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 80019d0:	f7ff fcdc 	bl	800138c <Wifi_RxClear>
		if(Wifi.TcpIpMultiConnection==false)
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <Wifi_TcpIp_SendDataTcp+0xd4>)
 80019d6:	f893 3d22 	ldrb.w	r3, [r3, #3362]	; 0xd22
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d106      	bne.n	80019ec <Wifi_TcpIp_SendDataTcp+0x30>
			sprintf((char*)Wifi.TxBuffer,"AT+CIPSEND=%d\r\n",dataLen);
 80019de:	88bb      	ldrh	r3, [r7, #4]
 80019e0:	461a      	mov	r2, r3
 80019e2:	492c      	ldr	r1, [pc, #176]	; (8001a94 <Wifi_TcpIp_SendDataTcp+0xd8>)
 80019e4:	482c      	ldr	r0, [pc, #176]	; (8001a98 <Wifi_TcpIp_SendDataTcp+0xdc>)
 80019e6:	f005 fcd1 	bl	800738c <siprintf>
 80019ea:	e005      	b.n	80019f8 <Wifi_TcpIp_SendDataTcp+0x3c>
		else
			sprintf((char*)Wifi.TxBuffer,"AT+CIPSEND=%d,%d\r\n",LinkId,dataLen);
 80019ec:	79fa      	ldrb	r2, [r7, #7]
 80019ee:	88bb      	ldrh	r3, [r7, #4]
 80019f0:	492a      	ldr	r1, [pc, #168]	; (8001a9c <Wifi_TcpIp_SendDataTcp+0xe0>)
 80019f2:	4829      	ldr	r0, [pc, #164]	; (8001a98 <Wifi_TcpIp_SendDataTcp+0xdc>)
 80019f4:	f005 fcca 	bl	800738c <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80019f8:	4827      	ldr	r0, [pc, #156]	; (8001a98 <Wifi_TcpIp_SendDataTcp+0xdc>)
 80019fa:	f7ff fcef 	bl	80013dc <Wifi_SendString>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d037      	beq.n	8001a74 <Wifi_TcpIp_SendDataTcp+0xb8>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001a04:	f107 010e 	add.w	r1, r7, #14
 8001a08:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <Wifi_TcpIp_SendDataTcp+0xe4>)
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <Wifi_TcpIp_SendDataTcp+0xe8>)
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a14:	f7ff fd18 	bl	8001448 <Wifi_WaitForString>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d02c      	beq.n	8001a78 <Wifi_TcpIp_SendDataTcp+0xbc>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,3,">","ERROR","busy")==false)
 8001a1e:	f107 010e 	add.w	r1, r7, #14
 8001a22:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <Wifi_TcpIp_SendDataTcp+0xec>)
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <Wifi_TcpIp_SendDataTcp+0xe4>)
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <Wifi_TcpIp_SendDataTcp+0xf0>)
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a32:	f7ff fd09 	bl	8001448 <Wifi_WaitForString>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d01f      	beq.n	8001a7c <Wifi_TcpIp_SendDataTcp+0xc0>
			break;
		if(result > 1)
 8001a3c:	7bbb      	ldrb	r3, [r7, #14]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d81e      	bhi.n	8001a80 <Wifi_TcpIp_SendDataTcp+0xc4>
			break;
		Wifi_RxClear();
 8001a42:	f7ff fca3 	bl	800138c <Wifi_RxClear>
//		//Wifi_SendString(data);
		Wifi_TxClear();
 8001a46:	f7ff fcbd 	bl	80013c4 <Wifi_TxClear>
		Wifi_SendRaw(data,dataLen);
 8001a4a:	88bb      	ldrh	r3, [r7, #4]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	6838      	ldr	r0, [r7, #0]
 8001a50:	f7ff fc74 	bl	800133c <Wifi_SendRaw>
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001a54:	f107 010e 	add.w	r1, r7, #14
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <Wifi_TcpIp_SendDataTcp+0xe4>)
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <Wifi_TcpIp_SendDataTcp+0xe8>)
 8001a5e:	2202      	movs	r2, #2
 8001a60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a64:	f7ff fcf0 	bl	8001448 <Wifi_WaitForString>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00a      	beq.n	8001a84 <Wifi_TcpIp_SendDataTcp+0xc8>
			break;
		returnVal=true;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	73fb      	strb	r3, [r7, #15]
 8001a72:	e008      	b.n	8001a86 <Wifi_TcpIp_SendDataTcp+0xca>
			break;
 8001a74:	bf00      	nop
 8001a76:	e006      	b.n	8001a86 <Wifi_TcpIp_SendDataTcp+0xca>
			break;
 8001a78:	bf00      	nop
 8001a7a:	e004      	b.n	8001a86 <Wifi_TcpIp_SendDataTcp+0xca>
			break;
 8001a7c:	bf00      	nop
 8001a7e:	e002      	b.n	8001a86 <Wifi_TcpIp_SendDataTcp+0xca>
			break;
 8001a80:	bf00      	nop
 8001a82:	e000      	b.n	8001a86 <Wifi_TcpIp_SendDataTcp+0xca>
			break;
 8001a84:	bf00      	nop
	}while(0);
	return returnVal;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200004dc 	.word	0x200004dc
 8001a94:	0800b1d0 	.word	0x0800b1d0
 8001a98:	20000cc7 	.word	0x20000cc7
 8001a9c:	0800b1e0 	.word	0x0800b1e0
 8001aa0:	0800b03c 	.word	0x0800b03c
 8001aa4:	0800b038 	.word	0x0800b038
 8001aa8:	0800b1f8 	.word	0x0800b1f8
 8001aac:	0800b1f4 	.word	0x0800b1f4

08001ab0 <Wifi_TcpIp_Close>:
	}while(0);
	return returnVal;
}

bool  Wifi_TcpIp_Close(uint8_t LinkId)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t result;
	bool	returnVal=false;
 8001aba:	2300      	movs	r3, #0
 8001abc:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8001abe:	f7ff fc65 	bl	800138c <Wifi_RxClear>
		if(Wifi.TcpIpMultiConnection==false)
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <Wifi_TcpIp_Close+0x80>)
 8001ac4:	f893 3d22 	ldrb.w	r3, [r3, #3362]	; 0xd22
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d104      	bne.n	8001ad6 <Wifi_TcpIp_Close+0x26>
		  sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE\r\n");
 8001acc:	4919      	ldr	r1, [pc, #100]	; (8001b34 <Wifi_TcpIp_Close+0x84>)
 8001ace:	481a      	ldr	r0, [pc, #104]	; (8001b38 <Wifi_TcpIp_Close+0x88>)
 8001ad0:	f005 fc5c 	bl	800738c <siprintf>
 8001ad4:	e005      	b.n	8001ae2 <Wifi_TcpIp_Close+0x32>
		else
		  sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE=%d\r\n",LinkId);
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4918      	ldr	r1, [pc, #96]	; (8001b3c <Wifi_TcpIp_Close+0x8c>)
 8001adc:	4816      	ldr	r0, [pc, #88]	; (8001b38 <Wifi_TcpIp_Close+0x88>)
 8001ade:	f005 fc55 	bl	800738c <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001ae2:	4815      	ldr	r0, [pc, #84]	; (8001b38 <Wifi_TcpIp_Close+0x88>)
 8001ae4:	f7ff fc7a 	bl	80013dc <Wifi_SendString>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d016      	beq.n	8001b1c <Wifi_TcpIp_Close+0x6c>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001aee:	f107 010e 	add.w	r1, r7, #14
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <Wifi_TcpIp_Close+0x90>)
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <Wifi_TcpIp_Close+0x94>)
 8001af8:	2202      	movs	r2, #2
 8001afa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001afe:	f7ff fca3 	bl	8001448 <Wifi_WaitForString>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00b      	beq.n	8001b20 <Wifi_TcpIp_Close+0x70>
			break;			// The timeout was completed and the string was not there
		if(result == 2)		// It was find the "ERROR" String in the receiving information
 8001b08:	7bbb      	ldrb	r3, [r7, #14]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d00a      	beq.n	8001b24 <Wifi_TcpIp_Close+0x74>
			break;
		returnVal=true;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
		Wifi_RxClear();
 8001b12:	f7ff fc3b 	bl	800138c <Wifi_RxClear>
		Wifi_TxClear();
 8001b16:	f7ff fc55 	bl	80013c4 <Wifi_TxClear>
 8001b1a:	e004      	b.n	8001b26 <Wifi_TcpIp_Close+0x76>
			break;
 8001b1c:	bf00      	nop
 8001b1e:	e002      	b.n	8001b26 <Wifi_TcpIp_Close+0x76>
			break;			// The timeout was completed and the string was not there
 8001b20:	bf00      	nop
 8001b22:	e000      	b.n	8001b26 <Wifi_TcpIp_Close+0x76>
			break;
 8001b24:	bf00      	nop

	}while(0);
	return returnVal;
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	200004dc 	.word	0x200004dc
 8001b34:	0800b250 	.word	0x0800b250
 8001b38:	20000cc7 	.word	0x20000cc7
 8001b3c:	0800b260 	.word	0x0800b260
 8001b40:	0800b03c 	.word	0x0800b03c
 8001b44:	0800b038 	.word	0x0800b038

08001b48 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b58:	d121      	bne.n	8001b9e <HAL_TIM_PeriodElapsedCallback+0x56>
    if(init==1){
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d119      	bne.n	8001b96 <HAL_TIM_PeriodElapsedCallback+0x4e>
    	led_state = !led_state;
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bf0c      	ite	eq
 8001b6c:	2301      	moveq	r3, #1
 8001b6e:	2300      	movne	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001b76:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, led_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bf14      	ite	ne
 8001b82:	2301      	movne	r3, #1
 8001b84:	2300      	moveq	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b8e:	4811      	ldr	r0, [pc, #68]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001b90:	f002 f879 	bl	8003c86 <HAL_GPIO_WritePin>

	  memset(message,0,sizeof(message));
	  floatToString2(audiodBSPL, message);

  }
}
 8001b94:	e015      	b.n	8001bc2 <HAL_TIM_PeriodElapsedCallback+0x7a>
    	sendFlag = true;
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
}
 8001b9c:	e011      	b.n	8001bc2 <HAL_TIM_PeriodElapsedCallback+0x7a>
  else if(htim->Instance == TIM3){
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d10c      	bne.n	8001bc2 <HAL_TIM_PeriodElapsedCallback+0x7a>
	  microphoneADCReading();
 8001ba8:	f000 f88e 	bl	8001cc8 <microphoneADCReading>
	  memset(message,0,sizeof(message));
 8001bac:	2232      	movs	r2, #50	; 0x32
 8001bae:	2100      	movs	r1, #0
 8001bb0:	480b      	ldr	r0, [pc, #44]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001bb2:	f005 fc8a 	bl	80074ca <memset>
	  floatToString2(audiodBSPL, message);
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4909      	ldr	r1, [pc, #36]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 f9a3 	bl	8001f08 <floatToString2>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	20001298 	.word	0x20001298
 8001bd4:	40010c00 	.word	0x40010c00
 8001bd8:	20001299 	.word	0x20001299
 8001bdc:	40000400 	.word	0x40000400
 8001be0:	2000129c 	.word	0x2000129c
 8001be4:	20001340 	.word	0x20001340

08001be8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_8){
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bf8:	d10d      	bne.n	8001c16 <HAL_GPIO_EXTI_Callback+0x2e>
		stateReset = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8001bfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bfe:	480f      	ldr	r0, [pc, #60]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x54>)
 8001c00:	f002 f82a 	bl	8003c58 <HAL_GPIO_ReadPin>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	bf14      	ite	ne
 8001c0a:	2301      	movne	r3, #1
 8001c0c:	2300      	moveq	r3, #0
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x58>)
 8001c12:	701a      	strb	r2, [r3, #0]
		button_resetDevice = HAL_GPIO_ReadPin(RESET_BUTTON_DEVICE_GPIO_Port, RESET_BUTTON_DEVICE_Pin);
	}
	else{
		__NOP();
	}
}
 8001c14:	e00e      	b.n	8001c34 <HAL_GPIO_EXTI_Callback+0x4c>
	else if(GPIO_Pin == RESET_BUTTON_DEVICE_Pin){
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c1c:	d109      	bne.n	8001c32 <HAL_GPIO_EXTI_Callback+0x4a>
		button_resetDevice = HAL_GPIO_ReadPin(RESET_BUTTON_DEVICE_GPIO_Port, RESET_BUTTON_DEVICE_Pin);
 8001c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c22:	4806      	ldr	r0, [pc, #24]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x54>)
 8001c24:	f002 f818 	bl	8003c58 <HAL_GPIO_ReadPin>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001c2e:	701a      	strb	r2, [r3, #0]
}
 8001c30:	e000      	b.n	8001c34 <HAL_GPIO_EXTI_Callback+0x4c>
		__NOP();
 8001c32:	bf00      	nop
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40010800 	.word	0x40010800
 8001c40:	20000002 	.word	0x20000002
 8001c44:	20000001 	.word	0x20000001

08001c48 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance){
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d127      	bne.n	8001cac <HAL_ADC_ConvCpltCallback+0x64>
		audioInRaw = HAL_ADC_GetValue(hadc);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f001 fa47 	bl	80030f0 <HAL_ADC_GetValue>
 8001c62:	4603      	mov	r3, r0
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <HAL_ADC_ConvCpltCallback+0x70>)
 8001c68:	801a      	strh	r2, [r3, #0]
		audioInRectified = abs(audioInRaw - levelShift);
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_ADC_ConvCpltCallback+0x70>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	bfb8      	it	lt
 8001c7a:	425b      	neglt	r3, r3
 8001c7c:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <HAL_ADC_ConvCpltCallback+0x74>)
 8001c7e:	6013      	str	r3, [r2, #0]


		audioMin = (audioInRectified < audioMin) ? audioInRectified : audioMin;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <HAL_ADC_ConvCpltCallback+0x78>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_ADC_ConvCpltCallback+0x74>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	bfa8      	it	ge
 8001c8e:	4613      	movge	r3, r2
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_ADC_ConvCpltCallback+0x78>)
 8001c94:	801a      	strh	r2, [r3, #0]
		audioMax = (audioInRectified > audioMax) ? audioInRectified : audioMax;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <HAL_ADC_ConvCpltCallback+0x74>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	bfb8      	it	lt
 8001ca4:	4613      	movlt	r3, r2
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001caa:	801a      	strh	r2, [r3, #0]
	}

}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	2000134c 	.word	0x2000134c
 8001cb8:	20001336 	.word	0x20001336
 8001cbc:	20001338 	.word	0x20001338
 8001cc0:	200002e6 	.word	0x200002e6
 8001cc4:	20001334 	.word	0x20001334

08001cc8 <microphoneADCReading>:



void microphoneADCReading() {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0

	            audioPeakToPeak = audioMax - audioMin;
 8001cce:	4b5e      	ldr	r3, [pc, #376]	; (8001e48 <microphoneADCReading+0x180>)
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <microphoneADCReading+0x184>)
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	4a5d      	ldr	r2, [pc, #372]	; (8001e50 <microphoneADCReading+0x188>)
 8001cdc:	6013      	str	r3, [r2, #0]
	            audioVoltagePeakToPeak = (((float)audioPeakToPeak * 3.3) / 4095.0)*0.707;
 8001cde:	4b5c      	ldr	r3, [pc, #368]	; (8001e50 <microphoneADCReading+0x188>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe ffd2 	bl	8000c8c <__aeabi_i2f>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fb9c 	bl	8000428 <__aeabi_f2d>
 8001cf0:	a34d      	add	r3, pc, #308	; (adr r3, 8001e28 <microphoneADCReading+0x160>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	f7fe fbef 	bl	80004d8 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	a34b      	add	r3, pc, #300	; (adr r3, 8001e30 <microphoneADCReading+0x168>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fd10 	bl	800072c <__aeabi_ddiv>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	a348      	add	r3, pc, #288	; (adr r3, 8001e38 <microphoneADCReading+0x170>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	f7fe fbdd 	bl	80004d8 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7fe fea7 	bl	8000a78 <__aeabi_d2f>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4a49      	ldr	r2, [pc, #292]	; (8001e54 <microphoneADCReading+0x18c>)
 8001d2e:	6013      	str	r3, [r2, #0]
	            float alpha = 0.1; // Adjust alpha as needed
 8001d30:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <microphoneADCReading+0x190>)
 8001d32:	607b      	str	r3, [r7, #4]
	            filteredAudioVoltagePeakToPeak = lowPassFilter(audioVoltagePeakToPeak, alpha);
 8001d34:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <microphoneADCReading+0x18c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f8a0 	bl	8001e80 <lowPassFilter>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4a46      	ldr	r2, [pc, #280]	; (8001e5c <microphoneADCReading+0x194>)
 8001d44:	6013      	str	r3, [r2, #0]

	            audiodBSPL = 94 + 20 * log10(filteredAudioVoltagePeakToPeak / 0.00631) - 44 - 25;
 8001d46:	4b45      	ldr	r3, [pc, #276]	; (8001e5c <microphoneADCReading+0x194>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fb6c 	bl	8000428 <__aeabi_f2d>
 8001d50:	a33b      	add	r3, pc, #236	; (adr r3, 8001e40 <microphoneADCReading+0x178>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fce9 	bl	800072c <__aeabi_ddiv>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f008 febf 	bl	800aae4 <log10>
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	4b3d      	ldr	r3, [pc, #244]	; (8001e60 <microphoneADCReading+0x198>)
 8001d6c:	f7fe fbb4 	bl	80004d8 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <microphoneADCReading+0x19c>)
 8001d7e:	f7fe f9f5 	bl	800016c <__adddf3>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <microphoneADCReading+0x1a0>)
 8001d90:	f7fe f9ea 	bl	8000168 <__aeabi_dsub>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	4b32      	ldr	r3, [pc, #200]	; (8001e6c <microphoneADCReading+0x1a4>)
 8001da2:	f7fe f9e1 	bl	8000168 <__aeabi_dsub>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f7fe fe63 	bl	8000a78 <__aeabi_d2f>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4a2e      	ldr	r2, [pc, #184]	; (8001e70 <microphoneADCReading+0x1a8>)
 8001db6:	6013      	str	r3, [r2, #0]

	            if(audiodBSPL >=58){
 8001db8:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <microphoneADCReading+0x1a8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	492d      	ldr	r1, [pc, #180]	; (8001e74 <microphoneADCReading+0x1ac>)
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f96a 	bl	8001098 <__aeabi_fcmpge>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <microphoneADCReading+0x11a>
	      	  	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dd0:	4829      	ldr	r0, [pc, #164]	; (8001e78 <microphoneADCReading+0x1b0>)
 8001dd2:	f001 ff58 	bl	8003c86 <HAL_GPIO_WritePin>
	            	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	2101      	movs	r1, #1
 8001dda:	4827      	ldr	r0, [pc, #156]	; (8001e78 <microphoneADCReading+0x1b0>)
 8001ddc:	f001 ff53 	bl	8003c86 <HAL_GPIO_WritePin>
 8001de0:	e013      	b.n	8001e0a <microphoneADCReading+0x142>
	      	    }else if(audiodBSPL <58){
 8001de2:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <microphoneADCReading+0x1a8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4923      	ldr	r1, [pc, #140]	; (8001e74 <microphoneADCReading+0x1ac>)
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff f941 	bl	8001070 <__aeabi_fcmplt>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00a      	beq.n	8001e0a <microphoneADCReading+0x142>
	      	  	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dfa:	481f      	ldr	r0, [pc, #124]	; (8001e78 <microphoneADCReading+0x1b0>)
 8001dfc:	f001 ff43 	bl	8003c86 <HAL_GPIO_WritePin>
	      	    	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2101      	movs	r1, #1
 8001e04:	481c      	ldr	r0, [pc, #112]	; (8001e78 <microphoneADCReading+0x1b0>)
 8001e06:	f001 ff3e 	bl	8003c86 <HAL_GPIO_WritePin>
	      	    }

	            // Reset variables for the next measurement period
	            audioMin = 4095;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <microphoneADCReading+0x184>)
 8001e0c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e10:	801a      	strh	r2, [r3, #0]
	            audioMax = 0;
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <microphoneADCReading+0x180>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	801a      	strh	r2, [r3, #0]

	        HAL_ADC_Start_IT(&hadc1);
 8001e18:	4818      	ldr	r0, [pc, #96]	; (8001e7c <microphoneADCReading+0x1b4>)
 8001e1a:	f001 f8b3 	bl	8002f84 <HAL_ADC_Start_IT>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	66666666 	.word	0x66666666
 8001e2c:	400a6666 	.word	0x400a6666
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40affe00 	.word	0x40affe00
 8001e38:	76c8b439 	.word	0x76c8b439
 8001e3c:	3fe69fbe 	.word	0x3fe69fbe
 8001e40:	ba3443d4 	.word	0xba3443d4
 8001e44:	3f79d883 	.word	0x3f79d883
 8001e48:	20001334 	.word	0x20001334
 8001e4c:	200002e6 	.word	0x200002e6
 8001e50:	2000133c 	.word	0x2000133c
 8001e54:	20001344 	.word	0x20001344
 8001e58:	3dcccccd 	.word	0x3dcccccd
 8001e5c:	20001348 	.word	0x20001348
 8001e60:	40340000 	.word	0x40340000
 8001e64:	40578000 	.word	0x40578000
 8001e68:	40460000 	.word	0x40460000
 8001e6c:	40390000 	.word	0x40390000
 8001e70:	20001340 	.word	0x20001340
 8001e74:	42680000 	.word	0x42680000
 8001e78:	40010c00 	.word	0x40010c00
 8001e7c:	2000134c 	.word	0x2000134c

08001e80 <lowPassFilter>:


float lowPassFilter(float inputValue, float alpha) {
 8001e80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
	 static float filteredValue = 0.0;
    // Apply low-pass filter equation: filteredValue = alpha * inputValue + (1 - alpha) * filteredValue
    filteredValue = (float)(alpha * inputValue + (1.0 - alpha) * filteredValue);
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	6838      	ldr	r0, [r7, #0]
 8001e90:	f7fe ff50 	bl	8000d34 <__aeabi_fmul>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fac6 	bl	8000428 <__aeabi_f2d>
 8001e9c:	4604      	mov	r4, r0
 8001e9e:	460d      	mov	r5, r1
 8001ea0:	6838      	ldr	r0, [r7, #0]
 8001ea2:	f7fe fac1 	bl	8000428 <__aeabi_f2d>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	f04f 0000 	mov.w	r0, #0
 8001eae:	4914      	ldr	r1, [pc, #80]	; (8001f00 <lowPassFilter+0x80>)
 8001eb0:	f7fe f95a 	bl	8000168 <__aeabi_dsub>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4690      	mov	r8, r2
 8001eba:	4699      	mov	r9, r3
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <lowPassFilter+0x84>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fab1 	bl	8000428 <__aeabi_f2d>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4640      	mov	r0, r8
 8001ecc:	4649      	mov	r1, r9
 8001ece:	f7fe fb03 	bl	80004d8 <__aeabi_dmul>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	4629      	mov	r1, r5
 8001eda:	f7fe f947 	bl	800016c <__adddf3>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f7fe fdc7 	bl	8000a78 <__aeabi_d2f>
 8001eea:	4603      	mov	r3, r0
 8001eec:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <lowPassFilter+0x84>)
 8001eee:	6013      	str	r3, [r2, #0]

    return filteredValue;
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <lowPassFilter+0x84>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001efe:	bf00      	nop
 8001f00:	3ff00000 	.word	0x3ff00000
 8001f04:	200014a8 	.word	0x200014a8

08001f08 <floatToString2>:

void floatToString2(float number, char* str) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
    int integerPart = (int)number;
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff f8d4 	bl	80010c0 <__aeabi_f2iz>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	60bb      	str	r3, [r7, #8]
    int decimalPart = (int)((number - integerPart) * 100); // Assuming 2 decimal places
 8001f1c:	68b8      	ldr	r0, [r7, #8]
 8001f1e:	f7fe feb5 	bl	8000c8c <__aeabi_i2f>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4619      	mov	r1, r3
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7fe fdfa 	bl	8000b20 <__aeabi_fsub>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	490f      	ldr	r1, [pc, #60]	; (8001f6c <floatToString2+0x64>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe feff 	bl	8000d34 <__aeabi_fmul>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff f8c1 	bl	80010c0 <__aeabi_f2iz>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	60fb      	str	r3, [r7, #12]

    if (number < 0) {
 8001f42:	f04f 0100 	mov.w	r1, #0
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff f892 	bl	8001070 <__aeabi_fcmplt>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <floatToString2+0x50>
        	decimalPart*=-1;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	425b      	negs	r3, r3
 8001f56:	60fb      	str	r3, [r7, #12]
    }
    sprintf(str, "%d.%02d", integerPart, decimalPart);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	4904      	ldr	r1, [pc, #16]	; (8001f70 <floatToString2+0x68>)
 8001f5e:	6838      	ldr	r0, [r7, #0]
 8001f60:	f005 fa14 	bl	800738c <siprintf>
}
 8001f64:	bf00      	nop
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	42c80000 	.word	0x42c80000
 8001f70:	0800b28c 	.word	0x0800b28c

08001f74 <containSubstring>:

bool containSubstring(uint8_t *source, int source_len,char *substring) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
	int sub_len = strlen(substring);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7fe f8e5 	bl	8000150 <strlen>
 8001f86:	4603      	mov	r3, r0
 8001f88:	613b      	str	r3, [r7, #16]

    if (source_len < sub_len) {
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	da01      	bge.n	8001f96 <containSubstring+0x22>
        return false;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e019      	b.n	8001fca <containSubstring+0x56>
    }

    for (int i = 0; i <= source_len - sub_len; ++i) {
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	e00f      	b.n	8001fbc <containSubstring+0x48>
        if (memcmp(&source[i], substring, sub_len) == 0) {
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f005 fa7f 	bl	80074aa <memcmp>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <containSubstring+0x42>
            return true;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e009      	b.n	8001fca <containSubstring+0x56>
    for (int i = 0; i <= source_len - sub_len; ++i) {
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	dde9      	ble.n	8001f9c <containSubstring+0x28>
        }
    }

    return false;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <is_not_empty>:

int is_not_empty(char *str) {
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
    return (str != NULL && str[0] != '\0');
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <is_not_empty+0x1a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <is_not_empty+0x1a>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <is_not_empty+0x1c>
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <packageDataSecret>:
void analyzeBufferTime(char* bufferTime){
	sscanf(bufferTime,"%4d-%2d-%2dT%2d:%2d:%2d",&rtc.Year,&rtc.Month, &rtc.Date, &rtc.Hour, &rtc.Min, &rtc.Sec);
	rtc.Year = rtc.Year%100;
}

bool packageDataSecret(char *data){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b0c2      	sub	sp, #264	; 0x108
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002006:	6018      	str	r0, [r3, #0]
	char httpRequest[256];
	sprintf(httpRequest, "POST /endpoint HTTP/1.1\r\nHost: 13.56.232.149\r\nContent-Type: application/json\r\nContent-Length: %d\r\n\r\n%s\r\n", strlen(data), data);
 8002008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800200c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	f7fe f89d 	bl	8000150 <strlen>
 8002016:	4602      	mov	r2, r0
 8002018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800201c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002020:	f107 0008 	add.w	r0, r7, #8
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	490d      	ldr	r1, [pc, #52]	; (800205c <packageDataSecret+0x64>)
 8002028:	f005 f9b0 	bl	800738c <siprintf>

	//Send Package Data
    if(Wifi_TcpIp_SendDataTcp(0, strlen(httpRequest),(uint8_t*)httpRequest) == false)
 800202c:	f107 0308 	add.w	r3, r7, #8
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe f88d 	bl	8000150 <strlen>
 8002036:	4603      	mov	r3, r0
 8002038:	b29b      	uxth	r3, r3
 800203a:	f107 0208 	add.w	r2, r7, #8
 800203e:	4619      	mov	r1, r3
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff fcbb 	bl	80019bc <Wifi_TcpIp_SendDataTcp>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <packageDataSecret+0x58>
		return false;
 800204c:	2300      	movs	r3, #0
 800204e:	e000      	b.n	8002052 <packageDataSecret+0x5a>

	return true;
 8002050:	2301      	movs	r3, #1

}
 8002052:	4618      	mov	r0, r3
 8002054:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	0800b2ac 	.word	0x0800b2ac

08002060 <tryConnectCloudServer>:

bool tryConnectCloudServer(){
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	//Connnect to Server IP and Server Port 13.56.232.149
    if(Wifi_TcpIp_CreateTCPConnection("13.56.232.149", 80)==false){
 8002064:	2150      	movs	r1, #80	; 0x50
 8002066:	4808      	ldr	r0, [pc, #32]	; (8002088 <tryConnectCloudServer+0x28>)
 8002068:	f7ff fc62 	bl	8001930 <Wifi_TcpIp_CreateTCPConnection>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d104      	bne.n	800207c <tryConnectCloudServer+0x1c>
    	    led_state = 0;
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <tryConnectCloudServer+0x2c>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
			return false;
 8002078:	2300      	movs	r3, #0
 800207a:	e003      	b.n	8002084 <tryConnectCloudServer+0x24>
	}else{
		 led_state = 1;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <tryConnectCloudServer+0x2c>)
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
	}

    return true;
 8002082:	2301      	movs	r3, #1
}
 8002084:	4618      	mov	r0, r3
 8002086:	bd80      	pop	{r7, pc}
 8002088:	0800b318 	.word	0x0800b318
 800208c:	20001298 	.word	0x20001298

08002090 <sendDataToServer>:


void sendDataToServer(){
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
//	memset(message,0,sizeof(message));
//	floatToString2(audiodBSPL, message);
	sprintf(jsonData,"{\"deviceId\":%s,\"soundLevel\":%s}",deviceName,message);
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <sendDataToServer+0x50>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <sendDataToServer+0x54>)
 800209a:	4913      	ldr	r1, [pc, #76]	; (80020e8 <sendDataToServer+0x58>)
 800209c:	4813      	ldr	r0, [pc, #76]	; (80020ec <sendDataToServer+0x5c>)
 800209e:	f005 f975 	bl	800738c <siprintf>

	if(tryConnectCloudServer()){
 80020a2:	f7ff ffdd 	bl	8002060 <tryConnectCloudServer>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d009      	beq.n	80020c0 <sendDataToServer+0x30>

		while(packageDataSecret(jsonData)==false);
 80020ac:	bf00      	nop
 80020ae:	480f      	ldr	r0, [pc, #60]	; (80020ec <sendDataToServer+0x5c>)
 80020b0:	f7ff ffa2 	bl	8001ff8 <packageDataSecret>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f083 0301 	eor.w	r3, r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f6      	bne.n	80020ae <sendDataToServer+0x1e>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, led_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <sendDataToServer+0x60>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf14      	ite	ne
 80020ca:	2301      	movne	r3, #1
 80020cc:	2300      	moveq	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020d6:	4807      	ldr	r0, [pc, #28]	; (80020f4 <sendDataToServer+0x64>)
 80020d8:	f001 fdd5 	bl	8003c86 <HAL_GPIO_WritePin>

//	showMonitoring(message);

}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000004 	.word	0x20000004
 80020e4:	2000129c 	.word	0x2000129c
 80020e8:	0800b328 	.word	0x0800b328
 80020ec:	200012d0 	.word	0x200012d0
 80020f0:	20001298 	.word	0x20001298
 80020f4:	40010c00 	.word	0x40010c00

080020f8 <handleRequestWifiConfig>:

void handleRequestWifiConfig(int linkID){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	if(containSubstring(Wifi.RxBuffer, sizeof(Wifi.RxBuffer), "GET /HOME") == 1){
 8002100:	4a3f      	ldr	r2, [pc, #252]	; (8002200 <handleRequestWifiConfig+0x108>)
 8002102:	f44f 61fd 	mov.w	r1, #2024	; 0x7e8
 8002106:	483f      	ldr	r0, [pc, #252]	; (8002204 <handleRequestWifiConfig+0x10c>)
 8002108:	f7ff ff34 	bl	8001f74 <containSubstring>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d014      	beq.n	800213c <handleRequestWifiConfig+0x44>
		if(Wifi_TcpIp_SendDataTcp(linkID, sizeof(http_response),(uint8_t*)http_response ) == false)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	4a3c      	ldr	r2, [pc, #240]	; (8002208 <handleRequestWifiConfig+0x110>)
 8002118:	f240 2115 	movw	r1, #533	; 0x215
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fc4d 	bl	80019bc <Wifi_TcpIp_SendDataTcp>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d100      	bne.n	800212a <handleRequestWifiConfig+0x32>
		      while(1);
 8002128:	e7fe      	b.n	8002128 <handleRequestWifiConfig+0x30>
		if(Wifi_TcpIp_Close(linkID) == false)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fcbe 	bl	8001ab0 <Wifi_TcpIp_Close>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d15e      	bne.n	80021f8 <handleRequestWifiConfig+0x100>
			while(1);
 800213a:	e7fe      	b.n	800213a <handleRequestWifiConfig+0x42>


	}else if(containSubstring(Wifi.RxBuffer, sizeof(Wifi.RxBuffer), "POST /submit") == 1){
 800213c:	4a33      	ldr	r2, [pc, #204]	; (800220c <handleRequestWifiConfig+0x114>)
 800213e:	f44f 61fd 	mov.w	r1, #2024	; 0x7e8
 8002142:	4830      	ldr	r0, [pc, #192]	; (8002204 <handleRequestWifiConfig+0x10c>)
 8002144:	f7ff ff16 	bl	8001f74 <containSubstring>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d054      	beq.n	80021f8 <handleRequestWifiConfig+0x100>
		char *body_start =strstr((char*)&Wifi.RxBuffer, "ssid=");
 800214e:	4930      	ldr	r1, [pc, #192]	; (8002210 <handleRequestWifiConfig+0x118>)
 8002150:	482c      	ldr	r0, [pc, #176]	; (8002204 <handleRequestWifiConfig+0x10c>)
 8002152:	f005 f9f1 	bl	8007538 <strstr>
 8002156:	6278      	str	r0, [r7, #36]	; 0x24
		if(body_start != NULL){
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	2b00      	cmp	r3, #0
 800215c:	d04c      	beq.n	80021f8 <handleRequestWifiConfig+0x100>
			const char *ssid_start = strstr(body_start, "ssid=")+5;
 800215e:	492c      	ldr	r1, [pc, #176]	; (8002210 <handleRequestWifiConfig+0x118>)
 8002160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002162:	f005 f9e9 	bl	8007538 <strstr>
 8002166:	4603      	mov	r3, r0
 8002168:	3305      	adds	r3, #5
 800216a:	623b      	str	r3, [r7, #32]
			const char *password_start = strstr(body_start, "password=")+9;
 800216c:	4929      	ldr	r1, [pc, #164]	; (8002214 <handleRequestWifiConfig+0x11c>)
 800216e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002170:	f005 f9e2 	bl	8007538 <strstr>
 8002174:	4603      	mov	r3, r0
 8002176:	3309      	adds	r3, #9
 8002178:	61fb      	str	r3, [r7, #28]

			// Tìm vị trí kết thúc của ssid (kí tự &)
			const char *ssid_end = strchr(ssid_start, '&');
 800217a:	2126      	movs	r1, #38	; 0x26
 800217c:	6a38      	ldr	r0, [r7, #32]
 800217e:	f005 f9bb 	bl	80074f8 <strchr>
 8002182:	61b8      	str	r0, [r7, #24]
			// Tìm vị trí kết thúc của password (kí tự null)
			const char *password_end = strchr(password_start, '\0');
 8002184:	69f8      	ldr	r0, [r7, #28]
 8002186:	f7fd ffe3 	bl	8000150 <strlen>
 800218a:	4603      	mov	r3, r0
 800218c:	461a      	mov	r2, r3
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	4413      	add	r3, r2
 8002192:	617b      	str	r3, [r7, #20]

			if(ssid_end !=NULL){
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d008      	beq.n	80021ac <handleRequestWifiConfig+0xb4>
				size_t len = ssid_end-ssid_start;
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	613b      	str	r3, [r7, #16]
				strncpy(Wifi.SSID_STATION,ssid_start,len);
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	6a39      	ldr	r1, [r7, #32]
 80021a6:	481c      	ldr	r0, [pc, #112]	; (8002218 <handleRequestWifiConfig+0x120>)
 80021a8:	f005 f9b3 	bl	8007512 <strncpy>
			}

			size_t len = password_end - password_start;
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	60fb      	str	r3, [r7, #12]
			strncpy(Wifi.PASSWORD_STATION, password_start, len);
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	69f9      	ldr	r1, [r7, #28]
 80021b8:	4818      	ldr	r0, [pc, #96]	; (800221c <handleRequestWifiConfig+0x124>)
 80021ba:	f005 f9aa 	bl	8007512 <strncpy>
			Wifi.PASSWORD_STATION[len] = '\0';
 80021be:	4a18      	ldr	r2, [pc, #96]	; (8002220 <handleRequestWifiConfig+0x128>)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
			Wifi_TxClear();
 80021cc:	f7ff f8fa 	bl	80013c4 <Wifi_TxClear>
			if(Wifi_TcpIp_SendDataTcp(linkID, sizeof(response),(uint8_t*)response ) == false)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	4a13      	ldr	r2, [pc, #76]	; (8002224 <handleRequestWifiConfig+0x12c>)
 80021d6:	21c8      	movs	r1, #200	; 0xc8
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fbef 	bl	80019bc <Wifi_TcpIp_SendDataTcp>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d100      	bne.n	80021e6 <handleRequestWifiConfig+0xee>
				while(1);
 80021e4:	e7fe      	b.n	80021e4 <handleRequestWifiConfig+0xec>
			if(Wifi_TcpIp_Close(linkID) == false)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fc60 	bl	8001ab0 <Wifi_TcpIp_Close>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d100      	bne.n	80021f8 <handleRequestWifiConfig+0x100>
				while(1);
 80021f6:	e7fe      	b.n	80021f6 <handleRequestWifiConfig+0xfe>
		}
	}
}
 80021f8:	bf00      	nop
 80021fa:	3728      	adds	r7, #40	; 0x28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	0800b348 	.word	0x0800b348
 8002204:	200004df 	.word	0x200004df
 8002208:	200000d0 	.word	0x200000d0
 800220c:	0800b354 	.word	0x0800b354
 8002210:	0800b364 	.word	0x0800b364
 8002214:	0800b36c 	.word	0x0800b36c
 8002218:	200010ec 	.word	0x200010ec
 800221c:	200010fc 	.word	0x200010fc
 8002220:	200004dc 	.word	0x200004dc
 8002224:	20000008 	.word	0x20000008

08002228 <Device_initializeComplex>:
				  			}
				  		}
	}while(actionProtocol==0);
}

void Device_initializeComplex(){
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
	// Device started initialized
	HAL_TIM_Base_Start_IT(&htim2);
 800222c:	4823      	ldr	r0, [pc, #140]	; (80022bc <Device_initializeComplex+0x94>)
 800222e:	f002 ff1d 	bl	800506c <HAL_TIM_Base_Start_IT>

	//Initialized OLED Srceen
	ssd1306_InitializeDevice();
 8002232:	f004 fc6f 	bl	8006b14 <ssd1306_InitializeDevice>

	/*---------------------------------------SET UP WIFI----------------------------------------*/
	/*------------------------------------------------------------------------------------------*/

	//Set up Device to Access Point
	Wifi_FirstInit(WIFI_MODE_AP);
 8002236:	2002      	movs	r0, #2
 8002238:	f7fe ffae 	bl	8001198 <Wifi_FirstInit>
	test(Wifi.MyIP,"MODE ACCESS POINT");
 800223c:	4920      	ldr	r1, [pc, #128]	; (80022c0 <Device_initializeComplex+0x98>)
 800223e:	4821      	ldr	r0, [pc, #132]	; (80022c4 <Device_initializeComplex+0x9c>)
 8002240:	f004 fce6 	bl	8006c10 <test>

	//Set up Device to Station
	do{
		  //Waiting for respone from User act to remote ip 192.168.1.4
		  if(Wifi.RxBuffer != NULL){
			  handleRequestWifiConfig(Get_after((char*)Wifi.RxBuffer));
 8002244:	4820      	ldr	r0, [pc, #128]	; (80022c8 <Device_initializeComplex+0xa0>)
 8002246:	f7ff f807 	bl	8001258 <Get_after>
 800224a:	4603      	mov	r3, r0
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff53 	bl	80020f8 <handleRequestWifiConfig>
		  }

		  //Wating for receiving SSID and PASSWORD of target Access Point to make it a Station
		  if(is_not_empty(Wifi.SSID_STATION)&& is_not_empty(Wifi.PASSWORD_STATION)){
 8002252:	481e      	ldr	r0, [pc, #120]	; (80022cc <Device_initializeComplex+0xa4>)
 8002254:	f7ff febd 	bl	8001fd2 <is_not_empty>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d026      	beq.n	80022ac <Device_initializeComplex+0x84>
 800225e:	481c      	ldr	r0, [pc, #112]	; (80022d0 <Device_initializeComplex+0xa8>)
 8002260:	f7ff feb7 	bl	8001fd2 <is_not_empty>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d020      	beq.n	80022ac <Device_initializeComplex+0x84>
		  		Wifi_FirstInit(WIFI_MODE_STA);
 800226a:	2001      	movs	r0, #1
 800226c:	f7fe ff94 	bl	8001198 <Wifi_FirstInit>

		  		memset(Wifi.SSID_STATION,0,strlen(Wifi.SSID_STATION));
 8002270:	4816      	ldr	r0, [pc, #88]	; (80022cc <Device_initializeComplex+0xa4>)
 8002272:	f7fd ff6d 	bl	8000150 <strlen>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	2100      	movs	r1, #0
 800227c:	4813      	ldr	r0, [pc, #76]	; (80022cc <Device_initializeComplex+0xa4>)
 800227e:	f005 f924 	bl	80074ca <memset>
		  		memset(Wifi.PASSWORD_STATION,0,strlen(Wifi.PASSWORD_STATION));
 8002282:	4813      	ldr	r0, [pc, #76]	; (80022d0 <Device_initializeComplex+0xa8>)
 8002284:	f7fd ff64 	bl	8000150 <strlen>
 8002288:	4603      	mov	r3, r0
 800228a:	461a      	mov	r2, r3
 800228c:	2100      	movs	r1, #0
 800228e:	4810      	ldr	r0, [pc, #64]	; (80022d0 <Device_initializeComplex+0xa8>)
 8002290:	f005 f91b 	bl	80074ca <memset>
		  		test(Wifi.MyIP,"-MODE STATION-");
 8002294:	490f      	ldr	r1, [pc, #60]	; (80022d4 <Device_initializeComplex+0xac>)
 8002296:	480b      	ldr	r0, [pc, #44]	; (80022c4 <Device_initializeComplex+0x9c>)
 8002298:	f004 fcba 	bl	8006c10 <test>
		  		test("","WIFI CONNECTED");
 800229c:	490e      	ldr	r1, [pc, #56]	; (80022d8 <Device_initializeComplex+0xb0>)
 800229e:	480f      	ldr	r0, [pc, #60]	; (80022dc <Device_initializeComplex+0xb4>)
 80022a0:	f004 fcb6 	bl	8006c10 <test>
		  		HAL_Delay(500);
 80022a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022a8:	f000 fd70 	bl	8002d8c <HAL_Delay>
		  }
	}while(Wifi.Mode == WIFI_MODE_AP);
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <Device_initializeComplex+0xb8>)
 80022ae:	f893 3bef 	ldrb.w	r3, [r3, #3055]	; 0xbef
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d0c6      	beq.n	8002244 <Device_initializeComplex+0x1c>

	/*------------------------------------------------------------------------------------------*/
	/*------------------------------------------------------------------------------------------*/
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	200013d0 	.word	0x200013d0
 80022c0:	0800b3f8 	.word	0x0800b3f8
 80022c4:	200010cc 	.word	0x200010cc
 80022c8:	200004df 	.word	0x200004df
 80022cc:	200010ec 	.word	0x200010ec
 80022d0:	200010fc 	.word	0x200010fc
 80022d4:	0800b40c 	.word	0x0800b40c
 80022d8:	0800b41c 	.word	0x0800b41c
 80022dc:	0800b42c 	.word	0x0800b42c
 80022e0:	200004dc 	.word	0x200004dc

080022e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022e8:	f000 fcee 	bl	8002cc8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022ec:	f000 f834 	bl	8002358 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022f0:	f000 f9be 	bl	8002670 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80022f4:	f000 f992 	bl	800261c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80022f8:	f000 f8c6 	bl	8002488 <MX_I2C1_Init>
  MX_TIM2_Init();
 80022fc:	f000 f8f4 	bl	80024e8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002300:	f000 f884 	bl	800240c <MX_ADC1_Init>
  MX_TIM3_Init();
 8002304:	f000 f93c 	bl	8002580 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim3);
 8002308:	480d      	ldr	r0, [pc, #52]	; (8002340 <main+0x5c>)
 800230a:	f002 feaf 	bl	800506c <HAL_TIM_Base_Start_IT>
  if (HAL_ADC_Start_IT(&hadc1) != HAL_OK) {
 800230e:	480d      	ldr	r0, [pc, #52]	; (8002344 <main+0x60>)
 8002310:	f000 fe38 	bl	8002f84 <HAL_ADC_Start_IT>

  }

  DS3231_Init(&hi2c1);
 8002314:	480c      	ldr	r0, [pc, #48]	; (8002348 <main+0x64>)
 8002316:	f7fe ff31 	bl	800117c <DS3231_Init>
  Device_initializeComplex();
 800231a:	f7ff ff85 	bl	8002228 <Device_initializeComplex>
//  Devcice_getTimeFromHTTP();
//
//  HAL_Delay(500);
//  DS3231_SetTime(&rtc);

  init=0;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <main+0x68>)
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN 3 */
    //DS3231_GetTime(&rtc);


	       showMonitoring(message);
 8002324:	480a      	ldr	r0, [pc, #40]	; (8002350 <main+0x6c>)
 8002326:	f004 fca9 	bl	8006c7c <showMonitoring>

	    	if (sendFlag){
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <main+0x70>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f7      	beq.n	8002324 <main+0x40>
	    	   sendFlag = false;
 8002334:	4b07      	ldr	r3, [pc, #28]	; (8002354 <main+0x70>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
	    	   sendDataToServer();
 800233a:	f7ff fea9 	bl	8002090 <sendDataToServer>
	       showMonitoring(message);
 800233e:	e7f1      	b.n	8002324 <main+0x40>
 8002340:	20001418 	.word	0x20001418
 8002344:	2000134c 	.word	0x2000134c
 8002348:	2000137c 	.word	0x2000137c
 800234c:	20000000 	.word	0x20000000
 8002350:	2000129c 	.word	0x2000129c
 8002354:	20001299 	.word	0x20001299

08002358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b094      	sub	sp, #80	; 0x50
 800235c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800235e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002362:	2228      	movs	r2, #40	; 0x28
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f005 f8af 	bl	80074ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002388:	2301      	movs	r3, #1
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800238c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002392:	2300      	movs	r3, #0
 8002394:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002396:	2301      	movs	r3, #1
 8002398:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800239a:	2302      	movs	r3, #2
 800239c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800239e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80023a4:	2300      	movs	r3, #0
 80023a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ac:	4618      	mov	r0, r3
 80023ae:	f002 f947 	bl	8004640 <HAL_RCC_OscConfig>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80023b8:	f000 f9e8 	bl	800278c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023bc:	230f      	movs	r3, #15
 80023be:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023c0:	2302      	movs	r3, #2
 80023c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	2100      	movs	r1, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 fbb3 	bl	8004b44 <HAL_RCC_ClockConfig>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80023e4:	f000 f9d2 	bl	800278c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023e8:	2302      	movs	r3, #2
 80023ea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	4618      	mov	r0, r3
 80023f4:	f002 fd34 	bl	8004e60 <HAL_RCCEx_PeriphCLKConfig>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80023fe:	f000 f9c5 	bl	800278c <Error_Handler>
  }
}
 8002402:	bf00      	nop
 8002404:	3750      	adds	r7, #80	; 0x50
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <MX_ADC1_Init+0x74>)
 800241e:	4a19      	ldr	r2, [pc, #100]	; (8002484 <MX_ADC1_Init+0x78>)
 8002420:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <MX_ADC1_Init+0x74>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <MX_ADC1_Init+0x74>)
 800242a:	2201      	movs	r2, #1
 800242c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800242e:	4b14      	ldr	r3, [pc, #80]	; (8002480 <MX_ADC1_Init+0x74>)
 8002430:	2200      	movs	r2, #0
 8002432:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <MX_ADC1_Init+0x74>)
 8002436:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800243a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800243c:	4b10      	ldr	r3, [pc, #64]	; (8002480 <MX_ADC1_Init+0x74>)
 800243e:	2200      	movs	r2, #0
 8002440:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <MX_ADC1_Init+0x74>)
 8002444:	2201      	movs	r2, #1
 8002446:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002448:	480d      	ldr	r0, [pc, #52]	; (8002480 <MX_ADC1_Init+0x74>)
 800244a:	f000 fcc3 	bl	8002dd4 <HAL_ADC_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002454:	f000 f99a 	bl	800278c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002458:	2300      	movs	r3, #0
 800245a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800245c:	2301      	movs	r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002460:	2307      	movs	r3, #7
 8002462:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	4619      	mov	r1, r3
 8002468:	4805      	ldr	r0, [pc, #20]	; (8002480 <MX_ADC1_Init+0x74>)
 800246a:	f000 ff15 	bl	8003298 <HAL_ADC_ConfigChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002474:	f000 f98a 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	2000134c 	.word	0x2000134c
 8002484:	40012400 	.word	0x40012400

08002488 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800248c:	4b13      	ldr	r3, [pc, #76]	; (80024dc <MX_I2C1_Init+0x54>)
 800248e:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <MX_I2C1_Init+0x58>)
 8002490:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <MX_I2C1_Init+0x54>)
 8002494:	4a13      	ldr	r2, [pc, #76]	; (80024e4 <MX_I2C1_Init+0x5c>)
 8002496:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8002498:	4b10      	ldr	r3, [pc, #64]	; (80024dc <MX_I2C1_Init+0x54>)
 800249a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800249e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024a0:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <MX_I2C1_Init+0x54>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <MX_I2C1_Init+0x54>)
 80024a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <MX_I2C1_Init+0x54>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <MX_I2C1_Init+0x54>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <MX_I2C1_Init+0x54>)
 80024bc:	2200      	movs	r2, #0
 80024be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <MX_I2C1_Init+0x54>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024c6:	4805      	ldr	r0, [pc, #20]	; (80024dc <MX_I2C1_Init+0x54>)
 80024c8:	f001 fc0e 	bl	8003ce8 <HAL_I2C_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80024d2:	f000 f95b 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	2000137c 	.word	0x2000137c
 80024e0:	40005400 	.word	0x40005400
 80024e4:	00061a80 	.word	0x00061a80

080024e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ee:	f107 0308 	add.w	r3, r7, #8
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fc:	463b      	mov	r3, r7
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <MX_TIM2_Init+0x94>)
 8002506:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800250a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 249;
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <MX_TIM2_Init+0x94>)
 800250e:	22f9      	movs	r2, #249	; 0xf9
 8002510:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002512:	4b1a      	ldr	r3, [pc, #104]	; (800257c <MX_TIM2_Init+0x94>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8002518:	4b18      	ldr	r3, [pc, #96]	; (800257c <MX_TIM2_Init+0x94>)
 800251a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800251e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002520:	4b16      	ldr	r3, [pc, #88]	; (800257c <MX_TIM2_Init+0x94>)
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <MX_TIM2_Init+0x94>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800252c:	4813      	ldr	r0, [pc, #76]	; (800257c <MX_TIM2_Init+0x94>)
 800252e:	f002 fd4d 	bl	8004fcc <HAL_TIM_Base_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002538:	f000 f928 	bl	800278c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800253c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002540:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002542:	f107 0308 	add.w	r3, r7, #8
 8002546:	4619      	mov	r1, r3
 8002548:	480c      	ldr	r0, [pc, #48]	; (800257c <MX_TIM2_Init+0x94>)
 800254a:	f002 fee9 	bl	8005320 <HAL_TIM_ConfigClockSource>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002554:	f000 f91a 	bl	800278c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002558:	2300      	movs	r3, #0
 800255a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002560:	463b      	mov	r3, r7
 8002562:	4619      	mov	r1, r3
 8002564:	4805      	ldr	r0, [pc, #20]	; (800257c <MX_TIM2_Init+0x94>)
 8002566:	f003 f8bf 	bl	80056e8 <HAL_TIMEx_MasterConfigSynchronization>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002570:	f000 f90c 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002574:	bf00      	nop
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	200013d0 	.word	0x200013d0

08002580 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002586:	f107 0308 	add.w	r3, r7, #8
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002594:	463b      	mov	r3, r7
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800259c:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <MX_TIM3_Init+0x94>)
 800259e:	4a1e      	ldr	r2, [pc, #120]	; (8002618 <MX_TIM3_Init+0x98>)
 80025a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <MX_TIM3_Init+0x94>)
 80025a4:	220f      	movs	r2, #15
 80025a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a8:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <MX_TIM3_Init+0x94>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 80025ae:	4b19      	ldr	r3, [pc, #100]	; (8002614 <MX_TIM3_Init+0x94>)
 80025b0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80025b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b6:	4b17      	ldr	r3, [pc, #92]	; (8002614 <MX_TIM3_Init+0x94>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <MX_TIM3_Init+0x94>)
 80025be:	2200      	movs	r2, #0
 80025c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025c2:	4814      	ldr	r0, [pc, #80]	; (8002614 <MX_TIM3_Init+0x94>)
 80025c4:	f002 fd02 	bl	8004fcc <HAL_TIM_Base_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80025ce:	f000 f8dd 	bl	800278c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025d8:	f107 0308 	add.w	r3, r7, #8
 80025dc:	4619      	mov	r1, r3
 80025de:	480d      	ldr	r0, [pc, #52]	; (8002614 <MX_TIM3_Init+0x94>)
 80025e0:	f002 fe9e 	bl	8005320 <HAL_TIM_ConfigClockSource>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80025ea:	f000 f8cf 	bl	800278c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025f6:	463b      	mov	r3, r7
 80025f8:	4619      	mov	r1, r3
 80025fa:	4806      	ldr	r0, [pc, #24]	; (8002614 <MX_TIM3_Init+0x94>)
 80025fc:	f003 f874 	bl	80056e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002606:	f000 f8c1 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800260a:	bf00      	nop
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20001418 	.word	0x20001418
 8002618:	40000400 	.word	0x40000400

0800261c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <MX_USART1_UART_Init+0x4c>)
 8002622:	4a12      	ldr	r2, [pc, #72]	; (800266c <MX_USART1_UART_Init+0x50>)
 8002624:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <MX_USART1_UART_Init+0x4c>)
 8002628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800262c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <MX_USART1_UART_Init+0x4c>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <MX_USART1_UART_Init+0x4c>)
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800263a:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <MX_USART1_UART_Init+0x4c>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <MX_USART1_UART_Init+0x4c>)
 8002642:	220c      	movs	r2, #12
 8002644:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <MX_USART1_UART_Init+0x4c>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <MX_USART1_UART_Init+0x4c>)
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002652:	4805      	ldr	r0, [pc, #20]	; (8002668 <MX_USART1_UART_Init+0x4c>)
 8002654:	f003 f8b8 	bl	80057c8 <HAL_UART_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800265e:	f000 f895 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20001460 	.word	0x20001460
 800266c:	40013800 	.word	0x40013800

08002670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002676:	f107 0310 	add.w	r3, r7, #16
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002684:	4b3d      	ldr	r3, [pc, #244]	; (800277c <MX_GPIO_Init+0x10c>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	4a3c      	ldr	r2, [pc, #240]	; (800277c <MX_GPIO_Init+0x10c>)
 800268a:	f043 0320 	orr.w	r3, r3, #32
 800268e:	6193      	str	r3, [r2, #24]
 8002690:	4b3a      	ldr	r3, [pc, #232]	; (800277c <MX_GPIO_Init+0x10c>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800269c:	4b37      	ldr	r3, [pc, #220]	; (800277c <MX_GPIO_Init+0x10c>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	4a36      	ldr	r2, [pc, #216]	; (800277c <MX_GPIO_Init+0x10c>)
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	6193      	str	r3, [r2, #24]
 80026a8:	4b34      	ldr	r3, [pc, #208]	; (800277c <MX_GPIO_Init+0x10c>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b4:	4b31      	ldr	r3, [pc, #196]	; (800277c <MX_GPIO_Init+0x10c>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	4a30      	ldr	r2, [pc, #192]	; (800277c <MX_GPIO_Init+0x10c>)
 80026ba:	f043 0308 	orr.w	r3, r3, #8
 80026be:	6193      	str	r3, [r2, #24]
 80026c0:	4b2e      	ldr	r3, [pc, #184]	; (800277c <MX_GPIO_Init+0x10c>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, _BUTTON_RST_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 80026cc:	2200      	movs	r2, #0
 80026ce:	f640 0104 	movw	r1, #2052	; 0x804
 80026d2:	482b      	ldr	r0, [pc, #172]	; (8002780 <MX_GPIO_Init+0x110>)
 80026d4:	f001 fad7 	bl	8003c86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|I2C_Led_Pin, GPIO_PIN_RESET);
 80026d8:	2200      	movs	r2, #0
 80026da:	f640 4109 	movw	r1, #3081	; 0xc09
 80026de:	4829      	ldr	r0, [pc, #164]	; (8002784 <MX_GPIO_Init+0x114>)
 80026e0:	f001 fad1 	bl	8003c86 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _BUTTON_RST_Pin PA11 */
  GPIO_InitStruct.Pin = _BUTTON_RST_Pin|GPIO_PIN_11;
 80026e4:	f640 0304 	movw	r3, #2052	; 0x804
 80026e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ea:	2301      	movs	r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f2:	2302      	movs	r3, #2
 80026f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f6:	f107 0310 	add.w	r3, r7, #16
 80026fa:	4619      	mov	r1, r3
 80026fc:	4820      	ldr	r0, [pc, #128]	; (8002780 <MX_GPIO_Init+0x110>)
 80026fe:	f001 f927 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB11 I2C_Led_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|I2C_Led_Pin;
 8002702:	f640 4309 	movw	r3, #3081	; 0xc09
 8002706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002708:	2301      	movs	r3, #1
 800270a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	2302      	movs	r3, #2
 8002712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002714:	f107 0310 	add.w	r3, r7, #16
 8002718:	4619      	mov	r1, r3
 800271a:	481a      	ldr	r0, [pc, #104]	; (8002784 <MX_GPIO_Init+0x114>)
 800271c:	f001 f918 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BUTTON_Pin RESET_BUTTON_DEVICE_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|RESET_BUTTON_DEVICE_Pin;
 8002720:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002724:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002726:	4b18      	ldr	r3, [pc, #96]	; (8002788 <MX_GPIO_Init+0x118>)
 8002728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800272a:	2301      	movs	r3, #1
 800272c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272e:	f107 0310 	add.w	r3, r7, #16
 8002732:	4619      	mov	r1, r3
 8002734:	4812      	ldr	r0, [pc, #72]	; (8002780 <MX_GPIO_Init+0x110>)
 8002736:	f001 f90b 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_DOWN_Pin BUTTON_UP_Pin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin|BUTTON_UP_Pin;
 800273a:	2330      	movs	r3, #48	; 0x30
 800273c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <MX_GPIO_Init+0x118>)
 8002740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002742:	2301      	movs	r3, #1
 8002744:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002746:	f107 0310 	add.w	r3, r7, #16
 800274a:	4619      	mov	r1, r3
 800274c:	480d      	ldr	r0, [pc, #52]	; (8002784 <MX_GPIO_Init+0x114>)
 800274e:	f001 f8ff 	bl	8003950 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	2101      	movs	r1, #1
 8002756:	200a      	movs	r0, #10
 8002758:	f001 f811 	bl	800377e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800275c:	200a      	movs	r0, #10
 800275e:	f001 f82a 	bl	80037b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2101      	movs	r1, #1
 8002766:	2017      	movs	r0, #23
 8002768:	f001 f809 	bl	800377e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800276c:	2017      	movs	r0, #23
 800276e:	f001 f822 	bl	80037b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002772:	bf00      	nop
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	40010800 	.word	0x40010800
 8002784:	40010c00 	.word	0x40010c00
 8002788:	10310000 	.word	0x10310000

0800278c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002790:	b672      	cpsid	i
}
 8002792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002794:	e7fe      	b.n	8002794 <Error_Handler+0x8>
	...

08002798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_MspInit+0x5c>)
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <HAL_MspInit+0x5c>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6193      	str	r3, [r2, #24]
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_MspInit+0x5c>)
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b6:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <HAL_MspInit+0x5c>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <HAL_MspInit+0x5c>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	61d3      	str	r3, [r2, #28]
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <HAL_MspInit+0x5c>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_MspInit+0x60>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <HAL_MspInit+0x60>)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40010000 	.word	0x40010000

080027fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 0310 	add.w	r3, r7, #16
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a18      	ldr	r2, [pc, #96]	; (8002878 <HAL_ADC_MspInit+0x7c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d129      	bne.n	8002870 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800281c:	4b17      	ldr	r3, [pc, #92]	; (800287c <HAL_ADC_MspInit+0x80>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	4a16      	ldr	r2, [pc, #88]	; (800287c <HAL_ADC_MspInit+0x80>)
 8002822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002826:	6193      	str	r3, [r2, #24]
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_ADC_MspInit+0x80>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <HAL_ADC_MspInit+0x80>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	4a10      	ldr	r2, [pc, #64]	; (800287c <HAL_ADC_MspInit+0x80>)
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	6193      	str	r3, [r2, #24]
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <HAL_ADC_MspInit+0x80>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800284c:	2301      	movs	r3, #1
 800284e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002850:	2303      	movs	r3, #3
 8002852:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002854:	f107 0310 	add.w	r3, r7, #16
 8002858:	4619      	mov	r1, r3
 800285a:	4809      	ldr	r0, [pc, #36]	; (8002880 <HAL_ADC_MspInit+0x84>)
 800285c:	f001 f878 	bl	8003950 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 8002860:	2200      	movs	r2, #0
 8002862:	2103      	movs	r1, #3
 8002864:	2012      	movs	r0, #18
 8002866:	f000 ff8a 	bl	800377e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800286a:	2012      	movs	r0, #18
 800286c:	f000 ffa3 	bl	80037b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002870:	bf00      	nop
 8002872:	3720      	adds	r7, #32
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40012400 	.word	0x40012400
 800287c:	40021000 	.word	0x40021000
 8002880:	40010800 	.word	0x40010800

08002884 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a15      	ldr	r2, [pc, #84]	; (80028f4 <HAL_I2C_MspInit+0x70>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d123      	bne.n	80028ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <HAL_I2C_MspInit+0x74>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	4a13      	ldr	r2, [pc, #76]	; (80028f8 <HAL_I2C_MspInit+0x74>)
 80028aa:	f043 0308 	orr.w	r3, r3, #8
 80028ae:	6193      	str	r3, [r2, #24]
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <HAL_I2C_MspInit+0x74>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028bc:	23c0      	movs	r3, #192	; 0xc0
 80028be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c0:	2312      	movs	r3, #18
 80028c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028c4:	2303      	movs	r3, #3
 80028c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c8:	f107 0310 	add.w	r3, r7, #16
 80028cc:	4619      	mov	r1, r3
 80028ce:	480b      	ldr	r0, [pc, #44]	; (80028fc <HAL_I2C_MspInit+0x78>)
 80028d0:	f001 f83e 	bl	8003950 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <HAL_I2C_MspInit+0x74>)
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <HAL_I2C_MspInit+0x74>)
 80028da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028de:	61d3      	str	r3, [r2, #28]
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_I2C_MspInit+0x74>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028ec:	bf00      	nop
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40005400 	.word	0x40005400
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40010c00 	.word	0x40010c00

08002900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002910:	d114      	bne.n	800293c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002912:	4b19      	ldr	r3, [pc, #100]	; (8002978 <HAL_TIM_Base_MspInit+0x78>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4a18      	ldr	r2, [pc, #96]	; (8002978 <HAL_TIM_Base_MspInit+0x78>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	61d3      	str	r3, [r2, #28]
 800291e:	4b16      	ldr	r3, [pc, #88]	; (8002978 <HAL_TIM_Base_MspInit+0x78>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2101      	movs	r1, #1
 800292e:	201c      	movs	r0, #28
 8002930:	f000 ff25 	bl	800377e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002934:	201c      	movs	r0, #28
 8002936:	f000 ff3e 	bl	80037b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800293a:	e018      	b.n	800296e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0e      	ldr	r2, [pc, #56]	; (800297c <HAL_TIM_Base_MspInit+0x7c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d113      	bne.n	800296e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002946:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <HAL_TIM_Base_MspInit+0x78>)
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <HAL_TIM_Base_MspInit+0x78>)
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	61d3      	str	r3, [r2, #28]
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_TIM_Base_MspInit+0x78>)
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 800295e:	2200      	movs	r2, #0
 8002960:	2102      	movs	r1, #2
 8002962:	201d      	movs	r0, #29
 8002964:	f000 ff0b 	bl	800377e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002968:	201d      	movs	r0, #29
 800296a:	f000 ff24 	bl	80037b6 <HAL_NVIC_EnableIRQ>
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000
 800297c:	40000400 	.word	0x40000400

08002980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0310 	add.w	r3, r7, #16
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a20      	ldr	r2, [pc, #128]	; (8002a1c <HAL_UART_MspInit+0x9c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d139      	bne.n	8002a14 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029a0:	4b1f      	ldr	r3, [pc, #124]	; (8002a20 <HAL_UART_MspInit+0xa0>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4a1e      	ldr	r2, [pc, #120]	; (8002a20 <HAL_UART_MspInit+0xa0>)
 80029a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029aa:	6193      	str	r3, [r2, #24]
 80029ac:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <HAL_UART_MspInit+0xa0>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_UART_MspInit+0xa0>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <HAL_UART_MspInit+0xa0>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6193      	str	r3, [r2, #24]
 80029c4:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <HAL_UART_MspInit+0xa0>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	f107 0310 	add.w	r3, r7, #16
 80029e2:	4619      	mov	r1, r3
 80029e4:	480f      	ldr	r0, [pc, #60]	; (8002a24 <HAL_UART_MspInit+0xa4>)
 80029e6:	f000 ffb3 	bl	8003950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f8:	f107 0310 	add.w	r3, r7, #16
 80029fc:	4619      	mov	r1, r3
 80029fe:	4809      	ldr	r0, [pc, #36]	; (8002a24 <HAL_UART_MspInit+0xa4>)
 8002a00:	f000 ffa6 	bl	8003950 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a04:	2200      	movs	r2, #0
 8002a06:	2100      	movs	r1, #0
 8002a08:	2025      	movs	r0, #37	; 0x25
 8002a0a:	f000 feb8 	bl	800377e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a0e:	2025      	movs	r0, #37	; 0x25
 8002a10:	f000 fed1 	bl	80037b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a14:	bf00      	nop
 8002a16:	3720      	adds	r7, #32
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40013800 	.word	0x40013800
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40010800 	.word	0x40010800

08002a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a2c:	e7fe      	b.n	8002a2c <NMI_Handler+0x4>

08002a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a32:	e7fe      	b.n	8002a32 <HardFault_Handler+0x4>

08002a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a38:	e7fe      	b.n	8002a38 <MemManage_Handler+0x4>

08002a3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a3e:	e7fe      	b.n	8002a3e <BusFault_Handler+0x4>

08002a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a44:	e7fe      	b.n	8002a44 <UsageFault_Handler+0x4>

08002a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a6e:	f000 f971 	bl	8002d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_Pin);
 8002a7a:	2010      	movs	r0, #16
 8002a7c:	f001 f91c 	bl	8003cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002a80:	bf00      	nop
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a88:	4802      	ldr	r0, [pc, #8]	; (8002a94 <ADC1_2_IRQHandler+0x10>)
 8002a8a:	f000 fb3d 	bl	8003108 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	2000134c 	.word	0x2000134c

08002a98 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_Pin);
 8002a9c:	2020      	movs	r0, #32
 8002a9e:	f001 f90b 	bl	8003cb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RESET_BUTTON_Pin);
 8002aa2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002aa6:	f001 f907 	bl	8003cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <TIM2_IRQHandler+0x10>)
 8002ab6:	f002 fb2b 	bl	8005110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200013d0 	.word	0x200013d0

08002ac4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <TIM3_IRQHandler+0x10>)
 8002aca:	f002 fb21 	bl	8005110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20001418 	.word	0x20001418

08002ad8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002adc:	4803      	ldr	r0, [pc, #12]	; (8002aec <USART1_IRQHandler+0x14>)
 8002ade:	f002 ff6b 	bl	80059b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  Wifi_RxCallBack();
 8002ae2:	f7fe fd3f 	bl	8001564 <Wifi_RxCallBack>
  /* USER CODE END USART1_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20001460 	.word	0x20001460

08002af0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return 1;
 8002af4:	2301      	movs	r3, #1
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <_kill>:

int _kill(int pid, int sig)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b08:	f004 fd72 	bl	80075f0 <__errno>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2216      	movs	r2, #22
 8002b10:	601a      	str	r2, [r3, #0]
  return -1;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <_exit>:

void _exit (int status)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b26:	f04f 31ff 	mov.w	r1, #4294967295
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ffe7 	bl	8002afe <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b30:	e7fe      	b.n	8002b30 <_exit+0x12>

08002b32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	e00a      	b.n	8002b5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b44:	f3af 8000 	nop.w
 8002b48:	4601      	mov	r1, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	60ba      	str	r2, [r7, #8]
 8002b50:	b2ca      	uxtb	r2, r1
 8002b52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	3301      	adds	r3, #1
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	dbf0      	blt.n	8002b44 <_read+0x12>
  }

  return len;
 8002b62:	687b      	ldr	r3, [r7, #4]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	e009      	b.n	8002b92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	60ba      	str	r2, [r7, #8]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	dbf1      	blt.n	8002b7e <_write+0x12>
  }
  return len;
 8002b9a:	687b      	ldr	r3, [r7, #4]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <_close>:

int _close(int file)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bca:	605a      	str	r2, [r3, #4]
  return 0;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <_isatty>:

int _isatty(int file)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002be0:	2301      	movs	r3, #1
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c0c:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <_sbrk+0x5c>)
 8002c0e:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <_sbrk+0x60>)
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c18:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <_sbrk+0x64>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d102      	bne.n	8002c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <_sbrk+0x64>)
 8002c22:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <_sbrk+0x68>)
 8002c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <_sbrk+0x64>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d207      	bcs.n	8002c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c34:	f004 fcdc 	bl	80075f0 <__errno>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	220c      	movs	r2, #12
 8002c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c42:	e009      	b.n	8002c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c44:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <_sbrk+0x64>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <_sbrk+0x64>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	4a05      	ldr	r2, [pc, #20]	; (8002c68 <_sbrk+0x64>)
 8002c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c56:	68fb      	ldr	r3, [r7, #12]

}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20005000 	.word	0x20005000
 8002c64:	00000400 	.word	0x00000400
 8002c68:	200014ac 	.word	0x200014ac
 8002c6c:	20001a08 	.word	0x20001a08

08002c70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c7c:	f7ff fff8 	bl	8002c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c80:	480b      	ldr	r0, [pc, #44]	; (8002cb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c82:	490c      	ldr	r1, [pc, #48]	; (8002cb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002c84:	4a0c      	ldr	r2, [pc, #48]	; (8002cb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c88:	e002      	b.n	8002c90 <LoopCopyDataInit>

08002c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c8e:	3304      	adds	r3, #4

08002c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c94:	d3f9      	bcc.n	8002c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c96:	4a09      	ldr	r2, [pc, #36]	; (8002cbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c98:	4c09      	ldr	r4, [pc, #36]	; (8002cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c9c:	e001      	b.n	8002ca2 <LoopFillZerobss>

08002c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca0:	3204      	adds	r2, #4

08002ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca4:	d3fb      	bcc.n	8002c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ca6:	f004 fca9 	bl	80075fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002caa:	f7ff fb1b 	bl	80022e4 <main>
  bx lr
 8002cae:	4770      	bx	lr
  ldr r0, =_sdata
 8002cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cb4:	200004bc 	.word	0x200004bc
  ldr r2, =_sidata
 8002cb8:	0800cd54 	.word	0x0800cd54
  ldr r2, =_sbss
 8002cbc:	200004bc 	.word	0x200004bc
  ldr r4, =_ebss
 8002cc0:	20001a08 	.word	0x20001a08

08002cc4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cc4:	e7fe      	b.n	8002cc4 <CAN1_RX1_IRQHandler>
	...

08002cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ccc:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <HAL_Init+0x28>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <HAL_Init+0x28>)
 8002cd2:	f043 0310 	orr.w	r3, r3, #16
 8002cd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd8:	2003      	movs	r0, #3
 8002cda:	f000 fd45 	bl	8003768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cde:	200f      	movs	r0, #15
 8002ce0:	f000 f808 	bl	8002cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ce4:	f7ff fd58 	bl	8002798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40022000 	.word	0x40022000

08002cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_InitTick+0x54>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_InitTick+0x58>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4619      	mov	r1, r3
 8002d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fd5d 	bl	80037d2 <HAL_SYSTICK_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e00e      	b.n	8002d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b0f      	cmp	r3, #15
 8002d26:	d80a      	bhi.n	8002d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	f000 fd25 	bl	800377e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d34:	4a06      	ldr	r2, [pc, #24]	; (8002d50 <HAL_InitTick+0x5c>)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e000      	b.n	8002d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	200002e8 	.word	0x200002e8
 8002d4c:	200002f0 	.word	0x200002f0
 8002d50:	200002ec 	.word	0x200002ec

08002d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_IncTick+0x1c>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_IncTick+0x20>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	4a03      	ldr	r2, [pc, #12]	; (8002d74 <HAL_IncTick+0x20>)
 8002d66:	6013      	str	r3, [r2, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr
 8002d70:	200002f0 	.word	0x200002f0
 8002d74:	200014b0 	.word	0x200014b0

08002d78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d7c:	4b02      	ldr	r3, [pc, #8]	; (8002d88 <HAL_GetTick+0x10>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr
 8002d88:	200014b0 	.word	0x200014b0

08002d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d94:	f7ff fff0 	bl	8002d78 <HAL_GetTick>
 8002d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d005      	beq.n	8002db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_Delay+0x44>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002db2:	bf00      	nop
 8002db4:	f7ff ffe0 	bl	8002d78 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d8f7      	bhi.n	8002db4 <HAL_Delay+0x28>
  {
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	200002f0 	.word	0x200002f0

08002dd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e0be      	b.n	8002f74 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d109      	bne.n	8002e18 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff fcf2 	bl	80027fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fb8f 	bl	800353c <ADC_ConversionStop_Disable>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f040 8099 	bne.w	8002f62 <HAL_ADC_Init+0x18e>
 8002e30:	7dfb      	ldrb	r3, [r7, #23]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f040 8095 	bne.w	8002f62 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e40:	f023 0302 	bic.w	r3, r3, #2
 8002e44:	f043 0202 	orr.w	r2, r3, #2
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e54:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	7b1b      	ldrb	r3, [r3, #12]
 8002e5a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e5c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e6c:	d003      	beq.n	8002e76 <HAL_ADC_Init+0xa2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d102      	bne.n	8002e7c <HAL_ADC_Init+0xa8>
 8002e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e7a:	e000      	b.n	8002e7e <HAL_ADC_Init+0xaa>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	7d1b      	ldrb	r3, [r3, #20]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d119      	bne.n	8002ec0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7b1b      	ldrb	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	035a      	lsls	r2, r3, #13
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e00b      	b.n	8002ec0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	f043 0201 	orr.w	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <HAL_ADC_Init+0x1a8>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	68b9      	ldr	r1, [r7, #8]
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef0:	d003      	beq.n	8002efa <HAL_ADC_Init+0x126>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d104      	bne.n	8002f04 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	051b      	lsls	r3, r3, #20
 8002f02:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <HAL_ADC_Init+0x1ac>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d10b      	bne.n	8002f40 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	f023 0303 	bic.w	r3, r3, #3
 8002f36:	f043 0201 	orr.w	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f3e:	e018      	b.n	8002f72 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	f023 0312 	bic.w	r3, r3, #18
 8002f48:	f043 0210 	orr.w	r2, r3, #16
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	f043 0201 	orr.w	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f60:	e007      	b.n	8002f72 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	f043 0210 	orr.w	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	ffe1f7fd 	.word	0xffe1f7fd
 8002f80:	ff1f0efe 	.word	0xff1f0efe

08002f84 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_ADC_Start_IT+0x1a>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e0a0      	b.n	80030e0 <HAL_ADC_Start_IT+0x15c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fa6e 	bl	8003488 <ADC_Enable>
 8002fac:	4603      	mov	r3, r0
 8002fae:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f040 808f 	bne.w	80030d6 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a45      	ldr	r2, [pc, #276]	; (80030e8 <HAL_ADC_Start_IT+0x164>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d105      	bne.n	8002fe2 <HAL_ADC_Start_IT+0x5e>
 8002fd6:	4b45      	ldr	r3, [pc, #276]	; (80030ec <HAL_ADC_Start_IT+0x168>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d115      	bne.n	800300e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d026      	beq.n	800304a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003004:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800300c:	e01d      	b.n	800304a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a33      	ldr	r2, [pc, #204]	; (80030ec <HAL_ADC_Start_IT+0x168>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d004      	beq.n	800302e <HAL_ADC_Start_IT+0xaa>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a2f      	ldr	r2, [pc, #188]	; (80030e8 <HAL_ADC_Start_IT+0x164>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d10d      	bne.n	800304a <HAL_ADC_Start_IT+0xc6>
 800302e:	4b2f      	ldr	r3, [pc, #188]	; (80030ec <HAL_ADC_Start_IT+0x168>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003036:	2b00      	cmp	r3, #0
 8003038:	d007      	beq.n	800304a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003042:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d006      	beq.n	8003064 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	f023 0206 	bic.w	r2, r3, #6
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	62da      	str	r2, [r3, #44]	; 0x2c
 8003062:	e002      	b.n	800306a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f06f 0202 	mvn.w	r2, #2
 800307a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0220 	orr.w	r2, r2, #32
 800308a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003096:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800309a:	d113      	bne.n	80030c4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80030a0:	4a11      	ldr	r2, [pc, #68]	; (80030e8 <HAL_ADC_Start_IT+0x164>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d105      	bne.n	80030b2 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80030a6:	4b11      	ldr	r3, [pc, #68]	; (80030ec <HAL_ADC_Start_IT+0x168>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d108      	bne.n	80030c4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80030c0:	609a      	str	r2, [r3, #8]
 80030c2:	e00c      	b.n	80030de <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	e003      	b.n	80030de <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030de:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40012800 	.word	0x40012800
 80030ec:	40012400 	.word	0x40012400

080030f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d03e      	beq.n	80031a8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d039      	beq.n	80031a8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003156:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800315a:	d11d      	bne.n	8003198 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003160:	2b00      	cmp	r3, #0
 8003162:	d119      	bne.n	8003198 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0220 	bic.w	r2, r2, #32
 8003172:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d105      	bne.n	8003198 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	f043 0201 	orr.w	r2, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7fe fd55 	bl	8001c48 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f06f 0212 	mvn.w	r2, #18
 80031a6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d04d      	beq.n	800324e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d048      	beq.n	800324e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d105      	bne.n	80031d4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80031de:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80031e2:	d012      	beq.n	800320a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d125      	bne.n	800323e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80031fc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003200:	d11d      	bne.n	800323e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003206:	2b00      	cmp	r3, #0
 8003208:	d119      	bne.n	800323e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003218:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d105      	bne.n	800323e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	f043 0201 	orr.w	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f9bd 	bl	80035be <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 020c 	mvn.w	r2, #12
 800324c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d012      	beq.n	800327e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f809 	bl	8003286 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0201 	mvn.w	r2, #1
 800327c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x20>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e0dc      	b.n	8003472 <HAL_ADC_ConfigChannel+0x1da>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b06      	cmp	r3, #6
 80032c6:	d81c      	bhi.n	8003302 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	3b05      	subs	r3, #5
 80032da:	221f      	movs	r2, #31
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	4019      	ands	r1, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	3b05      	subs	r3, #5
 80032f4:	fa00 f203 	lsl.w	r2, r0, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	635a      	str	r2, [r3, #52]	; 0x34
 8003300:	e03c      	b.n	800337c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b0c      	cmp	r3, #12
 8003308:	d81c      	bhi.n	8003344 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	3b23      	subs	r3, #35	; 0x23
 800331c:	221f      	movs	r2, #31
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	4019      	ands	r1, r3
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	3b23      	subs	r3, #35	; 0x23
 8003336:	fa00 f203 	lsl.w	r2, r0, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
 8003342:	e01b      	b.n	800337c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	3b41      	subs	r3, #65	; 0x41
 8003356:	221f      	movs	r2, #31
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	4019      	ands	r1, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	3b41      	subs	r3, #65	; 0x41
 8003370:	fa00 f203 	lsl.w	r2, r0, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b09      	cmp	r3, #9
 8003382:	d91c      	bls.n	80033be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68d9      	ldr	r1, [r3, #12]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4613      	mov	r3, r2
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	4413      	add	r3, r2
 8003394:	3b1e      	subs	r3, #30
 8003396:	2207      	movs	r2, #7
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	4019      	ands	r1, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	6898      	ldr	r0, [r3, #8]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4613      	mov	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4413      	add	r3, r2
 80033ae:	3b1e      	subs	r3, #30
 80033b0:	fa00 f203 	lsl.w	r2, r0, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	60da      	str	r2, [r3, #12]
 80033bc:	e019      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6919      	ldr	r1, [r3, #16]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4413      	add	r3, r2
 80033ce:	2207      	movs	r2, #7
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	4019      	ands	r1, r3
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	6898      	ldr	r0, [r3, #8]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	fa00 f203 	lsl.w	r2, r0, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b10      	cmp	r3, #16
 80033f8:	d003      	beq.n	8003402 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033fe:	2b11      	cmp	r3, #17
 8003400:	d132      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1d      	ldr	r2, [pc, #116]	; (800347c <HAL_ADC_ConfigChannel+0x1e4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d125      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d126      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003428:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b10      	cmp	r3, #16
 8003430:	d11a      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003432:	4b13      	ldr	r3, [pc, #76]	; (8003480 <HAL_ADC_ConfigChannel+0x1e8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a13      	ldr	r2, [pc, #76]	; (8003484 <HAL_ADC_ConfigChannel+0x1ec>)
 8003438:	fba2 2303 	umull	r2, r3, r2, r3
 800343c:	0c9a      	lsrs	r2, r3, #18
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003448:	e002      	b.n	8003450 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	3b01      	subs	r3, #1
 800344e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f9      	bne.n	800344a <HAL_ADC_ConfigChannel+0x1b2>
 8003456:	e007      	b.n	8003468 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	f043 0220 	orr.w	r2, r3, #32
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003470:	7bfb      	ldrb	r3, [r7, #15]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	40012400 	.word	0x40012400
 8003480:	200002e8 	.word	0x200002e8
 8003484:	431bde83 	.word	0x431bde83

08003488 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d040      	beq.n	8003528 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0201 	orr.w	r2, r2, #1
 80034b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034b6:	4b1f      	ldr	r3, [pc, #124]	; (8003534 <ADC_Enable+0xac>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1f      	ldr	r2, [pc, #124]	; (8003538 <ADC_Enable+0xb0>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	0c9b      	lsrs	r3, r3, #18
 80034c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80034c4:	e002      	b.n	80034cc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f9      	bne.n	80034c6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034d2:	f7ff fc51 	bl	8002d78 <HAL_GetTick>
 80034d6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034d8:	e01f      	b.n	800351a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034da:	f7ff fc4d 	bl	8002d78 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d918      	bls.n	800351a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d011      	beq.n	800351a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	f043 0210 	orr.w	r2, r3, #16
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	f043 0201 	orr.w	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e007      	b.n	800352a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b01      	cmp	r3, #1
 8003526:	d1d8      	bne.n	80034da <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	200002e8 	.word	0x200002e8
 8003538:	431bde83 	.word	0x431bde83

0800353c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b01      	cmp	r3, #1
 8003554:	d12e      	bne.n	80035b4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003566:	f7ff fc07 	bl	8002d78 <HAL_GetTick>
 800356a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800356c:	e01b      	b.n	80035a6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800356e:	f7ff fc03 	bl	8002d78 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d914      	bls.n	80035a6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d10d      	bne.n	80035a6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	f043 0210 	orr.w	r2, r3, #16
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	f043 0201 	orr.w	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e007      	b.n	80035b6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d0dc      	beq.n	800356e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr

080035d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <__NVIC_SetPriorityGrouping+0x44>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035ec:	4013      	ands	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003602:	4a04      	ldr	r2, [pc, #16]	; (8003614 <__NVIC_SetPriorityGrouping+0x44>)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	60d3      	str	r3, [r2, #12]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800361c:	4b04      	ldr	r3, [pc, #16]	; (8003630 <__NVIC_GetPriorityGrouping+0x18>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	f003 0307 	and.w	r3, r3, #7
}
 8003626:	4618      	mov	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	2b00      	cmp	r3, #0
 8003644:	db0b      	blt.n	800365e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	f003 021f 	and.w	r2, r3, #31
 800364c:	4906      	ldr	r1, [pc, #24]	; (8003668 <__NVIC_EnableIRQ+0x34>)
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2001      	movs	r0, #1
 8003656:	fa00 f202 	lsl.w	r2, r0, r2
 800365a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	e000e100 	.word	0xe000e100

0800366c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	6039      	str	r1, [r7, #0]
 8003676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367c:	2b00      	cmp	r3, #0
 800367e:	db0a      	blt.n	8003696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	b2da      	uxtb	r2, r3
 8003684:	490c      	ldr	r1, [pc, #48]	; (80036b8 <__NVIC_SetPriority+0x4c>)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	0112      	lsls	r2, r2, #4
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	440b      	add	r3, r1
 8003690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003694:	e00a      	b.n	80036ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4908      	ldr	r1, [pc, #32]	; (80036bc <__NVIC_SetPriority+0x50>)
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	3b04      	subs	r3, #4
 80036a4:	0112      	lsls	r2, r2, #4
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	440b      	add	r3, r1
 80036aa:	761a      	strb	r2, [r3, #24]
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	e000e100 	.word	0xe000e100
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b089      	sub	sp, #36	; 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f1c3 0307 	rsb	r3, r3, #7
 80036da:	2b04      	cmp	r3, #4
 80036dc:	bf28      	it	cs
 80036de:	2304      	movcs	r3, #4
 80036e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3304      	adds	r3, #4
 80036e6:	2b06      	cmp	r3, #6
 80036e8:	d902      	bls.n	80036f0 <NVIC_EncodePriority+0x30>
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3b03      	subs	r3, #3
 80036ee:	e000      	b.n	80036f2 <NVIC_EncodePriority+0x32>
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f4:	f04f 32ff 	mov.w	r2, #4294967295
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43da      	mvns	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	401a      	ands	r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003708:	f04f 31ff 	mov.w	r1, #4294967295
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	fa01 f303 	lsl.w	r3, r1, r3
 8003712:	43d9      	mvns	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003718:	4313      	orrs	r3, r2
         );
}
 800371a:	4618      	mov	r0, r3
 800371c:	3724      	adds	r7, #36	; 0x24
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3b01      	subs	r3, #1
 8003730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003734:	d301      	bcc.n	800373a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003736:	2301      	movs	r3, #1
 8003738:	e00f      	b.n	800375a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800373a:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <SysTick_Config+0x40>)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3b01      	subs	r3, #1
 8003740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003742:	210f      	movs	r1, #15
 8003744:	f04f 30ff 	mov.w	r0, #4294967295
 8003748:	f7ff ff90 	bl	800366c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <SysTick_Config+0x40>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003752:	4b04      	ldr	r3, [pc, #16]	; (8003764 <SysTick_Config+0x40>)
 8003754:	2207      	movs	r2, #7
 8003756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	e000e010 	.word	0xe000e010

08003768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff ff2d 	bl	80035d0 <__NVIC_SetPriorityGrouping>
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800377e:	b580      	push	{r7, lr}
 8003780:	b086      	sub	sp, #24
 8003782:	af00      	add	r7, sp, #0
 8003784:	4603      	mov	r3, r0
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003790:	f7ff ff42 	bl	8003618 <__NVIC_GetPriorityGrouping>
 8003794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	6978      	ldr	r0, [r7, #20]
 800379c:	f7ff ff90 	bl	80036c0 <NVIC_EncodePriority>
 80037a0:	4602      	mov	r2, r0
 80037a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff ff5f 	bl	800366c <__NVIC_SetPriority>
}
 80037ae:	bf00      	nop
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	4603      	mov	r3, r0
 80037be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff35 	bl	8003634 <__NVIC_EnableIRQ>
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ffa2 	bl	8003724 <SysTick_Config>
 80037e0:	4603      	mov	r3, r0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d008      	beq.n	8003814 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2204      	movs	r2, #4
 8003806:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e020      	b.n	8003856 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 020e 	bic.w	r2, r2, #14
 8003822:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0201 	bic.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	2101      	movs	r1, #1
 800383e:	fa01 f202 	lsl.w	r2, r1, r2
 8003842:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d005      	beq.n	8003884 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2204      	movs	r2, #4
 800387c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
 8003882:	e051      	b.n	8003928 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 020e 	bic.w	r2, r2, #14
 8003892:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a22      	ldr	r2, [pc, #136]	; (8003934 <HAL_DMA_Abort_IT+0xd4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d029      	beq.n	8003902 <HAL_DMA_Abort_IT+0xa2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a21      	ldr	r2, [pc, #132]	; (8003938 <HAL_DMA_Abort_IT+0xd8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d022      	beq.n	80038fe <HAL_DMA_Abort_IT+0x9e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1f      	ldr	r2, [pc, #124]	; (800393c <HAL_DMA_Abort_IT+0xdc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01a      	beq.n	80038f8 <HAL_DMA_Abort_IT+0x98>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1e      	ldr	r2, [pc, #120]	; (8003940 <HAL_DMA_Abort_IT+0xe0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d012      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x92>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1c      	ldr	r2, [pc, #112]	; (8003944 <HAL_DMA_Abort_IT+0xe4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00a      	beq.n	80038ec <HAL_DMA_Abort_IT+0x8c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1b      	ldr	r2, [pc, #108]	; (8003948 <HAL_DMA_Abort_IT+0xe8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d102      	bne.n	80038e6 <HAL_DMA_Abort_IT+0x86>
 80038e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80038e4:	e00e      	b.n	8003904 <HAL_DMA_Abort_IT+0xa4>
 80038e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038ea:	e00b      	b.n	8003904 <HAL_DMA_Abort_IT+0xa4>
 80038ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038f0:	e008      	b.n	8003904 <HAL_DMA_Abort_IT+0xa4>
 80038f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038f6:	e005      	b.n	8003904 <HAL_DMA_Abort_IT+0xa4>
 80038f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038fc:	e002      	b.n	8003904 <HAL_DMA_Abort_IT+0xa4>
 80038fe:	2310      	movs	r3, #16
 8003900:	e000      	b.n	8003904 <HAL_DMA_Abort_IT+0xa4>
 8003902:	2301      	movs	r3, #1
 8003904:	4a11      	ldr	r2, [pc, #68]	; (800394c <HAL_DMA_Abort_IT+0xec>)
 8003906:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4798      	blx	r3
    } 
  }
  return status;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40020008 	.word	0x40020008
 8003938:	4002001c 	.word	0x4002001c
 800393c:	40020030 	.word	0x40020030
 8003940:	40020044 	.word	0x40020044
 8003944:	40020058 	.word	0x40020058
 8003948:	4002006c 	.word	0x4002006c
 800394c:	40020000 	.word	0x40020000

08003950 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003950:	b480      	push	{r7}
 8003952:	b08b      	sub	sp, #44	; 0x2c
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800395a:	2300      	movs	r3, #0
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800395e:	2300      	movs	r3, #0
 8003960:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003962:	e169      	b.n	8003c38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003964:	2201      	movs	r2, #1
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	429a      	cmp	r2, r3
 800397e:	f040 8158 	bne.w	8003c32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4a9a      	ldr	r2, [pc, #616]	; (8003bf0 <HAL_GPIO_Init+0x2a0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d05e      	beq.n	8003a4a <HAL_GPIO_Init+0xfa>
 800398c:	4a98      	ldr	r2, [pc, #608]	; (8003bf0 <HAL_GPIO_Init+0x2a0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d875      	bhi.n	8003a7e <HAL_GPIO_Init+0x12e>
 8003992:	4a98      	ldr	r2, [pc, #608]	; (8003bf4 <HAL_GPIO_Init+0x2a4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d058      	beq.n	8003a4a <HAL_GPIO_Init+0xfa>
 8003998:	4a96      	ldr	r2, [pc, #600]	; (8003bf4 <HAL_GPIO_Init+0x2a4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d86f      	bhi.n	8003a7e <HAL_GPIO_Init+0x12e>
 800399e:	4a96      	ldr	r2, [pc, #600]	; (8003bf8 <HAL_GPIO_Init+0x2a8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d052      	beq.n	8003a4a <HAL_GPIO_Init+0xfa>
 80039a4:	4a94      	ldr	r2, [pc, #592]	; (8003bf8 <HAL_GPIO_Init+0x2a8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d869      	bhi.n	8003a7e <HAL_GPIO_Init+0x12e>
 80039aa:	4a94      	ldr	r2, [pc, #592]	; (8003bfc <HAL_GPIO_Init+0x2ac>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d04c      	beq.n	8003a4a <HAL_GPIO_Init+0xfa>
 80039b0:	4a92      	ldr	r2, [pc, #584]	; (8003bfc <HAL_GPIO_Init+0x2ac>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d863      	bhi.n	8003a7e <HAL_GPIO_Init+0x12e>
 80039b6:	4a92      	ldr	r2, [pc, #584]	; (8003c00 <HAL_GPIO_Init+0x2b0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d046      	beq.n	8003a4a <HAL_GPIO_Init+0xfa>
 80039bc:	4a90      	ldr	r2, [pc, #576]	; (8003c00 <HAL_GPIO_Init+0x2b0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d85d      	bhi.n	8003a7e <HAL_GPIO_Init+0x12e>
 80039c2:	2b12      	cmp	r3, #18
 80039c4:	d82a      	bhi.n	8003a1c <HAL_GPIO_Init+0xcc>
 80039c6:	2b12      	cmp	r3, #18
 80039c8:	d859      	bhi.n	8003a7e <HAL_GPIO_Init+0x12e>
 80039ca:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <HAL_GPIO_Init+0x80>)
 80039cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d0:	08003a4b 	.word	0x08003a4b
 80039d4:	08003a25 	.word	0x08003a25
 80039d8:	08003a37 	.word	0x08003a37
 80039dc:	08003a79 	.word	0x08003a79
 80039e0:	08003a7f 	.word	0x08003a7f
 80039e4:	08003a7f 	.word	0x08003a7f
 80039e8:	08003a7f 	.word	0x08003a7f
 80039ec:	08003a7f 	.word	0x08003a7f
 80039f0:	08003a7f 	.word	0x08003a7f
 80039f4:	08003a7f 	.word	0x08003a7f
 80039f8:	08003a7f 	.word	0x08003a7f
 80039fc:	08003a7f 	.word	0x08003a7f
 8003a00:	08003a7f 	.word	0x08003a7f
 8003a04:	08003a7f 	.word	0x08003a7f
 8003a08:	08003a7f 	.word	0x08003a7f
 8003a0c:	08003a7f 	.word	0x08003a7f
 8003a10:	08003a7f 	.word	0x08003a7f
 8003a14:	08003a2d 	.word	0x08003a2d
 8003a18:	08003a41 	.word	0x08003a41
 8003a1c:	4a79      	ldr	r2, [pc, #484]	; (8003c04 <HAL_GPIO_Init+0x2b4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d013      	beq.n	8003a4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a22:	e02c      	b.n	8003a7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	623b      	str	r3, [r7, #32]
          break;
 8003a2a:	e029      	b.n	8003a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	3304      	adds	r3, #4
 8003a32:	623b      	str	r3, [r7, #32]
          break;
 8003a34:	e024      	b.n	8003a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	623b      	str	r3, [r7, #32]
          break;
 8003a3e:	e01f      	b.n	8003a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	330c      	adds	r3, #12
 8003a46:	623b      	str	r3, [r7, #32]
          break;
 8003a48:	e01a      	b.n	8003a80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d102      	bne.n	8003a58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a52:	2304      	movs	r3, #4
 8003a54:	623b      	str	r3, [r7, #32]
          break;
 8003a56:	e013      	b.n	8003a80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d105      	bne.n	8003a6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a60:	2308      	movs	r3, #8
 8003a62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	611a      	str	r2, [r3, #16]
          break;
 8003a6a:	e009      	b.n	8003a80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	615a      	str	r2, [r3, #20]
          break;
 8003a76:	e003      	b.n	8003a80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	623b      	str	r3, [r7, #32]
          break;
 8003a7c:	e000      	b.n	8003a80 <HAL_GPIO_Init+0x130>
          break;
 8003a7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2bff      	cmp	r3, #255	; 0xff
 8003a84:	d801      	bhi.n	8003a8a <HAL_GPIO_Init+0x13a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	e001      	b.n	8003a8e <HAL_GPIO_Init+0x13e>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2bff      	cmp	r3, #255	; 0xff
 8003a94:	d802      	bhi.n	8003a9c <HAL_GPIO_Init+0x14c>
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	e002      	b.n	8003aa2 <HAL_GPIO_Init+0x152>
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	3b08      	subs	r3, #8
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	210f      	movs	r1, #15
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	6a39      	ldr	r1, [r7, #32]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8003abc:	431a      	orrs	r2, r3
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 80b1 	beq.w	8003c32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ad0:	4b4d      	ldr	r3, [pc, #308]	; (8003c08 <HAL_GPIO_Init+0x2b8>)
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	4a4c      	ldr	r2, [pc, #304]	; (8003c08 <HAL_GPIO_Init+0x2b8>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6193      	str	r3, [r2, #24]
 8003adc:	4b4a      	ldr	r3, [pc, #296]	; (8003c08 <HAL_GPIO_Init+0x2b8>)
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ae8:	4a48      	ldr	r2, [pc, #288]	; (8003c0c <HAL_GPIO_Init+0x2bc>)
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	089b      	lsrs	r3, r3, #2
 8003aee:	3302      	adds	r3, #2
 8003af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	220f      	movs	r2, #15
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a40      	ldr	r2, [pc, #256]	; (8003c10 <HAL_GPIO_Init+0x2c0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d013      	beq.n	8003b3c <HAL_GPIO_Init+0x1ec>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a3f      	ldr	r2, [pc, #252]	; (8003c14 <HAL_GPIO_Init+0x2c4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00d      	beq.n	8003b38 <HAL_GPIO_Init+0x1e8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a3e      	ldr	r2, [pc, #248]	; (8003c18 <HAL_GPIO_Init+0x2c8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d007      	beq.n	8003b34 <HAL_GPIO_Init+0x1e4>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a3d      	ldr	r2, [pc, #244]	; (8003c1c <HAL_GPIO_Init+0x2cc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d101      	bne.n	8003b30 <HAL_GPIO_Init+0x1e0>
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e006      	b.n	8003b3e <HAL_GPIO_Init+0x1ee>
 8003b30:	2304      	movs	r3, #4
 8003b32:	e004      	b.n	8003b3e <HAL_GPIO_Init+0x1ee>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e002      	b.n	8003b3e <HAL_GPIO_Init+0x1ee>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <HAL_GPIO_Init+0x1ee>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b40:	f002 0203 	and.w	r2, r2, #3
 8003b44:	0092      	lsls	r2, r2, #2
 8003b46:	4093      	lsls	r3, r2
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b4e:	492f      	ldr	r1, [pc, #188]	; (8003c0c <HAL_GPIO_Init+0x2bc>)
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	089b      	lsrs	r3, r3, #2
 8003b54:	3302      	adds	r3, #2
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d006      	beq.n	8003b76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b68:	4b2d      	ldr	r3, [pc, #180]	; (8003c20 <HAL_GPIO_Init+0x2d0>)
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	492c      	ldr	r1, [pc, #176]	; (8003c20 <HAL_GPIO_Init+0x2d0>)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	608b      	str	r3, [r1, #8]
 8003b74:	e006      	b.n	8003b84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b76:	4b2a      	ldr	r3, [pc, #168]	; (8003c20 <HAL_GPIO_Init+0x2d0>)
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	4928      	ldr	r1, [pc, #160]	; (8003c20 <HAL_GPIO_Init+0x2d0>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d006      	beq.n	8003b9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b90:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <HAL_GPIO_Init+0x2d0>)
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	4922      	ldr	r1, [pc, #136]	; (8003c20 <HAL_GPIO_Init+0x2d0>)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60cb      	str	r3, [r1, #12]
 8003b9c:	e006      	b.n	8003bac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b9e:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <HAL_GPIO_Init+0x2d0>)
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	491e      	ldr	r1, [pc, #120]	; (8003c20 <HAL_GPIO_Init+0x2d0>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d006      	beq.n	8003bc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003bb8:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <HAL_GPIO_Init+0x2d0>)
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	4918      	ldr	r1, [pc, #96]	; (8003c20 <HAL_GPIO_Init+0x2d0>)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	604b      	str	r3, [r1, #4]
 8003bc4:	e006      	b.n	8003bd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003bc6:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <HAL_GPIO_Init+0x2d0>)
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	4914      	ldr	r1, [pc, #80]	; (8003c20 <HAL_GPIO_Init+0x2d0>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d021      	beq.n	8003c24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003be0:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <HAL_GPIO_Init+0x2d0>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	490e      	ldr	r1, [pc, #56]	; (8003c20 <HAL_GPIO_Init+0x2d0>)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]
 8003bec:	e021      	b.n	8003c32 <HAL_GPIO_Init+0x2e2>
 8003bee:	bf00      	nop
 8003bf0:	10320000 	.word	0x10320000
 8003bf4:	10310000 	.word	0x10310000
 8003bf8:	10220000 	.word	0x10220000
 8003bfc:	10210000 	.word	0x10210000
 8003c00:	10120000 	.word	0x10120000
 8003c04:	10110000 	.word	0x10110000
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40010000 	.word	0x40010000
 8003c10:	40010800 	.word	0x40010800
 8003c14:	40010c00 	.word	0x40010c00
 8003c18:	40011000 	.word	0x40011000
 8003c1c:	40011400 	.word	0x40011400
 8003c20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c24:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <HAL_GPIO_Init+0x304>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	4909      	ldr	r1, [pc, #36]	; (8003c54 <HAL_GPIO_Init+0x304>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	3301      	adds	r3, #1
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f47f ae8e 	bne.w	8003964 <HAL_GPIO_Init+0x14>
  }
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	372c      	adds	r7, #44	; 0x2c
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr
 8003c54:	40010400 	.word	0x40010400

08003c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	887b      	ldrh	r3, [r7, #2]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
 8003c74:	e001      	b.n	8003c7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c76:	2300      	movs	r3, #0
 8003c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr

08003c86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	807b      	strh	r3, [r7, #2]
 8003c92:	4613      	mov	r3, r2
 8003c94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c96:	787b      	ldrb	r3, [r7, #1]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c9c:	887a      	ldrh	r2, [r7, #2]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ca2:	e003      	b.n	8003cac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ca4:	887b      	ldrh	r3, [r7, #2]
 8003ca6:	041a      	lsls	r2, r3, #16
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	611a      	str	r2, [r3, #16]
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr
	...

08003cb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cc2:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d006      	beq.n	8003cdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cce:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fd ff86 	bl	8001be8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40010400 	.word	0x40010400

08003ce8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e12b      	b.n	8003f52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fe fdb8 	bl	8002884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2224      	movs	r2, #36	; 0x24
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0201 	bic.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d4c:	f001 f842 	bl	8004dd4 <HAL_RCC_GetPCLK1Freq>
 8003d50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	4a81      	ldr	r2, [pc, #516]	; (8003f5c <HAL_I2C_Init+0x274>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d807      	bhi.n	8003d6c <HAL_I2C_Init+0x84>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4a80      	ldr	r2, [pc, #512]	; (8003f60 <HAL_I2C_Init+0x278>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	bf94      	ite	ls
 8003d64:	2301      	movls	r3, #1
 8003d66:	2300      	movhi	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	e006      	b.n	8003d7a <HAL_I2C_Init+0x92>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a7d      	ldr	r2, [pc, #500]	; (8003f64 <HAL_I2C_Init+0x27c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	bf94      	ite	ls
 8003d74:	2301      	movls	r3, #1
 8003d76:	2300      	movhi	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e0e7      	b.n	8003f52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4a78      	ldr	r2, [pc, #480]	; (8003f68 <HAL_I2C_Init+0x280>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	0c9b      	lsrs	r3, r3, #18
 8003d8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4a6a      	ldr	r2, [pc, #424]	; (8003f5c <HAL_I2C_Init+0x274>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d802      	bhi.n	8003dbc <HAL_I2C_Init+0xd4>
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	3301      	adds	r3, #1
 8003dba:	e009      	b.n	8003dd0 <HAL_I2C_Init+0xe8>
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	4a69      	ldr	r2, [pc, #420]	; (8003f6c <HAL_I2C_Init+0x284>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	099b      	lsrs	r3, r3, #6
 8003dce:	3301      	adds	r3, #1
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003de2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	495c      	ldr	r1, [pc, #368]	; (8003f5c <HAL_I2C_Init+0x274>)
 8003dec:	428b      	cmp	r3, r1
 8003dee:	d819      	bhi.n	8003e24 <HAL_I2C_Init+0x13c>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1e59      	subs	r1, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dfe:	1c59      	adds	r1, r3, #1
 8003e00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e04:	400b      	ands	r3, r1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_I2C_Init+0x138>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1e59      	subs	r1, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e1e:	e051      	b.n	8003ec4 <HAL_I2C_Init+0x1dc>
 8003e20:	2304      	movs	r3, #4
 8003e22:	e04f      	b.n	8003ec4 <HAL_I2C_Init+0x1dc>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d111      	bne.n	8003e50 <HAL_I2C_Init+0x168>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1e58      	subs	r0, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	440b      	add	r3, r1
 8003e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	e012      	b.n	8003e76 <HAL_I2C_Init+0x18e>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1e58      	subs	r0, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6859      	ldr	r1, [r3, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	0099      	lsls	r1, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e66:	3301      	adds	r3, #1
 8003e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_I2C_Init+0x196>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e022      	b.n	8003ec4 <HAL_I2C_Init+0x1dc>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10e      	bne.n	8003ea4 <HAL_I2C_Init+0x1bc>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	1e58      	subs	r0, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6859      	ldr	r1, [r3, #4]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	440b      	add	r3, r1
 8003e94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e98:	3301      	adds	r3, #1
 8003e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea2:	e00f      	b.n	8003ec4 <HAL_I2C_Init+0x1dc>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1e58      	subs	r0, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6859      	ldr	r1, [r3, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	0099      	lsls	r1, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	6809      	ldr	r1, [r1, #0]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69da      	ldr	r2, [r3, #28]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ef2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6911      	ldr	r1, [r2, #16]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68d2      	ldr	r2, [r2, #12]
 8003efe:	4311      	orrs	r1, r2
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	430b      	orrs	r3, r1
 8003f06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695a      	ldr	r2, [r3, #20]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	000186a0 	.word	0x000186a0
 8003f60:	001e847f 	.word	0x001e847f
 8003f64:	003d08ff 	.word	0x003d08ff
 8003f68:	431bde83 	.word	0x431bde83
 8003f6c:	10624dd3 	.word	0x10624dd3

08003f70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	817b      	strh	r3, [r7, #10]
 8003f82:	460b      	mov	r3, r1
 8003f84:	813b      	strh	r3, [r7, #8]
 8003f86:	4613      	mov	r3, r2
 8003f88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f8a:	f7fe fef5 	bl	8002d78 <HAL_GetTick>
 8003f8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	f040 80d9 	bne.w	8004150 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	2319      	movs	r3, #25
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	496d      	ldr	r1, [pc, #436]	; (800415c <HAL_I2C_Mem_Write+0x1ec>)
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f971 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e0cc      	b.n	8004152 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_I2C_Mem_Write+0x56>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e0c5      	b.n	8004152 <HAL_I2C_Mem_Write+0x1e2>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d007      	beq.n	8003fec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ffa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2221      	movs	r2, #33	; 0x21
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2240      	movs	r2, #64	; 0x40
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a3a      	ldr	r2, [r7, #32]
 8004016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800401c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4a4d      	ldr	r2, [pc, #308]	; (8004160 <HAL_I2C_Mem_Write+0x1f0>)
 800402c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800402e:	88f8      	ldrh	r0, [r7, #6]
 8004030:	893a      	ldrh	r2, [r7, #8]
 8004032:	8979      	ldrh	r1, [r7, #10]
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	9301      	str	r3, [sp, #4]
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	4603      	mov	r3, r0
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f890 	bl	8004164 <I2C_RequestMemoryWrite>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d052      	beq.n	80040f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e081      	b.n	8004152 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 fa36 	bl	80044c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00d      	beq.n	800407a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	2b04      	cmp	r3, #4
 8004064:	d107      	bne.n	8004076 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004074:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e06b      	b.n	8004152 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	781a      	ldrb	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d11b      	bne.n	80040f0 <HAL_I2C_Mem_Write+0x180>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d017      	beq.n	80040f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	781a      	ldrb	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1aa      	bne.n	800404e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fa29 	bl	8004554 <I2C_WaitOnBTFFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00d      	beq.n	8004124 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	2b04      	cmp	r3, #4
 800410e:	d107      	bne.n	8004120 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e016      	b.n	8004152 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e000      	b.n	8004152 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004150:	2302      	movs	r3, #2
  }
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	00100002 	.word	0x00100002
 8004160:	ffff0000 	.word	0xffff0000

08004164 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	4608      	mov	r0, r1
 800416e:	4611      	mov	r1, r2
 8004170:	461a      	mov	r2, r3
 8004172:	4603      	mov	r3, r0
 8004174:	817b      	strh	r3, [r7, #10]
 8004176:	460b      	mov	r3, r1
 8004178:	813b      	strh	r3, [r7, #8]
 800417a:	4613      	mov	r3, r2
 800417c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800418c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	2200      	movs	r2, #0
 8004196:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f878 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00d      	beq.n	80041c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b4:	d103      	bne.n	80041be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e05f      	b.n	8004282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041c2:	897b      	ldrh	r3, [r7, #10]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	461a      	mov	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	6a3a      	ldr	r2, [r7, #32]
 80041d6:	492d      	ldr	r1, [pc, #180]	; (800428c <I2C_RequestMemoryWrite+0x128>)
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f8d3 	bl	8004384 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e04c      	b.n	8004282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004200:	6a39      	ldr	r1, [r7, #32]
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f95e 	bl	80044c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00d      	beq.n	800422a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	2b04      	cmp	r3, #4
 8004214:	d107      	bne.n	8004226 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004224:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e02b      	b.n	8004282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d105      	bne.n	800423c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004230:	893b      	ldrh	r3, [r7, #8]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	611a      	str	r2, [r3, #16]
 800423a:	e021      	b.n	8004280 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800423c:	893b      	ldrh	r3, [r7, #8]
 800423e:	0a1b      	lsrs	r3, r3, #8
 8004240:	b29b      	uxth	r3, r3
 8004242:	b2da      	uxtb	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800424a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424c:	6a39      	ldr	r1, [r7, #32]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f938 	bl	80044c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00d      	beq.n	8004276 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	2b04      	cmp	r3, #4
 8004260:	d107      	bne.n	8004272 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004270:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e005      	b.n	8004282 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004276:	893b      	ldrh	r3, [r7, #8]
 8004278:	b2da      	uxtb	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	00010002 	.word	0x00010002

08004290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042a0:	e048      	b.n	8004334 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d044      	beq.n	8004334 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042aa:	f7fe fd65 	bl	8002d78 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d302      	bcc.n	80042c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d139      	bne.n	8004334 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	0c1b      	lsrs	r3, r3, #16
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d10d      	bne.n	80042e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	43da      	mvns	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4013      	ands	r3, r2
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bf0c      	ite	eq
 80042dc:	2301      	moveq	r3, #1
 80042de:	2300      	movne	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	e00c      	b.n	8004300 <I2C_WaitOnFlagUntilTimeout+0x70>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	43da      	mvns	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4013      	ands	r3, r2
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bf0c      	ite	eq
 80042f8:	2301      	moveq	r3, #1
 80042fa:	2300      	movne	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	461a      	mov	r2, r3
 8004300:	79fb      	ldrb	r3, [r7, #7]
 8004302:	429a      	cmp	r2, r3
 8004304:	d116      	bne.n	8004334 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	f043 0220 	orr.w	r2, r3, #32
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e023      	b.n	800437c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	0c1b      	lsrs	r3, r3, #16
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b01      	cmp	r3, #1
 800433c:	d10d      	bne.n	800435a <I2C_WaitOnFlagUntilTimeout+0xca>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	43da      	mvns	r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4013      	ands	r3, r2
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	bf0c      	ite	eq
 8004350:	2301      	moveq	r3, #1
 8004352:	2300      	movne	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	e00c      	b.n	8004374 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	43da      	mvns	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4013      	ands	r3, r2
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	429a      	cmp	r2, r3
 8004378:	d093      	beq.n	80042a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004392:	e071      	b.n	8004478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a2:	d123      	bne.n	80043ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	f043 0204 	orr.w	r2, r3, #4
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e067      	b.n	80044bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d041      	beq.n	8004478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f4:	f7fe fcc0 	bl	8002d78 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	429a      	cmp	r2, r3
 8004402:	d302      	bcc.n	800440a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d136      	bne.n	8004478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	0c1b      	lsrs	r3, r3, #16
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b01      	cmp	r3, #1
 8004412:	d10c      	bne.n	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	43da      	mvns	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4013      	ands	r3, r2
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	bf14      	ite	ne
 8004426:	2301      	movne	r3, #1
 8004428:	2300      	moveq	r3, #0
 800442a:	b2db      	uxtb	r3, r3
 800442c:	e00b      	b.n	8004446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	43da      	mvns	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4013      	ands	r3, r2
 800443a:	b29b      	uxth	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf14      	ite	ne
 8004440:	2301      	movne	r3, #1
 8004442:	2300      	moveq	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d016      	beq.n	8004478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	f043 0220 	orr.w	r2, r3, #32
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e021      	b.n	80044bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	0c1b      	lsrs	r3, r3, #16
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	d10c      	bne.n	800449c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	43da      	mvns	r2, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4013      	ands	r3, r2
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	bf14      	ite	ne
 8004494:	2301      	movne	r3, #1
 8004496:	2300      	moveq	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	e00b      	b.n	80044b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	43da      	mvns	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4013      	ands	r3, r2
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	bf14      	ite	ne
 80044ae:	2301      	movne	r3, #1
 80044b0:	2300      	moveq	r3, #0
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f47f af6d 	bne.w	8004394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044d0:	e034      	b.n	800453c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f886 	bl	80045e4 <I2C_IsAcknowledgeFailed>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e034      	b.n	800454c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e8:	d028      	beq.n	800453c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ea:	f7fe fc45 	bl	8002d78 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d302      	bcc.n	8004500 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d11d      	bne.n	800453c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b80      	cmp	r3, #128	; 0x80
 800450c:	d016      	beq.n	800453c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	f043 0220 	orr.w	r2, r3, #32
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e007      	b.n	800454c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004546:	2b80      	cmp	r3, #128	; 0x80
 8004548:	d1c3      	bne.n	80044d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004560:	e034      	b.n	80045cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f83e 	bl	80045e4 <I2C_IsAcknowledgeFailed>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e034      	b.n	80045dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d028      	beq.n	80045cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457a:	f7fe fbfd 	bl	8002d78 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	429a      	cmp	r2, r3
 8004588:	d302      	bcc.n	8004590 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d11d      	bne.n	80045cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b04      	cmp	r3, #4
 800459c:	d016      	beq.n	80045cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	f043 0220 	orr.w	r2, r3, #32
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e007      	b.n	80045dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d1c3      	bne.n	8004562 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fa:	d11b      	bne.n	8004634 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004604:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	f043 0204 	orr.w	r2, r3, #4
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e000      	b.n	8004636 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr

08004640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e272      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 8087 	beq.w	800476e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004660:	4b92      	ldr	r3, [pc, #584]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 030c 	and.w	r3, r3, #12
 8004668:	2b04      	cmp	r3, #4
 800466a:	d00c      	beq.n	8004686 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800466c:	4b8f      	ldr	r3, [pc, #572]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 030c 	and.w	r3, r3, #12
 8004674:	2b08      	cmp	r3, #8
 8004676:	d112      	bne.n	800469e <HAL_RCC_OscConfig+0x5e>
 8004678:	4b8c      	ldr	r3, [pc, #560]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004684:	d10b      	bne.n	800469e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004686:	4b89      	ldr	r3, [pc, #548]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d06c      	beq.n	800476c <HAL_RCC_OscConfig+0x12c>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d168      	bne.n	800476c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e24c      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a6:	d106      	bne.n	80046b6 <HAL_RCC_OscConfig+0x76>
 80046a8:	4b80      	ldr	r3, [pc, #512]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a7f      	ldr	r2, [pc, #508]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	e02e      	b.n	8004714 <HAL_RCC_OscConfig+0xd4>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x98>
 80046be:	4b7b      	ldr	r3, [pc, #492]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a7a      	ldr	r2, [pc, #488]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	4b78      	ldr	r3, [pc, #480]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a77      	ldr	r2, [pc, #476]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	e01d      	b.n	8004714 <HAL_RCC_OscConfig+0xd4>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046e0:	d10c      	bne.n	80046fc <HAL_RCC_OscConfig+0xbc>
 80046e2:	4b72      	ldr	r3, [pc, #456]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a71      	ldr	r2, [pc, #452]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	4b6f      	ldr	r3, [pc, #444]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a6e      	ldr	r2, [pc, #440]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e00b      	b.n	8004714 <HAL_RCC_OscConfig+0xd4>
 80046fc:	4b6b      	ldr	r3, [pc, #428]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a6a      	ldr	r2, [pc, #424]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	4b68      	ldr	r3, [pc, #416]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a67      	ldr	r2, [pc, #412]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 800470e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004712:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d013      	beq.n	8004744 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471c:	f7fe fb2c 	bl	8002d78 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004724:	f7fe fb28 	bl	8002d78 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b64      	cmp	r3, #100	; 0x64
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e200      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004736:	4b5d      	ldr	r3, [pc, #372]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0xe4>
 8004742:	e014      	b.n	800476e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7fe fb18 	bl	8002d78 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800474c:	f7fe fb14 	bl	8002d78 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	; 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e1ec      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800475e:	4b53      	ldr	r3, [pc, #332]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x10c>
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d063      	beq.n	8004842 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800477a:	4b4c      	ldr	r3, [pc, #304]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00b      	beq.n	800479e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004786:	4b49      	ldr	r3, [pc, #292]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b08      	cmp	r3, #8
 8004790:	d11c      	bne.n	80047cc <HAL_RCC_OscConfig+0x18c>
 8004792:	4b46      	ldr	r3, [pc, #280]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d116      	bne.n	80047cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800479e:	4b43      	ldr	r3, [pc, #268]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <HAL_RCC_OscConfig+0x176>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d001      	beq.n	80047b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e1c0      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b6:	4b3d      	ldr	r3, [pc, #244]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	4939      	ldr	r1, [pc, #228]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ca:	e03a      	b.n	8004842 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d020      	beq.n	8004816 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047d4:	4b36      	ldr	r3, [pc, #216]	; (80048b0 <HAL_RCC_OscConfig+0x270>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047da:	f7fe facd 	bl	8002d78 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047e2:	f7fe fac9 	bl	8002d78 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e1a1      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f4:	4b2d      	ldr	r3, [pc, #180]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004800:	4b2a      	ldr	r3, [pc, #168]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	4927      	ldr	r1, [pc, #156]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004810:	4313      	orrs	r3, r2
 8004812:	600b      	str	r3, [r1, #0]
 8004814:	e015      	b.n	8004842 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004816:	4b26      	ldr	r3, [pc, #152]	; (80048b0 <HAL_RCC_OscConfig+0x270>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481c:	f7fe faac 	bl	8002d78 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004824:	f7fe faa8 	bl	8002d78 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e180      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004836:	4b1d      	ldr	r3, [pc, #116]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d03a      	beq.n	80048c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d019      	beq.n	800488a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004856:	4b17      	ldr	r3, [pc, #92]	; (80048b4 <HAL_RCC_OscConfig+0x274>)
 8004858:	2201      	movs	r2, #1
 800485a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800485c:	f7fe fa8c 	bl	8002d78 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004864:	f7fe fa88 	bl	8002d78 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e160      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004876:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004882:	2001      	movs	r0, #1
 8004884:	f000 face 	bl	8004e24 <RCC_Delay>
 8004888:	e01c      	b.n	80048c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <HAL_RCC_OscConfig+0x274>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004890:	f7fe fa72 	bl	8002d78 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004896:	e00f      	b.n	80048b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004898:	f7fe fa6e 	bl	8002d78 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d908      	bls.n	80048b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e146      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
 80048aa:	bf00      	nop
 80048ac:	40021000 	.word	0x40021000
 80048b0:	42420000 	.word	0x42420000
 80048b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b8:	4b92      	ldr	r3, [pc, #584]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e9      	bne.n	8004898 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 80a6 	beq.w	8004a1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d2:	2300      	movs	r3, #0
 80048d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048d6:	4b8b      	ldr	r3, [pc, #556]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10d      	bne.n	80048fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e2:	4b88      	ldr	r3, [pc, #544]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	4a87      	ldr	r2, [pc, #540]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 80048e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ec:	61d3      	str	r3, [r2, #28]
 80048ee:	4b85      	ldr	r3, [pc, #532]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f6:	60bb      	str	r3, [r7, #8]
 80048f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048fa:	2301      	movs	r3, #1
 80048fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fe:	4b82      	ldr	r3, [pc, #520]	; (8004b08 <HAL_RCC_OscConfig+0x4c8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004906:	2b00      	cmp	r3, #0
 8004908:	d118      	bne.n	800493c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800490a:	4b7f      	ldr	r3, [pc, #508]	; (8004b08 <HAL_RCC_OscConfig+0x4c8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a7e      	ldr	r2, [pc, #504]	; (8004b08 <HAL_RCC_OscConfig+0x4c8>)
 8004910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004916:	f7fe fa2f 	bl	8002d78 <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491e:	f7fe fa2b 	bl	8002d78 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b64      	cmp	r3, #100	; 0x64
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e103      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004930:	4b75      	ldr	r3, [pc, #468]	; (8004b08 <HAL_RCC_OscConfig+0x4c8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0f0      	beq.n	800491e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d106      	bne.n	8004952 <HAL_RCC_OscConfig+0x312>
 8004944:	4b6f      	ldr	r3, [pc, #444]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	4a6e      	ldr	r2, [pc, #440]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 800494a:	f043 0301 	orr.w	r3, r3, #1
 800494e:	6213      	str	r3, [r2, #32]
 8004950:	e02d      	b.n	80049ae <HAL_RCC_OscConfig+0x36e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10c      	bne.n	8004974 <HAL_RCC_OscConfig+0x334>
 800495a:	4b6a      	ldr	r3, [pc, #424]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	4a69      	ldr	r2, [pc, #420]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004960:	f023 0301 	bic.w	r3, r3, #1
 8004964:	6213      	str	r3, [r2, #32]
 8004966:	4b67      	ldr	r3, [pc, #412]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	4a66      	ldr	r2, [pc, #408]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 800496c:	f023 0304 	bic.w	r3, r3, #4
 8004970:	6213      	str	r3, [r2, #32]
 8004972:	e01c      	b.n	80049ae <HAL_RCC_OscConfig+0x36e>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	2b05      	cmp	r3, #5
 800497a:	d10c      	bne.n	8004996 <HAL_RCC_OscConfig+0x356>
 800497c:	4b61      	ldr	r3, [pc, #388]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	4a60      	ldr	r2, [pc, #384]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004982:	f043 0304 	orr.w	r3, r3, #4
 8004986:	6213      	str	r3, [r2, #32]
 8004988:	4b5e      	ldr	r3, [pc, #376]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	4a5d      	ldr	r2, [pc, #372]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	6213      	str	r3, [r2, #32]
 8004994:	e00b      	b.n	80049ae <HAL_RCC_OscConfig+0x36e>
 8004996:	4b5b      	ldr	r3, [pc, #364]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	4a5a      	ldr	r2, [pc, #360]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 800499c:	f023 0301 	bic.w	r3, r3, #1
 80049a0:	6213      	str	r3, [r2, #32]
 80049a2:	4b58      	ldr	r3, [pc, #352]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	4a57      	ldr	r2, [pc, #348]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 80049a8:	f023 0304 	bic.w	r3, r3, #4
 80049ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d015      	beq.n	80049e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b6:	f7fe f9df 	bl	8002d78 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049bc:	e00a      	b.n	80049d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049be:	f7fe f9db 	bl	8002d78 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e0b1      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d4:	4b4b      	ldr	r3, [pc, #300]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0ee      	beq.n	80049be <HAL_RCC_OscConfig+0x37e>
 80049e0:	e014      	b.n	8004a0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e2:	f7fe f9c9 	bl	8002d78 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e8:	e00a      	b.n	8004a00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ea:	f7fe f9c5 	bl	8002d78 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e09b      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a00:	4b40      	ldr	r3, [pc, #256]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1ee      	bne.n	80049ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a0c:	7dfb      	ldrb	r3, [r7, #23]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d105      	bne.n	8004a1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a12:	4b3c      	ldr	r3, [pc, #240]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	4a3b      	ldr	r2, [pc, #236]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 8087 	beq.w	8004b36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a28:	4b36      	ldr	r3, [pc, #216]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f003 030c 	and.w	r3, r3, #12
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d061      	beq.n	8004af8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d146      	bne.n	8004aca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3c:	4b33      	ldr	r3, [pc, #204]	; (8004b0c <HAL_RCC_OscConfig+0x4cc>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a42:	f7fe f999 	bl	8002d78 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4a:	f7fe f995 	bl	8002d78 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e06d      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a5c:	4b29      	ldr	r3, [pc, #164]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f0      	bne.n	8004a4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a70:	d108      	bne.n	8004a84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a72:	4b24      	ldr	r3, [pc, #144]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	4921      	ldr	r1, [pc, #132]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a84:	4b1f      	ldr	r3, [pc, #124]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a19      	ldr	r1, [r3, #32]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	430b      	orrs	r3, r1
 8004a96:	491b      	ldr	r1, [pc, #108]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a9c:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <HAL_RCC_OscConfig+0x4cc>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa2:	f7fe f969 	bl	8002d78 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aaa:	f7fe f965 	bl	8002d78 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e03d      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004abc:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0f0      	beq.n	8004aaa <HAL_RCC_OscConfig+0x46a>
 8004ac8:	e035      	b.n	8004b36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aca:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <HAL_RCC_OscConfig+0x4cc>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad0:	f7fe f952 	bl	8002d78 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad8:	f7fe f94e 	bl	8002d78 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e026      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x498>
 8004af6:	e01e      	b.n	8004b36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d107      	bne.n	8004b10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e019      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
 8004b04:	40021000 	.word	0x40021000
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <HAL_RCC_OscConfig+0x500>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d106      	bne.n	8004b32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d001      	beq.n	8004b36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40021000 	.word	0x40021000

08004b44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0d0      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b58:	4b6a      	ldr	r3, [pc, #424]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d910      	bls.n	8004b88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b66:	4b67      	ldr	r3, [pc, #412]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f023 0207 	bic.w	r2, r3, #7
 8004b6e:	4965      	ldr	r1, [pc, #404]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b76:	4b63      	ldr	r3, [pc, #396]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d001      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0b8      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d020      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ba0:	4b59      	ldr	r3, [pc, #356]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	4a58      	ldr	r2, [pc, #352]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004baa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bb8:	4b53      	ldr	r3, [pc, #332]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	4a52      	ldr	r2, [pc, #328]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004bc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc4:	4b50      	ldr	r3, [pc, #320]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	494d      	ldr	r1, [pc, #308]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d040      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d107      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bea:	4b47      	ldr	r3, [pc, #284]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d115      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e07f      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d107      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c02:	4b41      	ldr	r3, [pc, #260]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e073      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c12:	4b3d      	ldr	r3, [pc, #244]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e06b      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c22:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f023 0203 	bic.w	r2, r3, #3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	4936      	ldr	r1, [pc, #216]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c34:	f7fe f8a0 	bl	8002d78 <HAL_GetTick>
 8004c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3a:	e00a      	b.n	8004c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c3c:	f7fe f89c 	bl	8002d78 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e053      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c52:	4b2d      	ldr	r3, [pc, #180]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f003 020c 	and.w	r2, r3, #12
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d1eb      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c64:	4b27      	ldr	r3, [pc, #156]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d210      	bcs.n	8004c94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c72:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f023 0207 	bic.w	r2, r3, #7
 8004c7a:	4922      	ldr	r1, [pc, #136]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c82:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e032      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ca0:	4b19      	ldr	r3, [pc, #100]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4916      	ldr	r1, [pc, #88]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cbe:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	490e      	ldr	r1, [pc, #56]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cd2:	f000 f821 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	490a      	ldr	r1, [pc, #40]	; (8004d0c <HAL_RCC_ClockConfig+0x1c8>)
 8004ce4:	5ccb      	ldrb	r3, [r1, r3]
 8004ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cea:	4a09      	ldr	r2, [pc, #36]	; (8004d10 <HAL_RCC_ClockConfig+0x1cc>)
 8004cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cee:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <HAL_RCC_ClockConfig+0x1d0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fd fffe 	bl	8002cf4 <HAL_InitTick>

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40022000 	.word	0x40022000
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	0800b46c 	.word	0x0800b46c
 8004d10:	200002e8 	.word	0x200002e8
 8004d14:	200002ec 	.word	0x200002ec

08004d18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	2300      	movs	r3, #0
 8004d24:	60bb      	str	r3, [r7, #8]
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d32:	4b1e      	ldr	r3, [pc, #120]	; (8004dac <HAL_RCC_GetSysClockFreq+0x94>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 030c 	and.w	r3, r3, #12
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d002      	beq.n	8004d48 <HAL_RCC_GetSysClockFreq+0x30>
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d003      	beq.n	8004d4e <HAL_RCC_GetSysClockFreq+0x36>
 8004d46:	e027      	b.n	8004d98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d48:	4b19      	ldr	r3, [pc, #100]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d4a:	613b      	str	r3, [r7, #16]
      break;
 8004d4c:	e027      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	0c9b      	lsrs	r3, r3, #18
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	4a17      	ldr	r2, [pc, #92]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d58:	5cd3      	ldrb	r3, [r2, r3]
 8004d5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d010      	beq.n	8004d88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d66:	4b11      	ldr	r3, [pc, #68]	; (8004dac <HAL_RCC_GetSysClockFreq+0x94>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	0c5b      	lsrs	r3, r3, #17
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	4a11      	ldr	r2, [pc, #68]	; (8004db8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d72:	5cd3      	ldrb	r3, [r2, r3]
 8004d74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a0d      	ldr	r2, [pc, #52]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d7a:	fb03 f202 	mul.w	r2, r3, r2
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	e004      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a0c      	ldr	r2, [pc, #48]	; (8004dbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d8c:	fb02 f303 	mul.w	r3, r2, r3
 8004d90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	613b      	str	r3, [r7, #16]
      break;
 8004d96:	e002      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d9a:	613b      	str	r3, [r7, #16]
      break;
 8004d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d9e:	693b      	ldr	r3, [r7, #16]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000
 8004db0:	007a1200 	.word	0x007a1200
 8004db4:	0800b484 	.word	0x0800b484
 8004db8:	0800b494 	.word	0x0800b494
 8004dbc:	003d0900 	.word	0x003d0900

08004dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dc4:	4b02      	ldr	r3, [pc, #8]	; (8004dd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr
 8004dd0:	200002e8 	.word	0x200002e8

08004dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dd8:	f7ff fff2 	bl	8004dc0 <HAL_RCC_GetHCLKFreq>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	0a1b      	lsrs	r3, r3, #8
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	4903      	ldr	r1, [pc, #12]	; (8004df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dea:	5ccb      	ldrb	r3, [r1, r3]
 8004dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40021000 	.word	0x40021000
 8004df8:	0800b47c 	.word	0x0800b47c

08004dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e00:	f7ff ffde 	bl	8004dc0 <HAL_RCC_GetHCLKFreq>
 8004e04:	4602      	mov	r2, r0
 8004e06:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	0adb      	lsrs	r3, r3, #11
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	4903      	ldr	r1, [pc, #12]	; (8004e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e12:	5ccb      	ldrb	r3, [r1, r3]
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	0800b47c 	.word	0x0800b47c

08004e24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <RCC_Delay+0x34>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <RCC_Delay+0x38>)
 8004e32:	fba2 2303 	umull	r2, r3, r2, r3
 8004e36:	0a5b      	lsrs	r3, r3, #9
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	fb02 f303 	mul.w	r3, r2, r3
 8004e3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e40:	bf00      	nop
  }
  while (Delay --);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1e5a      	subs	r2, r3, #1
 8004e46:	60fa      	str	r2, [r7, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1f9      	bne.n	8004e40 <RCC_Delay+0x1c>
}
 8004e4c:	bf00      	nop
 8004e4e:	bf00      	nop
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr
 8004e58:	200002e8 	.word	0x200002e8
 8004e5c:	10624dd3 	.word	0x10624dd3

08004e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	613b      	str	r3, [r7, #16]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d07d      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e80:	4b4f      	ldr	r3, [pc, #316]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10d      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e8c:	4b4c      	ldr	r3, [pc, #304]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	4a4b      	ldr	r2, [pc, #300]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e96:	61d3      	str	r3, [r2, #28]
 8004e98:	4b49      	ldr	r3, [pc, #292]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea8:	4b46      	ldr	r3, [pc, #280]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d118      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eb4:	4b43      	ldr	r3, [pc, #268]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a42      	ldr	r2, [pc, #264]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ebe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ec0:	f7fd ff5a 	bl	8002d78 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec6:	e008      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec8:	f7fd ff56 	bl	8002d78 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	; 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e06d      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eda:	4b3a      	ldr	r3, [pc, #232]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ee6:	4b36      	ldr	r3, [pc, #216]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d02e      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d027      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f04:	4b2e      	ldr	r3, [pc, #184]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f0e:	4b2e      	ldr	r3, [pc, #184]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f14:	4b2c      	ldr	r3, [pc, #176]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f1a:	4a29      	ldr	r2, [pc, #164]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d014      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2a:	f7fd ff25 	bl	8002d78 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f30:	e00a      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f32:	f7fd ff21 	bl	8002d78 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e036      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f48:	4b1d      	ldr	r3, [pc, #116]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0ee      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f54:	4b1a      	ldr	r3, [pc, #104]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	4917      	ldr	r1, [pc, #92]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f66:	7dfb      	ldrb	r3, [r7, #23]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d105      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f6c:	4b14      	ldr	r3, [pc, #80]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	4a13      	ldr	r2, [pc, #76]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d008      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f84:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	490b      	ldr	r1, [pc, #44]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d008      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fa2:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	4904      	ldr	r1, [pc, #16]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	40007000 	.word	0x40007000
 8004fc8:	42420440 	.word	0x42420440

08004fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e041      	b.n	8005062 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fd fc84 	bl	8002900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3304      	adds	r3, #4
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f000 fa74 	bl	80054f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	d001      	beq.n	8005084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e03a      	b.n	80050fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a18      	ldr	r2, [pc, #96]	; (8005104 <HAL_TIM_Base_Start_IT+0x98>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00e      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x58>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ae:	d009      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x58>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a14      	ldr	r2, [pc, #80]	; (8005108 <HAL_TIM_Base_Start_IT+0x9c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x58>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a13      	ldr	r2, [pc, #76]	; (800510c <HAL_TIM_Base_Start_IT+0xa0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d111      	bne.n	80050e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b06      	cmp	r3, #6
 80050d4:	d010      	beq.n	80050f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0201 	orr.w	r2, r2, #1
 80050e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e6:	e007      	b.n	80050f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr
 8005104:	40012c00 	.word	0x40012c00
 8005108:	40000400 	.word	0x40000400
 800510c:	40000800 	.word	0x40000800

08005110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b02      	cmp	r3, #2
 8005124:	d122      	bne.n	800516c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b02      	cmp	r3, #2
 8005132:	d11b      	bne.n	800516c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0202 	mvn.w	r2, #2
 800513c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f9b4 	bl	80054c0 <HAL_TIM_IC_CaptureCallback>
 8005158:	e005      	b.n	8005166 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f9a7 	bl	80054ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f9b6 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b04      	cmp	r3, #4
 8005178:	d122      	bne.n	80051c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b04      	cmp	r3, #4
 8005186:	d11b      	bne.n	80051c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0204 	mvn.w	r2, #4
 8005190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2202      	movs	r2, #2
 8005196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f98a 	bl	80054c0 <HAL_TIM_IC_CaptureCallback>
 80051ac:	e005      	b.n	80051ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f97d 	bl	80054ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f98c 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d122      	bne.n	8005214 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d11b      	bne.n	8005214 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0208 	mvn.w	r2, #8
 80051e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2204      	movs	r2, #4
 80051ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f960 	bl	80054c0 <HAL_TIM_IC_CaptureCallback>
 8005200:	e005      	b.n	800520e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f953 	bl	80054ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f962 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	2b10      	cmp	r3, #16
 8005220:	d122      	bne.n	8005268 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0310 	and.w	r3, r3, #16
 800522c:	2b10      	cmp	r3, #16
 800522e:	d11b      	bne.n	8005268 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0210 	mvn.w	r2, #16
 8005238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2208      	movs	r2, #8
 800523e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f936 	bl	80054c0 <HAL_TIM_IC_CaptureCallback>
 8005254:	e005      	b.n	8005262 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f929 	bl	80054ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f938 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b01      	cmp	r3, #1
 8005274:	d10e      	bne.n	8005294 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b01      	cmp	r3, #1
 8005282:	d107      	bne.n	8005294 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0201 	mvn.w	r2, #1
 800528c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fc fc5a 	bl	8001b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529e:	2b80      	cmp	r3, #128	; 0x80
 80052a0:	d10e      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ac:	2b80      	cmp	r3, #128	; 0x80
 80052ae:	d107      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fa7b 	bl	80057b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b40      	cmp	r3, #64	; 0x40
 80052cc:	d10e      	bne.n	80052ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b40      	cmp	r3, #64	; 0x40
 80052da:	d107      	bne.n	80052ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f8fc 	bl	80054e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d10e      	bne.n	8005318 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b20      	cmp	r3, #32
 8005306:	d107      	bne.n	8005318 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0220 	mvn.w	r2, #32
 8005310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fa46 	bl	80057a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005318:	bf00      	nop
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_TIM_ConfigClockSource+0x1c>
 8005338:	2302      	movs	r3, #2
 800533a:	e0b4      	b.n	80054a6 <HAL_TIM_ConfigClockSource+0x186>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800535a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005362:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005374:	d03e      	beq.n	80053f4 <HAL_TIM_ConfigClockSource+0xd4>
 8005376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800537a:	f200 8087 	bhi.w	800548c <HAL_TIM_ConfigClockSource+0x16c>
 800537e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005382:	f000 8086 	beq.w	8005492 <HAL_TIM_ConfigClockSource+0x172>
 8005386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800538a:	d87f      	bhi.n	800548c <HAL_TIM_ConfigClockSource+0x16c>
 800538c:	2b70      	cmp	r3, #112	; 0x70
 800538e:	d01a      	beq.n	80053c6 <HAL_TIM_ConfigClockSource+0xa6>
 8005390:	2b70      	cmp	r3, #112	; 0x70
 8005392:	d87b      	bhi.n	800548c <HAL_TIM_ConfigClockSource+0x16c>
 8005394:	2b60      	cmp	r3, #96	; 0x60
 8005396:	d050      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x11a>
 8005398:	2b60      	cmp	r3, #96	; 0x60
 800539a:	d877      	bhi.n	800548c <HAL_TIM_ConfigClockSource+0x16c>
 800539c:	2b50      	cmp	r3, #80	; 0x50
 800539e:	d03c      	beq.n	800541a <HAL_TIM_ConfigClockSource+0xfa>
 80053a0:	2b50      	cmp	r3, #80	; 0x50
 80053a2:	d873      	bhi.n	800548c <HAL_TIM_ConfigClockSource+0x16c>
 80053a4:	2b40      	cmp	r3, #64	; 0x40
 80053a6:	d058      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x13a>
 80053a8:	2b40      	cmp	r3, #64	; 0x40
 80053aa:	d86f      	bhi.n	800548c <HAL_TIM_ConfigClockSource+0x16c>
 80053ac:	2b30      	cmp	r3, #48	; 0x30
 80053ae:	d064      	beq.n	800547a <HAL_TIM_ConfigClockSource+0x15a>
 80053b0:	2b30      	cmp	r3, #48	; 0x30
 80053b2:	d86b      	bhi.n	800548c <HAL_TIM_ConfigClockSource+0x16c>
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	d060      	beq.n	800547a <HAL_TIM_ConfigClockSource+0x15a>
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	d867      	bhi.n	800548c <HAL_TIM_ConfigClockSource+0x16c>
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d05c      	beq.n	800547a <HAL_TIM_ConfigClockSource+0x15a>
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d05a      	beq.n	800547a <HAL_TIM_ConfigClockSource+0x15a>
 80053c4:	e062      	b.n	800548c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053d6:	f000 f968 	bl	80056aa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	609a      	str	r2, [r3, #8]
      break;
 80053f2:	e04f      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005404:	f000 f951 	bl	80056aa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005416:	609a      	str	r2, [r3, #8]
      break;
 8005418:	e03c      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005426:	461a      	mov	r2, r3
 8005428:	f000 f8c8 	bl	80055bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2150      	movs	r1, #80	; 0x50
 8005432:	4618      	mov	r0, r3
 8005434:	f000 f91f 	bl	8005676 <TIM_ITRx_SetConfig>
      break;
 8005438:	e02c      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005446:	461a      	mov	r2, r3
 8005448:	f000 f8e6 	bl	8005618 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2160      	movs	r1, #96	; 0x60
 8005452:	4618      	mov	r0, r3
 8005454:	f000 f90f 	bl	8005676 <TIM_ITRx_SetConfig>
      break;
 8005458:	e01c      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005466:	461a      	mov	r2, r3
 8005468:	f000 f8a8 	bl	80055bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2140      	movs	r1, #64	; 0x40
 8005472:	4618      	mov	r0, r3
 8005474:	f000 f8ff 	bl	8005676 <TIM_ITRx_SetConfig>
      break;
 8005478:	e00c      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4619      	mov	r1, r3
 8005484:	4610      	mov	r0, r2
 8005486:	f000 f8f6 	bl	8005676 <TIM_ITRx_SetConfig>
      break;
 800548a:	e003      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	73fb      	strb	r3, [r7, #15]
      break;
 8005490:	e000      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005492:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr

080054c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc80      	pop	{r7}
 80054d0:	4770      	bx	lr

080054d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bc80      	pop	{r7}
 80054f4:	4770      	bx	lr
	...

080054f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a29      	ldr	r2, [pc, #164]	; (80055b0 <TIM_Base_SetConfig+0xb8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00b      	beq.n	8005528 <TIM_Base_SetConfig+0x30>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005516:	d007      	beq.n	8005528 <TIM_Base_SetConfig+0x30>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a26      	ldr	r2, [pc, #152]	; (80055b4 <TIM_Base_SetConfig+0xbc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d003      	beq.n	8005528 <TIM_Base_SetConfig+0x30>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a25      	ldr	r2, [pc, #148]	; (80055b8 <TIM_Base_SetConfig+0xc0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d108      	bne.n	800553a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a1c      	ldr	r2, [pc, #112]	; (80055b0 <TIM_Base_SetConfig+0xb8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00b      	beq.n	800555a <TIM_Base_SetConfig+0x62>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005548:	d007      	beq.n	800555a <TIM_Base_SetConfig+0x62>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a19      	ldr	r2, [pc, #100]	; (80055b4 <TIM_Base_SetConfig+0xbc>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d003      	beq.n	800555a <TIM_Base_SetConfig+0x62>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <TIM_Base_SetConfig+0xc0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d108      	bne.n	800556c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a07      	ldr	r2, [pc, #28]	; (80055b0 <TIM_Base_SetConfig+0xb8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d103      	bne.n	80055a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	615a      	str	r2, [r3, #20]
}
 80055a6:	bf00      	nop
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr
 80055b0:	40012c00 	.word	0x40012c00
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40000800 	.word	0x40000800

080055bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f023 0201 	bic.w	r2, r3, #1
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f023 030a 	bic.w	r3, r3, #10
 80055f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	621a      	str	r2, [r3, #32]
}
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f023 0210 	bic.w	r2, r3, #16
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	031b      	lsls	r3, r3, #12
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005654:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	621a      	str	r2, [r3, #32]
}
 800566c:	bf00      	nop
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr

08005676 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005676:	b480      	push	{r7}
 8005678:	b085      	sub	sp, #20
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	f043 0307 	orr.w	r3, r3, #7
 8005698:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	609a      	str	r2, [r3, #8]
}
 80056a0:	bf00      	nop
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr

080056aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b087      	sub	sp, #28
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
 80056b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	021a      	lsls	r2, r3, #8
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	431a      	orrs	r2, r3
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	609a      	str	r2, [r3, #8]
}
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e046      	b.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a16      	ldr	r2, [pc, #88]	; (8005798 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00e      	beq.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574c:	d009      	beq.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a12      	ldr	r2, [pc, #72]	; (800579c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d004      	beq.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a10      	ldr	r2, [pc, #64]	; (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d10c      	bne.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005768:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	4313      	orrs	r3, r2
 8005772:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr
 8005798:	40012c00 	.word	0x40012c00
 800579c:	40000400 	.word	0x40000400
 80057a0:	40000800 	.word	0x40000800

080057a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc80      	pop	{r7}
 80057b4:	4770      	bx	lr

080057b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr

080057c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e042      	b.n	8005860 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fd f8c6 	bl	8002980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2224      	movs	r2, #36	; 0x24
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800580a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fdcd 	bl	80063ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005820:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695a      	ldr	r2, [r3, #20]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005830:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005840:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08a      	sub	sp, #40	; 0x28
 800586c:	af02      	add	r7, sp, #8
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	603b      	str	r3, [r7, #0]
 8005874:	4613      	mov	r3, r2
 8005876:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b20      	cmp	r3, #32
 8005886:	d16d      	bne.n	8005964 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <HAL_UART_Transmit+0x2c>
 800588e:	88fb      	ldrh	r3, [r7, #6]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e066      	b.n	8005966 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2221      	movs	r2, #33	; 0x21
 80058a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058a6:	f7fd fa67 	bl	8002d78 <HAL_GetTick>
 80058aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	88fa      	ldrh	r2, [r7, #6]
 80058b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	88fa      	ldrh	r2, [r7, #6]
 80058b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c0:	d108      	bne.n	80058d4 <HAL_UART_Transmit+0x6c>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d104      	bne.n	80058d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	e003      	b.n	80058dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058dc:	e02a      	b.n	8005934 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2200      	movs	r2, #0
 80058e6:	2180      	movs	r1, #128	; 0x80
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 fb1d 	bl	8005f28 <UART_WaitOnFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e036      	b.n	8005966 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10b      	bne.n	8005916 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800590c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	3302      	adds	r3, #2
 8005912:	61bb      	str	r3, [r7, #24]
 8005914:	e007      	b.n	8005926 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	781a      	ldrb	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	3301      	adds	r3, #1
 8005924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1cf      	bne.n	80058de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2200      	movs	r2, #0
 8005946:	2140      	movs	r1, #64	; 0x40
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 faed 	bl	8005f28 <UART_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e006      	b.n	8005966 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	e000      	b.n	8005966 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005964:	2302      	movs	r3, #2
  }
}
 8005966:	4618      	mov	r0, r3
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	4613      	mov	r3, r2
 800597a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b20      	cmp	r3, #32
 8005986:	d112      	bne.n	80059ae <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_UART_Receive_IT+0x26>
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e00b      	b.n	80059b0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800599e:	88fb      	ldrh	r3, [r7, #6]
 80059a0:	461a      	mov	r2, r3
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 fb2d 	bl	8006004 <UART_Start_Receive_IT>
 80059aa:	4603      	mov	r3, r0
 80059ac:	e000      	b.n	80059b0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80059ae:	2302      	movs	r3, #2
  }
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b0ba      	sub	sp, #232	; 0xe8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80059de:	2300      	movs	r3, #0
 80059e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10f      	bne.n	8005a1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d009      	beq.n	8005a1e <HAL_UART_IRQHandler+0x66>
 8005a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fc0a 	bl	8006230 <UART_Receive_IT>
      return;
 8005a1c:	e25b      	b.n	8005ed6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 80de 	beq.w	8005be4 <HAL_UART_IRQHandler+0x22c>
 8005a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d106      	bne.n	8005a42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 80d1 	beq.w	8005be4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <HAL_UART_IRQHandler+0xae>
 8005a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	f043 0201 	orr.w	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00b      	beq.n	8005a8a <HAL_UART_IRQHandler+0xd2>
 8005a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	f043 0202 	orr.w	r2, r3, #2
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00b      	beq.n	8005aae <HAL_UART_IRQHandler+0xf6>
 8005a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa6:	f043 0204 	orr.w	r2, r3, #4
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d011      	beq.n	8005ade <HAL_UART_IRQHandler+0x126>
 8005aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005abe:	f003 0320 	and.w	r3, r3, #32
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d105      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d005      	beq.n	8005ade <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	f043 0208 	orr.w	r2, r3, #8
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 81f2 	beq.w	8005ecc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aec:	f003 0320 	and.w	r3, r3, #32
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_UART_IRQHandler+0x14e>
 8005af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fb95 	bl	8006230 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	bf14      	ite	ne
 8005b14:	2301      	movne	r3, #1
 8005b16:	2300      	moveq	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d103      	bne.n	8005b32 <HAL_UART_IRQHandler+0x17a>
 8005b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d04f      	beq.n	8005bd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fa9f 	bl	8006076 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d041      	beq.n	8005bca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3314      	adds	r3, #20
 8005b4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3314      	adds	r3, #20
 8005b6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b82:	e841 2300 	strex	r3, r2, [r1]
 8005b86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1d9      	bne.n	8005b46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d013      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9e:	4a7e      	ldr	r2, [pc, #504]	; (8005d98 <HAL_UART_IRQHandler+0x3e0>)
 8005ba0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fd fe5a 	bl	8003860 <HAL_DMA_Abort_IT>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d016      	beq.n	8005be0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc0:	e00e      	b.n	8005be0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f99c 	bl	8005f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc8:	e00a      	b.n	8005be0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f998 	bl	8005f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd0:	e006      	b.n	8005be0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f994 	bl	8005f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005bde:	e175      	b.n	8005ecc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be0:	bf00      	nop
    return;
 8005be2:	e173      	b.n	8005ecc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	f040 814f 	bne.w	8005e8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf2:	f003 0310 	and.w	r3, r3, #16
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 8148 	beq.w	8005e8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8141 	beq.w	8005e8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60bb      	str	r3, [r7, #8]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	60bb      	str	r3, [r7, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	60bb      	str	r3, [r7, #8]
 8005c1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 80b6 	beq.w	8005d9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 8145 	beq.w	8005ed0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	f080 813e 	bcs.w	8005ed0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	f000 8088 	beq.w	8005d78 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	330c      	adds	r3, #12
 8005c6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c76:	e853 3f00 	ldrex	r3, [r3]
 8005c7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	330c      	adds	r3, #12
 8005c90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c94:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ca0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1d9      	bne.n	8005c68 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3314      	adds	r3, #20
 8005cba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005cc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3314      	adds	r3, #20
 8005cd4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cd8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005cdc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ce0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005cea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e1      	bne.n	8005cb4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3314      	adds	r3, #20
 8005cf6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cfa:	e853 3f00 	ldrex	r3, [r3]
 8005cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3314      	adds	r3, #20
 8005d10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d14:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e3      	bne.n	8005cf0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	330c      	adds	r3, #12
 8005d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d48:	f023 0310 	bic.w	r3, r3, #16
 8005d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	330c      	adds	r3, #12
 8005d56:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d5c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e3      	bne.n	8005d36 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fd fd39 	bl	80037ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f8bf 	bl	8005f12 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d94:	e09c      	b.n	8005ed0 <HAL_UART_IRQHandler+0x518>
 8005d96:	bf00      	nop
 8005d98:	0800613b 	.word	0x0800613b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 808e 	beq.w	8005ed4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005db8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 8089 	beq.w	8005ed4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	330c      	adds	r3, #12
 8005dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	330c      	adds	r3, #12
 8005de2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005de6:	647a      	str	r2, [r7, #68]	; 0x44
 8005de8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e3      	bne.n	8005dc2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3314      	adds	r3, #20
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	623b      	str	r3, [r7, #32]
   return(result);
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	f023 0301 	bic.w	r3, r3, #1
 8005e10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3314      	adds	r3, #20
 8005e1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e1e:	633a      	str	r2, [r7, #48]	; 0x30
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1e3      	bne.n	8005dfa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	330c      	adds	r3, #12
 8005e46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0310 	bic.w	r3, r3, #16
 8005e56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	330c      	adds	r3, #12
 8005e60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e64:	61fa      	str	r2, [r7, #28]
 8005e66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	69b9      	ldr	r1, [r7, #24]
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	e841 2300 	strex	r3, r2, [r1]
 8005e70:	617b      	str	r3, [r7, #20]
   return(result);
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1e3      	bne.n	8005e40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f844 	bl	8005f12 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e8a:	e023      	b.n	8005ed4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d009      	beq.n	8005eac <HAL_UART_IRQHandler+0x4f4>
 8005e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f95c 	bl	8006162 <UART_Transmit_IT>
    return;
 8005eaa:	e014      	b.n	8005ed6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00e      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x51e>
 8005eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d008      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f99b 	bl	8006200 <UART_EndTransmit_IT>
    return;
 8005eca:	e004      	b.n	8005ed6 <HAL_UART_IRQHandler+0x51e>
    return;
 8005ecc:	bf00      	nop
 8005ece:	e002      	b.n	8005ed6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005ed0:	bf00      	nop
 8005ed2:	e000      	b.n	8005ed6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005ed4:	bf00      	nop
  }
}
 8005ed6:	37e8      	adds	r7, #232	; 0xe8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bc80      	pop	{r7}
 8005eec:	4770      	bx	lr

08005eee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bc80      	pop	{r7}
 8005efe:	4770      	bx	lr

08005f00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr

08005f12 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr

08005f28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b090      	sub	sp, #64	; 0x40
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	4613      	mov	r3, r2
 8005f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f38:	e050      	b.n	8005fdc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f40:	d04c      	beq.n	8005fdc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d007      	beq.n	8005f58 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f48:	f7fc ff16 	bl	8002d78 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d241      	bcs.n	8005fdc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f62:	e853 3f00 	ldrex	r3, [r3]
 8005f66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	330c      	adds	r3, #12
 8005f76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f78:	637a      	str	r2, [r7, #52]	; 0x34
 8005f7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f80:	e841 2300 	strex	r3, r2, [r1]
 8005f84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1e5      	bne.n	8005f58 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3314      	adds	r3, #20
 8005f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	e853 3f00 	ldrex	r3, [r3]
 8005f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f023 0301 	bic.w	r3, r3, #1
 8005fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	3314      	adds	r3, #20
 8005faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fac:	623a      	str	r2, [r7, #32]
 8005fae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	69f9      	ldr	r1, [r7, #28]
 8005fb2:	6a3a      	ldr	r2, [r7, #32]
 8005fb4:	e841 2300 	strex	r3, r2, [r1]
 8005fb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e5      	bne.n	8005f8c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e00f      	b.n	8005ffc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	bf0c      	ite	eq
 8005fec:	2301      	moveq	r3, #1
 8005fee:	2300      	movne	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	79fb      	ldrb	r3, [r7, #7]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d09f      	beq.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3740      	adds	r7, #64	; 0x40
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	4613      	mov	r3, r2
 8006010:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	88fa      	ldrh	r2, [r7, #6]
 800601c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	88fa      	ldrh	r2, [r7, #6]
 8006022:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2222      	movs	r2, #34	; 0x22
 800602e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d007      	beq.n	800604a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006048:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	695a      	ldr	r2, [r3, #20]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f042 0201 	orr.w	r2, r2, #1
 8006058:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f042 0220 	orr.w	r2, r2, #32
 8006068:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	bc80      	pop	{r7}
 8006074:	4770      	bx	lr

08006076 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006076:	b480      	push	{r7}
 8006078:	b095      	sub	sp, #84	; 0x54
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	330c      	adds	r3, #12
 8006084:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006094:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	330c      	adds	r3, #12
 800609c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800609e:	643a      	str	r2, [r7, #64]	; 0x40
 80060a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1e5      	bne.n	800607e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3314      	adds	r3, #20
 80060b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	f023 0301 	bic.w	r3, r3, #1
 80060c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3314      	adds	r3, #20
 80060d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e5      	bne.n	80060b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d119      	bne.n	8006122 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	330c      	adds	r3, #12
 80060f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f023 0310 	bic.w	r3, r3, #16
 8006104:	647b      	str	r3, [r7, #68]	; 0x44
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	330c      	adds	r3, #12
 800610c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800610e:	61ba      	str	r2, [r7, #24]
 8006110:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	6979      	ldr	r1, [r7, #20]
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	613b      	str	r3, [r7, #16]
   return(result);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e5      	bne.n	80060ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2220      	movs	r2, #32
 8006126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006130:	bf00      	nop
 8006132:	3754      	adds	r7, #84	; 0x54
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr

0800613a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b084      	sub	sp, #16
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7ff fed3 	bl	8005f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800615a:	bf00      	nop
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b21      	cmp	r3, #33	; 0x21
 8006174:	d13e      	bne.n	80061f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800617e:	d114      	bne.n	80061aa <UART_Transmit_IT+0x48>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d110      	bne.n	80061aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800619c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	1c9a      	adds	r2, r3, #2
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	621a      	str	r2, [r3, #32]
 80061a8:	e008      	b.n	80061bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	1c59      	adds	r1, r3, #1
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6211      	str	r1, [r2, #32]
 80061b4:	781a      	ldrb	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	4619      	mov	r1, r3
 80061ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10f      	bne.n	80061f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	e000      	b.n	80061f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061f4:	2302      	movs	r3, #2
  }
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr

08006200 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006216:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff fe5b 	bl	8005edc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08c      	sub	sp, #48	; 0x30
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b22      	cmp	r3, #34	; 0x22
 8006242:	f040 80ae 	bne.w	80063a2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624e:	d117      	bne.n	8006280 <UART_Receive_IT+0x50>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d113      	bne.n	8006280 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006258:	2300      	movs	r3, #0
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006260:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	b29b      	uxth	r3, r3
 800626a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626e:	b29a      	uxth	r2, r3
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006278:	1c9a      	adds	r2, r3, #2
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	629a      	str	r2, [r3, #40]	; 0x28
 800627e:	e026      	b.n	80062ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006284:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006292:	d007      	beq.n	80062a4 <UART_Receive_IT+0x74>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <UART_Receive_IT+0x82>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d106      	bne.n	80062b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	e008      	b.n	80062c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	4619      	mov	r1, r3
 80062dc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d15d      	bne.n	800639e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0220 	bic.w	r2, r2, #32
 80062f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006300:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	695a      	ldr	r2, [r3, #20]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0201 	bic.w	r2, r2, #1
 8006310:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2220      	movs	r2, #32
 8006316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	2b01      	cmp	r3, #1
 8006326:	d135      	bne.n	8006394 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	330c      	adds	r3, #12
 8006334:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	613b      	str	r3, [r7, #16]
   return(result);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f023 0310 	bic.w	r3, r3, #16
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	330c      	adds	r3, #12
 800634c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634e:	623a      	str	r2, [r7, #32]
 8006350:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	69f9      	ldr	r1, [r7, #28]
 8006354:	6a3a      	ldr	r2, [r7, #32]
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	61bb      	str	r3, [r7, #24]
   return(result);
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e5      	bne.n	800632e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0310 	and.w	r3, r3, #16
 800636c:	2b10      	cmp	r3, #16
 800636e:	d10a      	bne.n	8006386 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006370:	2300      	movs	r3, #0
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800638a:	4619      	mov	r1, r3
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff fdc0 	bl	8005f12 <HAL_UARTEx_RxEventCallback>
 8006392:	e002      	b.n	800639a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff fdaa 	bl	8005eee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	e002      	b.n	80063a4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	e000      	b.n	80063a4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80063a2:	2302      	movs	r3, #2
  }
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3730      	adds	r7, #48	; 0x30
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80063e6:	f023 030c 	bic.w	r3, r3, #12
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	6812      	ldr	r2, [r2, #0]
 80063ee:	68b9      	ldr	r1, [r7, #8]
 80063f0:	430b      	orrs	r3, r1
 80063f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a2c      	ldr	r2, [pc, #176]	; (80064c0 <UART_SetConfig+0x114>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d103      	bne.n	800641c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006414:	f7fe fcf2 	bl	8004dfc <HAL_RCC_GetPCLK2Freq>
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	e002      	b.n	8006422 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800641c:	f7fe fcda 	bl	8004dd4 <HAL_RCC_GetPCLK1Freq>
 8006420:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	009a      	lsls	r2, r3, #2
 800642c:	441a      	add	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	fbb2 f3f3 	udiv	r3, r2, r3
 8006438:	4a22      	ldr	r2, [pc, #136]	; (80064c4 <UART_SetConfig+0x118>)
 800643a:	fba2 2303 	umull	r2, r3, r2, r3
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	0119      	lsls	r1, r3, #4
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	009a      	lsls	r2, r3, #2
 800644c:	441a      	add	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	fbb2 f2f3 	udiv	r2, r2, r3
 8006458:	4b1a      	ldr	r3, [pc, #104]	; (80064c4 <UART_SetConfig+0x118>)
 800645a:	fba3 0302 	umull	r0, r3, r3, r2
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	2064      	movs	r0, #100	; 0x64
 8006462:	fb00 f303 	mul.w	r3, r0, r3
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	011b      	lsls	r3, r3, #4
 800646a:	3332      	adds	r3, #50	; 0x32
 800646c:	4a15      	ldr	r2, [pc, #84]	; (80064c4 <UART_SetConfig+0x118>)
 800646e:	fba2 2303 	umull	r2, r3, r2, r3
 8006472:	095b      	lsrs	r3, r3, #5
 8006474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006478:	4419      	add	r1, r3
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	009a      	lsls	r2, r3, #2
 8006484:	441a      	add	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006490:	4b0c      	ldr	r3, [pc, #48]	; (80064c4 <UART_SetConfig+0x118>)
 8006492:	fba3 0302 	umull	r0, r3, r3, r2
 8006496:	095b      	lsrs	r3, r3, #5
 8006498:	2064      	movs	r0, #100	; 0x64
 800649a:	fb00 f303 	mul.w	r3, r0, r3
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	011b      	lsls	r3, r3, #4
 80064a2:	3332      	adds	r3, #50	; 0x32
 80064a4:	4a07      	ldr	r2, [pc, #28]	; (80064c4 <UART_SetConfig+0x118>)
 80064a6:	fba2 2303 	umull	r2, r3, r2, r3
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	f003 020f 	and.w	r2, r3, #15
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	440a      	add	r2, r1
 80064b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80064b8:	bf00      	nop
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	40013800 	.word	0x40013800
 80064c4:	51eb851f 	.word	0x51eb851f

080064c8 <ssd1306_Reset>:
#include <string.h>  // For memcpy


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void){
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80064cc:	bf00      	nop
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr

080064d4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af04      	add	r7, sp, #16
 80064da:	4603      	mov	r3, r0
 80064dc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80064de:	f04f 33ff 	mov.w	r3, #4294967295
 80064e2:	9302      	str	r3, [sp, #8]
 80064e4:	2301      	movs	r3, #1
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	1dfb      	adds	r3, r7, #7
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	2301      	movs	r3, #1
 80064ee:	2200      	movs	r2, #0
 80064f0:	2178      	movs	r1, #120	; 0x78
 80064f2:	4803      	ldr	r0, [pc, #12]	; (8006500 <ssd1306_WriteCommand+0x2c>)
 80064f4:	f7fd fd3c 	bl	8003f70 <HAL_I2C_Mem_Write>
}
 80064f8:	bf00      	nop
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	2000137c 	.word	0x2000137c

08006504 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af04      	add	r7, sp, #16
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f04f 32ff 	mov.w	r2, #4294967295
 8006516:	9202      	str	r2, [sp, #8]
 8006518:	9301      	str	r3, [sp, #4]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	2301      	movs	r3, #1
 8006520:	2240      	movs	r2, #64	; 0x40
 8006522:	2178      	movs	r1, #120	; 0x78
 8006524:	4803      	ldr	r0, [pc, #12]	; (8006534 <ssd1306_WriteData+0x30>)
 8006526:	f7fd fd23 	bl	8003f70 <HAL_I2C_Mem_Write>
}
 800652a:	bf00      	nop
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	2000137c 	.word	0x2000137c

08006538 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800653c:	f7ff ffc4 	bl	80064c8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8006540:	2064      	movs	r0, #100	; 0x64
 8006542:	f7fc fc23 	bl	8002d8c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8006546:	2000      	movs	r0, #0
 8006548:	f000 fac6 	bl	8006ad8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800654c:	2020      	movs	r0, #32
 800654e:	f7ff ffc1 	bl	80064d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8006552:	2000      	movs	r0, #0
 8006554:	f7ff ffbe 	bl	80064d4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006558:	20b0      	movs	r0, #176	; 0xb0
 800655a:	f7ff ffbb 	bl	80064d4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800655e:	20c8      	movs	r0, #200	; 0xc8
 8006560:	f7ff ffb8 	bl	80064d4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8006564:	2000      	movs	r0, #0
 8006566:	f7ff ffb5 	bl	80064d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800656a:	2010      	movs	r0, #16
 800656c:	f7ff ffb2 	bl	80064d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8006570:	2040      	movs	r0, #64	; 0x40
 8006572:	f7ff ffaf 	bl	80064d4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8006576:	20ff      	movs	r0, #255	; 0xff
 8006578:	f000 fa9b 	bl	8006ab2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800657c:	20a1      	movs	r0, #161	; 0xa1
 800657e:	f7ff ffa9 	bl	80064d4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8006582:	20a6      	movs	r0, #166	; 0xa6
 8006584:	f7ff ffa6 	bl	80064d4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8006588:	20a8      	movs	r0, #168	; 0xa8
 800658a:	f7ff ffa3 	bl	80064d4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800658e:	203f      	movs	r0, #63	; 0x3f
 8006590:	f7ff ffa0 	bl	80064d4 <ssd1306_WriteCommand>
#elif (SSD1306_HEIGHT == 128)
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006594:	20a4      	movs	r0, #164	; 0xa4
 8006596:	f7ff ff9d 	bl	80064d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800659a:	20d3      	movs	r0, #211	; 0xd3
 800659c:	f7ff ff9a 	bl	80064d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80065a0:	2000      	movs	r0, #0
 80065a2:	f7ff ff97 	bl	80064d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80065a6:	20d5      	movs	r0, #213	; 0xd5
 80065a8:	f7ff ff94 	bl	80064d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80065ac:	20f0      	movs	r0, #240	; 0xf0
 80065ae:	f7ff ff91 	bl	80064d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80065b2:	20d9      	movs	r0, #217	; 0xd9
 80065b4:	f7ff ff8e 	bl	80064d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80065b8:	2022      	movs	r0, #34	; 0x22
 80065ba:	f7ff ff8b 	bl	80064d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80065be:	20da      	movs	r0, #218	; 0xda
 80065c0:	f7ff ff88 	bl	80064d4 <ssd1306_WriteCommand>

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80065c4:	2012      	movs	r0, #18
 80065c6:	f7ff ff85 	bl	80064d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80065ca:	20db      	movs	r0, #219	; 0xdb
 80065cc:	f7ff ff82 	bl	80064d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80065d0:	2020      	movs	r0, #32
 80065d2:	f7ff ff7f 	bl	80064d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80065d6:	208d      	movs	r0, #141	; 0x8d
 80065d8:	f7ff ff7c 	bl	80064d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80065dc:	2014      	movs	r0, #20
 80065de:	f7ff ff79 	bl	80064d4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80065e2:	2001      	movs	r0, #1
 80065e4:	f000 fa78 	bl	8006ad8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80065e8:	2000      	movs	r0, #0
 80065ea:	f000 f80f 	bl	800660c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80065ee:	f000 f825 	bl	800663c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80065f2:	4b05      	ldr	r3, [pc, #20]	; (8006608 <ssd1306_Init+0xd0>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80065f8:	4b03      	ldr	r3, [pc, #12]	; (8006608 <ssd1306_Init+0xd0>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80065fe:	4b02      	ldr	r3, [pc, #8]	; (8006608 <ssd1306_Init+0xd0>)
 8006600:	2201      	movs	r2, #1
 8006602:	711a      	strb	r2, [r3, #4]
}
 8006604:	bf00      	nop
 8006606:	bd80      	pop	{r7, pc}
 8006608:	200018b4 	.word	0x200018b4

0800660c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	4603      	mov	r3, r0
 8006614:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8006616:	79fb      	ldrb	r3, [r7, #7]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <ssd1306_Fill+0x14>
 800661c:	2300      	movs	r3, #0
 800661e:	e000      	b.n	8006622 <ssd1306_Fill+0x16>
 8006620:	23ff      	movs	r3, #255	; 0xff
 8006622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006626:	4619      	mov	r1, r3
 8006628:	4803      	ldr	r0, [pc, #12]	; (8006638 <ssd1306_Fill+0x2c>)
 800662a:	f000 ff4e 	bl	80074ca <memset>
}
 800662e:	bf00      	nop
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	200014b4 	.word	0x200014b4

0800663c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006642:	2300      	movs	r3, #0
 8006644:	71fb      	strb	r3, [r7, #7]
 8006646:	e016      	b.n	8006676 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	3b50      	subs	r3, #80	; 0x50
 800664c:	b2db      	uxtb	r3, r3
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff ff40 	bl	80064d4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8006654:	2000      	movs	r0, #0
 8006656:	f7ff ff3d 	bl	80064d4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800665a:	2010      	movs	r0, #16
 800665c:	f7ff ff3a 	bl	80064d4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8006660:	79fb      	ldrb	r3, [r7, #7]
 8006662:	01db      	lsls	r3, r3, #7
 8006664:	4a08      	ldr	r2, [pc, #32]	; (8006688 <ssd1306_UpdateScreen+0x4c>)
 8006666:	4413      	add	r3, r2
 8006668:	2180      	movs	r1, #128	; 0x80
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff ff4a 	bl	8006504 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	3301      	adds	r3, #1
 8006674:	71fb      	strb	r3, [r7, #7]
 8006676:	79fb      	ldrb	r3, [r7, #7]
 8006678:	2b07      	cmp	r3, #7
 800667a:	d9e5      	bls.n	8006648 <ssd1306_UpdateScreen+0xc>
    }
}
 800667c:	bf00      	nop
 800667e:	bf00      	nop
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	200014b4 	.word	0x200014b4

0800668c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	4603      	mov	r3, r0
 8006694:	71fb      	strb	r3, [r7, #7]
 8006696:	460b      	mov	r3, r1
 8006698:	71bb      	strb	r3, [r7, #6]
 800669a:	4613      	mov	r3, r2
 800669c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800669e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	db3d      	blt.n	8006722 <ssd1306_DrawPixel+0x96>
 80066a6:	79bb      	ldrb	r3, [r7, #6]
 80066a8:	2b3f      	cmp	r3, #63	; 0x3f
 80066aa:	d83a      	bhi.n	8006722 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 80066ac:	797b      	ldrb	r3, [r7, #5]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d11a      	bne.n	80066e8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80066b2:	79fa      	ldrb	r2, [r7, #7]
 80066b4:	79bb      	ldrb	r3, [r7, #6]
 80066b6:	08db      	lsrs	r3, r3, #3
 80066b8:	b2d8      	uxtb	r0, r3
 80066ba:	4603      	mov	r3, r0
 80066bc:	01db      	lsls	r3, r3, #7
 80066be:	4413      	add	r3, r2
 80066c0:	4a1a      	ldr	r2, [pc, #104]	; (800672c <ssd1306_DrawPixel+0xa0>)
 80066c2:	5cd3      	ldrb	r3, [r2, r3]
 80066c4:	b25a      	sxtb	r2, r3
 80066c6:	79bb      	ldrb	r3, [r7, #6]
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	2101      	movs	r1, #1
 80066ce:	fa01 f303 	lsl.w	r3, r1, r3
 80066d2:	b25b      	sxtb	r3, r3
 80066d4:	4313      	orrs	r3, r2
 80066d6:	b259      	sxtb	r1, r3
 80066d8:	79fa      	ldrb	r2, [r7, #7]
 80066da:	4603      	mov	r3, r0
 80066dc:	01db      	lsls	r3, r3, #7
 80066de:	4413      	add	r3, r2
 80066e0:	b2c9      	uxtb	r1, r1
 80066e2:	4a12      	ldr	r2, [pc, #72]	; (800672c <ssd1306_DrawPixel+0xa0>)
 80066e4:	54d1      	strb	r1, [r2, r3]
 80066e6:	e01d      	b.n	8006724 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80066e8:	79fa      	ldrb	r2, [r7, #7]
 80066ea:	79bb      	ldrb	r3, [r7, #6]
 80066ec:	08db      	lsrs	r3, r3, #3
 80066ee:	b2d8      	uxtb	r0, r3
 80066f0:	4603      	mov	r3, r0
 80066f2:	01db      	lsls	r3, r3, #7
 80066f4:	4413      	add	r3, r2
 80066f6:	4a0d      	ldr	r2, [pc, #52]	; (800672c <ssd1306_DrawPixel+0xa0>)
 80066f8:	5cd3      	ldrb	r3, [r2, r3]
 80066fa:	b25a      	sxtb	r2, r3
 80066fc:	79bb      	ldrb	r3, [r7, #6]
 80066fe:	f003 0307 	and.w	r3, r3, #7
 8006702:	2101      	movs	r1, #1
 8006704:	fa01 f303 	lsl.w	r3, r1, r3
 8006708:	b25b      	sxtb	r3, r3
 800670a:	43db      	mvns	r3, r3
 800670c:	b25b      	sxtb	r3, r3
 800670e:	4013      	ands	r3, r2
 8006710:	b259      	sxtb	r1, r3
 8006712:	79fa      	ldrb	r2, [r7, #7]
 8006714:	4603      	mov	r3, r0
 8006716:	01db      	lsls	r3, r3, #7
 8006718:	4413      	add	r3, r2
 800671a:	b2c9      	uxtb	r1, r1
 800671c:	4a03      	ldr	r2, [pc, #12]	; (800672c <ssd1306_DrawPixel+0xa0>)
 800671e:	54d1      	strb	r1, [r2, r3]
 8006720:	e000      	b.n	8006724 <ssd1306_DrawPixel+0x98>
        return;
 8006722:	bf00      	nop
    }
}
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	bc80      	pop	{r7}
 800672a:	4770      	bx	lr
 800672c:	200014b4 	.word	0x200014b4

08006730 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char  ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color){
 8006730:	b590      	push	{r4, r7, lr}
 8006732:	b089      	sub	sp, #36	; 0x24
 8006734:	af00      	add	r7, sp, #0
 8006736:	4604      	mov	r4, r0
 8006738:	4638      	mov	r0, r7
 800673a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800673e:	4623      	mov	r3, r4
 8006740:	73fb      	strb	r3, [r7, #15]
	 uint32_t i, b, j;

	 // Check if character is valid
	 if (ch < 32 || ch > 126)
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	2b1f      	cmp	r3, #31
 8006746:	d902      	bls.n	800674e <ssd1306_WriteChar+0x1e>
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b7e      	cmp	r3, #126	; 0x7e
 800674c:	d901      	bls.n	8006752 <ssd1306_WriteChar+0x22>
	        return 0;
 800674e:	2300      	movs	r3, #0
 8006750:	e079      	b.n	8006846 <ssd1306_WriteChar+0x116>

	 // Check remaining space on current line
	 if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8006752:	4b3f      	ldr	r3, [pc, #252]	; (8006850 <ssd1306_WriteChar+0x120>)
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	783b      	ldrb	r3, [r7, #0]
 800675a:	4413      	add	r3, r2
 800675c:	2b80      	cmp	r3, #128	; 0x80
 800675e:	dc06      	bgt.n	800676e <ssd1306_WriteChar+0x3e>
	       SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8006760:	4b3b      	ldr	r3, [pc, #236]	; (8006850 <ssd1306_WriteChar+0x120>)
 8006762:	885b      	ldrh	r3, [r3, #2]
 8006764:	461a      	mov	r2, r3
 8006766:	787b      	ldrb	r3, [r7, #1]
 8006768:	4413      	add	r3, r2
	 if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800676a:	2b40      	cmp	r3, #64	; 0x40
 800676c:	dd01      	ble.n	8006772 <ssd1306_WriteChar+0x42>
	 {
	       // Not enough space on current line
	       return 0;
 800676e:	2300      	movs	r3, #0
 8006770:	e069      	b.n	8006846 <ssd1306_WriteChar+0x116>
	 }

	 //Use front to write
	 for(i=0;i<Font.height;i++){
 8006772:	2300      	movs	r3, #0
 8006774:	61fb      	str	r3, [r7, #28]
 8006776:	e04e      	b.n	8006816 <ssd1306_WriteChar+0xe6>
		 b = Font.data[(ch-32)*Font.height+i];
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	3b20      	subs	r3, #32
 800677e:	7879      	ldrb	r1, [r7, #1]
 8006780:	fb01 f303 	mul.w	r3, r1, r3
 8006784:	4619      	mov	r1, r3
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	440b      	add	r3, r1
 800678a:	005b      	lsls	r3, r3, #1
 800678c:	4413      	add	r3, r2
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	617b      	str	r3, [r7, #20]
		 for(j=0;j<Font.width;j++){
 8006792:	2300      	movs	r3, #0
 8006794:	61bb      	str	r3, [r7, #24]
 8006796:	e036      	b.n	8006806 <ssd1306_WriteChar+0xd6>
			 if((b<<j) & 0x8000){
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	fa02 f303 	lsl.w	r3, r2, r3
 80067a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d013      	beq.n	80067d0 <ssd1306_WriteChar+0xa0>
				 ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80067a8:	4b29      	ldr	r3, [pc, #164]	; (8006850 <ssd1306_WriteChar+0x120>)
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	4413      	add	r3, r2
 80067b4:	b2d8      	uxtb	r0, r3
 80067b6:	4b26      	ldr	r3, [pc, #152]	; (8006850 <ssd1306_WriteChar+0x120>)
 80067b8:	885b      	ldrh	r3, [r3, #2]
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	4413      	add	r3, r2
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80067c8:	4619      	mov	r1, r3
 80067ca:	f7ff ff5f 	bl	800668c <ssd1306_DrawPixel>
 80067ce:	e017      	b.n	8006800 <ssd1306_WriteChar+0xd0>
			 }else{
				 ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80067d0:	4b1f      	ldr	r3, [pc, #124]	; (8006850 <ssd1306_WriteChar+0x120>)
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	4413      	add	r3, r2
 80067dc:	b2d8      	uxtb	r0, r3
 80067de:	4b1c      	ldr	r3, [pc, #112]	; (8006850 <ssd1306_WriteChar+0x120>)
 80067e0:	885b      	ldrh	r3, [r3, #2]
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	4413      	add	r3, r2
 80067ea:	b2d9      	uxtb	r1, r3
 80067ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bf0c      	ite	eq
 80067f4:	2301      	moveq	r3, #1
 80067f6:	2300      	movne	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	461a      	mov	r2, r3
 80067fc:	f7ff ff46 	bl	800668c <ssd1306_DrawPixel>
		 for(j=0;j<Font.width;j++){
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	3301      	adds	r3, #1
 8006804:	61bb      	str	r3, [r7, #24]
 8006806:	783b      	ldrb	r3, [r7, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	4293      	cmp	r3, r2
 800680e:	d3c3      	bcc.n	8006798 <ssd1306_WriteChar+0x68>
	 for(i=0;i<Font.height;i++){
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	3301      	adds	r3, #1
 8006814:	61fb      	str	r3, [r7, #28]
 8006816:	787b      	ldrb	r3, [r7, #1]
 8006818:	461a      	mov	r2, r3
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	4293      	cmp	r3, r2
 800681e:	d3ab      	bcc.n	8006778 <ssd1306_WriteChar+0x48>
			 }
		 }
	 }

	 // The current space is now taken
	 SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8006820:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <ssd1306_WriteChar+0x120>)
 8006822:	881a      	ldrh	r2, [r3, #0]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d006      	beq.n	8006838 <ssd1306_WriteChar+0x108>
 800682a:	68b9      	ldr	r1, [r7, #8]
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	3b20      	subs	r3, #32
 8006830:	440b      	add	r3, r1
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	b29b      	uxth	r3, r3
 8006836:	e001      	b.n	800683c <ssd1306_WriteChar+0x10c>
 8006838:	783b      	ldrb	r3, [r7, #0]
 800683a:	b29b      	uxth	r3, r3
 800683c:	4413      	add	r3, r2
 800683e:	b29a      	uxth	r2, r3
 8006840:	4b03      	ldr	r3, [pc, #12]	; (8006850 <ssd1306_WriteChar+0x120>)
 8006842:	801a      	strh	r2, [r3, #0]

	 // Return written char for validation
	 return ch;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3724      	adds	r7, #36	; 0x24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd90      	pop	{r4, r7, pc}
 800684e:	bf00      	nop
 8006850:	200018b4 	.word	0x200018b4

08006854 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af02      	add	r7, sp, #8
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	4638      	mov	r0, r7
 800685e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8006862:	e013      	b.n	800688c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	7818      	ldrb	r0, [r3, #0]
 8006868:	7e3b      	ldrb	r3, [r7, #24]
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	463b      	mov	r3, r7
 800686e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006870:	f7ff ff5e 	bl	8006730 <ssd1306_WriteChar>
 8006874:	4603      	mov	r3, r0
 8006876:	461a      	mov	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	429a      	cmp	r2, r3
 800687e:	d002      	beq.n	8006886 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	e008      	b.n	8006898 <ssd1306_WriteString+0x44>
        }
        str++;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3301      	adds	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e7      	bne.n	8006864 <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	781b      	ldrb	r3, [r3, #0]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	4603      	mov	r3, r0
 80068a8:	460a      	mov	r2, r1
 80068aa:	71fb      	strb	r3, [r7, #7]
 80068ac:	4613      	mov	r3, r2
 80068ae:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80068b0:	79fb      	ldrb	r3, [r7, #7]
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	4b05      	ldr	r3, [pc, #20]	; (80068cc <ssd1306_SetCursor+0x2c>)
 80068b6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80068b8:	79bb      	ldrb	r3, [r7, #6]
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	4b03      	ldr	r3, [pc, #12]	; (80068cc <ssd1306_SetCursor+0x2c>)
 80068be:	805a      	strh	r2, [r3, #2]
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bc80      	pop	{r7}
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	200018b4 	.word	0x200018b4

080068d0 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80068d0:	b590      	push	{r4, r7, lr}
 80068d2:	b089      	sub	sp, #36	; 0x24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	4604      	mov	r4, r0
 80068d8:	4608      	mov	r0, r1
 80068da:	4611      	mov	r1, r2
 80068dc:	461a      	mov	r2, r3
 80068de:	4623      	mov	r3, r4
 80068e0:	71fb      	strb	r3, [r7, #7]
 80068e2:	4603      	mov	r3, r0
 80068e4:	71bb      	strb	r3, [r7, #6]
 80068e6:	460b      	mov	r3, r1
 80068e8:	717b      	strb	r3, [r7, #5]
 80068ea:	4613      	mov	r3, r2
 80068ec:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80068ee:	797a      	ldrb	r2, [r7, #5]
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	bfb8      	it	lt
 80068f8:	425b      	neglt	r3, r3
 80068fa:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80068fc:	793a      	ldrb	r2, [r7, #4]
 80068fe:	79bb      	ldrb	r3, [r7, #6]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	bfb8      	it	lt
 8006906:	425b      	neglt	r3, r3
 8006908:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800690a:	79fa      	ldrb	r2, [r7, #7]
 800690c:	797b      	ldrb	r3, [r7, #5]
 800690e:	429a      	cmp	r2, r3
 8006910:	d201      	bcs.n	8006916 <ssd1306_Line+0x46>
 8006912:	2301      	movs	r3, #1
 8006914:	e001      	b.n	800691a <ssd1306_Line+0x4a>
 8006916:	f04f 33ff 	mov.w	r3, #4294967295
 800691a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800691c:	79ba      	ldrb	r2, [r7, #6]
 800691e:	793b      	ldrb	r3, [r7, #4]
 8006920:	429a      	cmp	r2, r3
 8006922:	d201      	bcs.n	8006928 <ssd1306_Line+0x58>
 8006924:	2301      	movs	r3, #1
 8006926:	e001      	b.n	800692c <ssd1306_Line+0x5c>
 8006928:	f04f 33ff 	mov.w	r3, #4294967295
 800692c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	61fb      	str	r3, [r7, #28]
    int32_t error2;  // the error accumulated during the increment

    ssd1306_DrawPixel(x2, y2, color);
 8006936:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800693a:	7939      	ldrb	r1, [r7, #4]
 800693c:	797b      	ldrb	r3, [r7, #5]
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff fea4 	bl	800668c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8006944:	e024      	b.n	8006990 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8006946:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800694a:	79b9      	ldrb	r1, [r7, #6]
 800694c:	79fb      	ldrb	r3, [r7, #7]
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff fe9c 	bl	800668c <ssd1306_DrawPixel>
        error2 = error * 2;
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	425b      	negs	r3, r3
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	429a      	cmp	r2, r3
 8006962:	dd08      	ble.n	8006976 <ssd1306_Line+0xa6>
            error -= deltaY;
 8006964:	69fa      	ldr	r2, [r7, #28]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	b2da      	uxtb	r2, r3
 8006970:	79fb      	ldrb	r3, [r7, #7]
 8006972:	4413      	add	r3, r2
 8006974:	71fb      	strb	r3, [r7, #7]
        }

        if(error2 < deltaX) {
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	429a      	cmp	r2, r3
 800697c:	da08      	bge.n	8006990 <ssd1306_Line+0xc0>
            error += deltaX;
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	4413      	add	r3, r2
 8006984:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	b2da      	uxtb	r2, r3
 800698a:	79bb      	ldrb	r3, [r7, #6]
 800698c:	4413      	add	r3, r2
 800698e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8006990:	79fa      	ldrb	r2, [r7, #7]
 8006992:	797b      	ldrb	r3, [r7, #5]
 8006994:	429a      	cmp	r2, r3
 8006996:	d1d6      	bne.n	8006946 <ssd1306_Line+0x76>
 8006998:	79ba      	ldrb	r2, [r7, #6]
 800699a:	793b      	ldrb	r3, [r7, #4]
 800699c:	429a      	cmp	r2, r3
 800699e:	d1d2      	bne.n	8006946 <ssd1306_Line+0x76>
        }
    }
    return;
 80069a0:	bf00      	nop
}
 80069a2:	3724      	adds	r7, #36	; 0x24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd90      	pop	{r4, r7, pc}

080069a8 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80069a8:	b590      	push	{r4, r7, lr}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	4604      	mov	r4, r0
 80069b0:	4608      	mov	r0, r1
 80069b2:	4611      	mov	r1, r2
 80069b4:	461a      	mov	r2, r3
 80069b6:	4623      	mov	r3, r4
 80069b8:	71fb      	strb	r3, [r7, #7]
 80069ba:	4603      	mov	r3, r0
 80069bc:	71bb      	strb	r3, [r7, #6]
 80069be:	460b      	mov	r3, r1
 80069c0:	717b      	strb	r3, [r7, #5]
 80069c2:	4613      	mov	r3, r2
 80069c4:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80069c6:	79bc      	ldrb	r4, [r7, #6]
 80069c8:	797a      	ldrb	r2, [r7, #5]
 80069ca:	79b9      	ldrb	r1, [r7, #6]
 80069cc:	79f8      	ldrb	r0, [r7, #7]
 80069ce:	7e3b      	ldrb	r3, [r7, #24]
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	4623      	mov	r3, r4
 80069d4:	f7ff ff7c 	bl	80068d0 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80069d8:	793c      	ldrb	r4, [r7, #4]
 80069da:	797a      	ldrb	r2, [r7, #5]
 80069dc:	79b9      	ldrb	r1, [r7, #6]
 80069de:	7978      	ldrb	r0, [r7, #5]
 80069e0:	7e3b      	ldrb	r3, [r7, #24]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	4623      	mov	r3, r4
 80069e6:	f7ff ff73 	bl	80068d0 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80069ea:	793c      	ldrb	r4, [r7, #4]
 80069ec:	79fa      	ldrb	r2, [r7, #7]
 80069ee:	7939      	ldrb	r1, [r7, #4]
 80069f0:	7978      	ldrb	r0, [r7, #5]
 80069f2:	7e3b      	ldrb	r3, [r7, #24]
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	4623      	mov	r3, r4
 80069f8:	f7ff ff6a 	bl	80068d0 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80069fc:	79bc      	ldrb	r4, [r7, #6]
 80069fe:	79fa      	ldrb	r2, [r7, #7]
 8006a00:	7939      	ldrb	r1, [r7, #4]
 8006a02:	79f8      	ldrb	r0, [r7, #7]
 8006a04:	7e3b      	ldrb	r3, [r7, #24]
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	4623      	mov	r3, r4
 8006a0a:	f7ff ff61 	bl	80068d0 <ssd1306_Line>

    return;
 8006a0e:	bf00      	nop
}
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd90      	pop	{r4, r7, pc}

08006a16 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8006a16:	b590      	push	{r4, r7, lr}
 8006a18:	b085      	sub	sp, #20
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	4608      	mov	r0, r1
 8006a20:	4611      	mov	r1, r2
 8006a22:	461a      	mov	r2, r3
 8006a24:	4623      	mov	r3, r4
 8006a26:	71fb      	strb	r3, [r7, #7]
 8006a28:	4603      	mov	r3, r0
 8006a2a:	71bb      	strb	r3, [r7, #6]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	717b      	strb	r3, [r7, #5]
 8006a30:	4613      	mov	r3, r2
 8006a32:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8006a34:	79fa      	ldrb	r2, [r7, #7]
 8006a36:	797b      	ldrb	r3, [r7, #5]
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	bf28      	it	cs
 8006a3c:	4613      	movcs	r3, r2
 8006a3e:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8006a40:	797a      	ldrb	r2, [r7, #5]
 8006a42:	79fb      	ldrb	r3, [r7, #7]
 8006a44:	4293      	cmp	r3, r2
 8006a46:	bf38      	it	cc
 8006a48:	4613      	movcc	r3, r2
 8006a4a:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8006a4c:	79ba      	ldrb	r2, [r7, #6]
 8006a4e:	793b      	ldrb	r3, [r7, #4]
 8006a50:	4293      	cmp	r3, r2
 8006a52:	bf28      	it	cs
 8006a54:	4613      	movcs	r3, r2
 8006a56:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8006a58:	793a      	ldrb	r2, [r7, #4]
 8006a5a:	79bb      	ldrb	r3, [r7, #6]
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	bf38      	it	cc
 8006a60:	4613      	movcc	r3, r2
 8006a62:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8006a64:	7afb      	ldrb	r3, [r7, #11]
 8006a66:	73fb      	strb	r3, [r7, #15]
 8006a68:	e017      	b.n	8006a9a <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8006a6a:	7b7b      	ldrb	r3, [r7, #13]
 8006a6c:	73bb      	strb	r3, [r7, #14]
 8006a6e:	e009      	b.n	8006a84 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8006a70:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006a74:	7bf9      	ldrb	r1, [r7, #15]
 8006a76:	7bbb      	ldrb	r3, [r7, #14]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7ff fe07 	bl	800668c <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8006a7e:	7bbb      	ldrb	r3, [r7, #14]
 8006a80:	3301      	adds	r3, #1
 8006a82:	73bb      	strb	r3, [r7, #14]
 8006a84:	7bba      	ldrb	r2, [r7, #14]
 8006a86:	7b3b      	ldrb	r3, [r7, #12]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d803      	bhi.n	8006a94 <ssd1306_FillRectangle+0x7e>
 8006a8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	daed      	bge.n	8006a70 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	3301      	adds	r3, #1
 8006a98:	73fb      	strb	r3, [r7, #15]
 8006a9a:	7bfa      	ldrb	r2, [r7, #15]
 8006a9c:	7abb      	ldrb	r3, [r7, #10]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d803      	bhi.n	8006aaa <ssd1306_FillRectangle+0x94>
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	2b3f      	cmp	r3, #63	; 0x3f
 8006aa6:	d9e0      	bls.n	8006a6a <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
}
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd90      	pop	{r4, r7, pc}

08006ab2 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b084      	sub	sp, #16
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	4603      	mov	r3, r0
 8006aba:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8006abc:	2381      	movs	r3, #129	; 0x81
 8006abe:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7ff fd06 	bl	80064d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7ff fd02 	bl	80064d4 <ssd1306_WriteCommand>
}
 8006ad0:	bf00      	nop
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	4603      	mov	r3, r0
 8006ae0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8006ae8:	23af      	movs	r3, #175	; 0xaf
 8006aea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8006aec:	4b08      	ldr	r3, [pc, #32]	; (8006b10 <ssd1306_SetDisplayOn+0x38>)
 8006aee:	2201      	movs	r2, #1
 8006af0:	715a      	strb	r2, [r3, #5]
 8006af2:	e004      	b.n	8006afe <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8006af4:	23ae      	movs	r3, #174	; 0xae
 8006af6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8006af8:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <ssd1306_SetDisplayOn+0x38>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff fce7 	bl	80064d4 <ssd1306_WriteCommand>
}
 8006b06:	bf00      	nop
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	200018b4 	.word	0x200018b4

08006b14 <ssd1306_InitializeDevice>:
//     ssd1306_WriteString("Device", Font_7x10, White);
//	 ssd1306_UpdateScreen();
//
//}

void ssd1306_InitializeDevice(){
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af02      	add	r7, sp, #8
	ssd1306_Init();
 8006b1a:	f7ff fd0d 	bl	8006538 <ssd1306_Init>
	ssd1306_Fill(Black);
 8006b1e:	2000      	movs	r0, #0
 8006b20:	f7ff fd74 	bl	800660c <ssd1306_Fill>
	ssd1306_SetCursor(2,2);
 8006b24:	2102      	movs	r1, #2
 8006b26:	2002      	movs	r0, #2
 8006b28:	f7ff feba 	bl	80068a0 <ssd1306_SetCursor>
	ssd1306_WriteString("Loading...", Font_7x10, White);
 8006b2c:	4b15      	ldr	r3, [pc, #84]	; (8006b84 <ssd1306_InitializeDevice+0x70>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	9200      	str	r2, [sp, #0]
 8006b32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b34:	4814      	ldr	r0, [pc, #80]	; (8006b88 <ssd1306_InitializeDevice+0x74>)
 8006b36:	f7ff fe8d 	bl	8006854 <ssd1306_WriteString>
	ssd1306_SetCursor(2,14);
 8006b3a:	210e      	movs	r1, #14
 8006b3c:	2002      	movs	r0, #2
 8006b3e:	f7ff feaf 	bl	80068a0 <ssd1306_SetCursor>
	ssd1306_WriteString("Initilized Device", Font_7x10, White);
 8006b42:	4b10      	ldr	r3, [pc, #64]	; (8006b84 <ssd1306_InitializeDevice+0x70>)
 8006b44:	2201      	movs	r2, #1
 8006b46:	9200      	str	r2, [sp, #0]
 8006b48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b4a:	4810      	ldr	r0, [pc, #64]	; (8006b8c <ssd1306_InitializeDevice+0x78>)
 8006b4c:	f7ff fe82 	bl	8006854 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8006b50:	f7ff fd74 	bl	800663c <ssd1306_UpdateScreen>

	// Simulate loading process
	for (uint8_t i = 0; i <= 100; i++) {
 8006b54:	2300      	movs	r3, #0
 8006b56:	71fb      	strb	r3, [r7, #7]
 8006b58:	e009      	b.n	8006b6e <ssd1306_InitializeDevice+0x5a>
	        showProgress(i);
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 f817 	bl	8006b90 <showProgress>
	        HAL_Delay(100);
 8006b62:	2064      	movs	r0, #100	; 0x64
 8006b64:	f7fc f912 	bl	8002d8c <HAL_Delay>
	for (uint8_t i = 0; i <= 100; i++) {
 8006b68:	79fb      	ldrb	r3, [r7, #7]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	71fb      	strb	r3, [r7, #7]
 8006b6e:	79fb      	ldrb	r3, [r7, #7]
 8006b70:	2b64      	cmp	r3, #100	; 0x64
 8006b72:	d9f2      	bls.n	8006b5a <ssd1306_InitializeDevice+0x46>
	}
	HAL_Delay(1000);
 8006b74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b78:	f7fc f908 	bl	8002d8c <HAL_Delay>
}
 8006b7c:	bf00      	nop
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	0800c960 	.word	0x0800c960
 8006b88:	0800b430 	.word	0x0800b430
 8006b8c:	0800b43c 	.word	0x0800b43c

08006b90 <showProgress>:

void showProgress(uint8_t progress)
{
 8006b90:	b590      	push	{r4, r7, lr}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af02      	add	r7, sp, #8
 8006b96:	4603      	mov	r3, r0
 8006b98:	71fb      	strb	r3, [r7, #7]
    uint8_t barWidth = 100;  // Width of the progress bar
 8006b9a:	2364      	movs	r3, #100	; 0x64
 8006b9c:	73fb      	strb	r3, [r7, #15]
    uint8_t barHeight = 10;  // Height of the progress bar
 8006b9e:	230a      	movs	r3, #10
 8006ba0:	73bb      	strb	r3, [r7, #14]
    uint8_t x = (128 - barWidth) / 2;  // Center horizontally
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006ba8:	0fda      	lsrs	r2, r3, #31
 8006baa:	4413      	add	r3, r2
 8006bac:	105b      	asrs	r3, r3, #1
 8006bae:	737b      	strb	r3, [r7, #13]
    uint8_t y = 32;  // Center vertically
 8006bb0:	2320      	movs	r3, #32
 8006bb2:	733b      	strb	r3, [r7, #12]


    // Draw the progress bar border
    ssd1306_DrawRectangle(x, y, x + barWidth, y + barHeight, White);
 8006bb4:	7b78      	ldrb	r0, [r7, #13]
 8006bb6:	7b39      	ldrb	r1, [r7, #12]
 8006bb8:	7b7a      	ldrb	r2, [r7, #13]
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	18d4      	adds	r4, r2, r3
 8006bbe:	7b3a      	ldrb	r2, [r7, #12]
 8006bc0:	7bbb      	ldrb	r3, [r7, #14]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	9200      	str	r2, [sp, #0]
 8006bc8:	4622      	mov	r2, r4
 8006bca:	f7ff feed 	bl	80069a8 <ssd1306_DrawRectangle>

    // Calculate the width of the filled part of the progress bar
    uint8_t fillWidth = (progress * barWidth) / 100;
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	7bfa      	ldrb	r2, [r7, #15]
 8006bd2:	fb02 f303 	mul.w	r3, r2, r3
 8006bd6:	4a0d      	ldr	r2, [pc, #52]	; (8006c0c <showProgress+0x7c>)
 8006bd8:	fb82 1203 	smull	r1, r2, r2, r3
 8006bdc:	1152      	asrs	r2, r2, #5
 8006bde:	17db      	asrs	r3, r3, #31
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	72fb      	strb	r3, [r7, #11]

    // Draw the filled part of the progress bar
    ssd1306_FillRectangle(x, y, x + fillWidth, y + barHeight, White);
 8006be4:	7b78      	ldrb	r0, [r7, #13]
 8006be6:	7b39      	ldrb	r1, [r7, #12]
 8006be8:	7b7a      	ldrb	r2, [r7, #13]
 8006bea:	7afb      	ldrb	r3, [r7, #11]
 8006bec:	18d4      	adds	r4, r2, r3
 8006bee:	7b3a      	ldrb	r2, [r7, #12]
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	9200      	str	r2, [sp, #0]
 8006bf8:	4622      	mov	r2, r4
 8006bfa:	f7ff ff0c 	bl	8006a16 <ssd1306_FillRectangle>

    // Update the display
    ssd1306_UpdateScreen();
 8006bfe:	f7ff fd1d 	bl	800663c <ssd1306_UpdateScreen>
}
 8006c02:	bf00      	nop
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd90      	pop	{r4, r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	51eb851f 	.word	0x51eb851f

08006c10 <test>:

void test(char* value1,char* noti){
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
	ssd1306_Fill(Black);
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	f7ff fcf6 	bl	800660c <ssd1306_Fill>

	ssd1306_SetCursor(5,6);
 8006c20:	2106      	movs	r1, #6
 8006c22:	2005      	movs	r0, #5
 8006c24:	f7ff fe3c 	bl	80068a0 <ssd1306_SetCursor>
	ssd1306_WriteString("Set Up Wifi", Font_11x18, White);
 8006c28:	4b11      	ldr	r3, [pc, #68]	; (8006c70 <test+0x60>)
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	9200      	str	r2, [sp, #0]
 8006c2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c30:	4810      	ldr	r0, [pc, #64]	; (8006c74 <test+0x64>)
 8006c32:	f7ff fe0f 	bl	8006854 <ssd1306_WriteString>

	ssd1306_SetCursor(5,35);
 8006c36:	2123      	movs	r1, #35	; 0x23
 8006c38:	2005      	movs	r0, #5
 8006c3a:	f7ff fe31 	bl	80068a0 <ssd1306_SetCursor>
	ssd1306_WriteString(noti, Font_7x10, White);
 8006c3e:	4b0e      	ldr	r3, [pc, #56]	; (8006c78 <test+0x68>)
 8006c40:	2201      	movs	r2, #1
 8006c42:	9200      	str	r2, [sp, #0]
 8006c44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c46:	6838      	ldr	r0, [r7, #0]
 8006c48:	f7ff fe04 	bl	8006854 <ssd1306_WriteString>


	ssd1306_SetCursor(5,50);
 8006c4c:	2132      	movs	r1, #50	; 0x32
 8006c4e:	2005      	movs	r0, #5
 8006c50:	f7ff fe26 	bl	80068a0 <ssd1306_SetCursor>
    ssd1306_WriteString(value1, Font_7x10, White);
 8006c54:	4b08      	ldr	r3, [pc, #32]	; (8006c78 <test+0x68>)
 8006c56:	2201      	movs	r2, #1
 8006c58:	9200      	str	r2, [sp, #0]
 8006c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff fdf9 	bl	8006854 <ssd1306_WriteString>



	ssd1306_UpdateScreen();
 8006c62:	f7ff fceb 	bl	800663c <ssd1306_UpdateScreen>
}
 8006c66:	bf00      	nop
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	0800c96c 	.word	0x0800c96c
 8006c74:	0800b450 	.word	0x0800b450
 8006c78:	0800c960 	.word	0x0800c960

08006c7c <showMonitoring>:

void showMonitoring(char* value){
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af02      	add	r7, sp, #8
 8006c82:	6078      	str	r0, [r7, #4]
	char buffer[10]={0};
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	f107 0310 	add.w	r3, r7, #16
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	809a      	strh	r2, [r3, #4]
	ssd1306_Fill(Black);
 8006c92:	2000      	movs	r0, #0
 8006c94:	f7ff fcba 	bl	800660c <ssd1306_Fill>


	strcat(buffer,value);
 8006c98:	f107 030c 	add.w	r3, r7, #12
 8006c9c:	6879      	ldr	r1, [r7, #4]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fc1b 	bl	80074da <strcat>
	strcat(buffer," dB");
 8006ca4:	f107 030c 	add.w	r3, r7, #12
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7f9 fa51 	bl	8000150 <strlen>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	f107 030c 	add.w	r3, r7, #12
 8006cb6:	4413      	add	r3, r2
 8006cb8:	4a0a      	ldr	r2, [pc, #40]	; (8006ce4 <showMonitoring+0x68>)
 8006cba:	6810      	ldr	r0, [r2, #0]
 8006cbc:	6018      	str	r0, [r3, #0]

	ssd1306_SetCursor(20,35);
 8006cbe:	2123      	movs	r1, #35	; 0x23
 8006cc0:	2014      	movs	r0, #20
 8006cc2:	f7ff fded 	bl	80068a0 <ssd1306_SetCursor>
	ssd1306_WriteString(buffer, Font_11x18, White);
 8006cc6:	4b08      	ldr	r3, [pc, #32]	; (8006ce8 <showMonitoring+0x6c>)
 8006cc8:	f107 000c 	add.w	r0, r7, #12
 8006ccc:	2201      	movs	r2, #1
 8006cce:	9200      	str	r2, [sp, #0]
 8006cd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cd2:	f7ff fdbf 	bl	8006854 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8006cd6:	f7ff fcb1 	bl	800663c <ssd1306_UpdateScreen>
}
 8006cda:	bf00      	nop
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	0800b45c 	.word	0x0800b45c
 8006ce8:	0800c96c 	.word	0x0800c96c

08006cec <_strtol_l.constprop.0>:
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf2:	4686      	mov	lr, r0
 8006cf4:	4690      	mov	r8, r2
 8006cf6:	d001      	beq.n	8006cfc <_strtol_l.constprop.0+0x10>
 8006cf8:	2b24      	cmp	r3, #36	; 0x24
 8006cfa:	d906      	bls.n	8006d0a <_strtol_l.constprop.0+0x1e>
 8006cfc:	f000 fc78 	bl	80075f0 <__errno>
 8006d00:	2316      	movs	r3, #22
 8006d02:	6003      	str	r3, [r0, #0]
 8006d04:	2000      	movs	r0, #0
 8006d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d0a:	460d      	mov	r5, r1
 8006d0c:	4835      	ldr	r0, [pc, #212]	; (8006de4 <_strtol_l.constprop.0+0xf8>)
 8006d0e:	462a      	mov	r2, r5
 8006d10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d14:	5d06      	ldrb	r6, [r0, r4]
 8006d16:	f016 0608 	ands.w	r6, r6, #8
 8006d1a:	d1f8      	bne.n	8006d0e <_strtol_l.constprop.0+0x22>
 8006d1c:	2c2d      	cmp	r4, #45	; 0x2d
 8006d1e:	d12e      	bne.n	8006d7e <_strtol_l.constprop.0+0x92>
 8006d20:	2601      	movs	r6, #1
 8006d22:	782c      	ldrb	r4, [r5, #0]
 8006d24:	1c95      	adds	r5, r2, #2
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d057      	beq.n	8006dda <_strtol_l.constprop.0+0xee>
 8006d2a:	2b10      	cmp	r3, #16
 8006d2c:	d109      	bne.n	8006d42 <_strtol_l.constprop.0+0x56>
 8006d2e:	2c30      	cmp	r4, #48	; 0x30
 8006d30:	d107      	bne.n	8006d42 <_strtol_l.constprop.0+0x56>
 8006d32:	782a      	ldrb	r2, [r5, #0]
 8006d34:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006d38:	2a58      	cmp	r2, #88	; 0x58
 8006d3a:	d149      	bne.n	8006dd0 <_strtol_l.constprop.0+0xe4>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	786c      	ldrb	r4, [r5, #1]
 8006d40:	3502      	adds	r5, #2
 8006d42:	2200      	movs	r2, #0
 8006d44:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8006d48:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006d4c:	fbbc f9f3 	udiv	r9, ip, r3
 8006d50:	4610      	mov	r0, r2
 8006d52:	fb03 ca19 	mls	sl, r3, r9, ip
 8006d56:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006d5a:	2f09      	cmp	r7, #9
 8006d5c:	d814      	bhi.n	8006d88 <_strtol_l.constprop.0+0x9c>
 8006d5e:	463c      	mov	r4, r7
 8006d60:	42a3      	cmp	r3, r4
 8006d62:	dd20      	ble.n	8006da6 <_strtol_l.constprop.0+0xba>
 8006d64:	1c57      	adds	r7, r2, #1
 8006d66:	d007      	beq.n	8006d78 <_strtol_l.constprop.0+0x8c>
 8006d68:	4581      	cmp	r9, r0
 8006d6a:	d319      	bcc.n	8006da0 <_strtol_l.constprop.0+0xb4>
 8006d6c:	d101      	bne.n	8006d72 <_strtol_l.constprop.0+0x86>
 8006d6e:	45a2      	cmp	sl, r4
 8006d70:	db16      	blt.n	8006da0 <_strtol_l.constprop.0+0xb4>
 8006d72:	2201      	movs	r2, #1
 8006d74:	fb00 4003 	mla	r0, r0, r3, r4
 8006d78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d7c:	e7eb      	b.n	8006d56 <_strtol_l.constprop.0+0x6a>
 8006d7e:	2c2b      	cmp	r4, #43	; 0x2b
 8006d80:	bf04      	itt	eq
 8006d82:	782c      	ldrbeq	r4, [r5, #0]
 8006d84:	1c95      	addeq	r5, r2, #2
 8006d86:	e7ce      	b.n	8006d26 <_strtol_l.constprop.0+0x3a>
 8006d88:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006d8c:	2f19      	cmp	r7, #25
 8006d8e:	d801      	bhi.n	8006d94 <_strtol_l.constprop.0+0xa8>
 8006d90:	3c37      	subs	r4, #55	; 0x37
 8006d92:	e7e5      	b.n	8006d60 <_strtol_l.constprop.0+0x74>
 8006d94:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006d98:	2f19      	cmp	r7, #25
 8006d9a:	d804      	bhi.n	8006da6 <_strtol_l.constprop.0+0xba>
 8006d9c:	3c57      	subs	r4, #87	; 0x57
 8006d9e:	e7df      	b.n	8006d60 <_strtol_l.constprop.0+0x74>
 8006da0:	f04f 32ff 	mov.w	r2, #4294967295
 8006da4:	e7e8      	b.n	8006d78 <_strtol_l.constprop.0+0x8c>
 8006da6:	1c53      	adds	r3, r2, #1
 8006da8:	d108      	bne.n	8006dbc <_strtol_l.constprop.0+0xd0>
 8006daa:	2322      	movs	r3, #34	; 0x22
 8006dac:	4660      	mov	r0, ip
 8006dae:	f8ce 3000 	str.w	r3, [lr]
 8006db2:	f1b8 0f00 	cmp.w	r8, #0
 8006db6:	d0a6      	beq.n	8006d06 <_strtol_l.constprop.0+0x1a>
 8006db8:	1e69      	subs	r1, r5, #1
 8006dba:	e006      	b.n	8006dca <_strtol_l.constprop.0+0xde>
 8006dbc:	b106      	cbz	r6, 8006dc0 <_strtol_l.constprop.0+0xd4>
 8006dbe:	4240      	negs	r0, r0
 8006dc0:	f1b8 0f00 	cmp.w	r8, #0
 8006dc4:	d09f      	beq.n	8006d06 <_strtol_l.constprop.0+0x1a>
 8006dc6:	2a00      	cmp	r2, #0
 8006dc8:	d1f6      	bne.n	8006db8 <_strtol_l.constprop.0+0xcc>
 8006dca:	f8c8 1000 	str.w	r1, [r8]
 8006dce:	e79a      	b.n	8006d06 <_strtol_l.constprop.0+0x1a>
 8006dd0:	2430      	movs	r4, #48	; 0x30
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1b5      	bne.n	8006d42 <_strtol_l.constprop.0+0x56>
 8006dd6:	2308      	movs	r3, #8
 8006dd8:	e7b3      	b.n	8006d42 <_strtol_l.constprop.0+0x56>
 8006dda:	2c30      	cmp	r4, #48	; 0x30
 8006ddc:	d0a9      	beq.n	8006d32 <_strtol_l.constprop.0+0x46>
 8006dde:	230a      	movs	r3, #10
 8006de0:	e7af      	b.n	8006d42 <_strtol_l.constprop.0+0x56>
 8006de2:	bf00      	nop
 8006de4:	0800c979 	.word	0x0800c979

08006de8 <_strtol_r>:
 8006de8:	f7ff bf80 	b.w	8006cec <_strtol_l.constprop.0>

08006dec <_scanf_float>:
 8006dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df0:	b087      	sub	sp, #28
 8006df2:	9303      	str	r3, [sp, #12]
 8006df4:	688b      	ldr	r3, [r1, #8]
 8006df6:	4617      	mov	r7, r2
 8006df8:	1e5a      	subs	r2, r3, #1
 8006dfa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006dfe:	bf85      	ittet	hi
 8006e00:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006e04:	195b      	addhi	r3, r3, r5
 8006e06:	2300      	movls	r3, #0
 8006e08:	9302      	strhi	r3, [sp, #8]
 8006e0a:	bf88      	it	hi
 8006e0c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006e10:	468b      	mov	fp, r1
 8006e12:	f04f 0500 	mov.w	r5, #0
 8006e16:	bf8c      	ite	hi
 8006e18:	608b      	strhi	r3, [r1, #8]
 8006e1a:	9302      	strls	r3, [sp, #8]
 8006e1c:	680b      	ldr	r3, [r1, #0]
 8006e1e:	4680      	mov	r8, r0
 8006e20:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006e24:	f84b 3b1c 	str.w	r3, [fp], #28
 8006e28:	460c      	mov	r4, r1
 8006e2a:	465e      	mov	r6, fp
 8006e2c:	46aa      	mov	sl, r5
 8006e2e:	46a9      	mov	r9, r5
 8006e30:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006e34:	9501      	str	r5, [sp, #4]
 8006e36:	68a2      	ldr	r2, [r4, #8]
 8006e38:	b152      	cbz	r2, 8006e50 <_scanf_float+0x64>
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b4e      	cmp	r3, #78	; 0x4e
 8006e40:	d864      	bhi.n	8006f0c <_scanf_float+0x120>
 8006e42:	2b40      	cmp	r3, #64	; 0x40
 8006e44:	d83c      	bhi.n	8006ec0 <_scanf_float+0xd4>
 8006e46:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006e4a:	b2c8      	uxtb	r0, r1
 8006e4c:	280e      	cmp	r0, #14
 8006e4e:	d93a      	bls.n	8006ec6 <_scanf_float+0xda>
 8006e50:	f1b9 0f00 	cmp.w	r9, #0
 8006e54:	d003      	beq.n	8006e5e <_scanf_float+0x72>
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e62:	f1ba 0f01 	cmp.w	sl, #1
 8006e66:	f200 8113 	bhi.w	8007090 <_scanf_float+0x2a4>
 8006e6a:	455e      	cmp	r6, fp
 8006e6c:	f200 8105 	bhi.w	800707a <_scanf_float+0x28e>
 8006e70:	2501      	movs	r5, #1
 8006e72:	4628      	mov	r0, r5
 8006e74:	b007      	add	sp, #28
 8006e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e7a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006e7e:	2a0d      	cmp	r2, #13
 8006e80:	d8e6      	bhi.n	8006e50 <_scanf_float+0x64>
 8006e82:	a101      	add	r1, pc, #4	; (adr r1, 8006e88 <_scanf_float+0x9c>)
 8006e84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e88:	08006fc7 	.word	0x08006fc7
 8006e8c:	08006e51 	.word	0x08006e51
 8006e90:	08006e51 	.word	0x08006e51
 8006e94:	08006e51 	.word	0x08006e51
 8006e98:	08007027 	.word	0x08007027
 8006e9c:	08006fff 	.word	0x08006fff
 8006ea0:	08006e51 	.word	0x08006e51
 8006ea4:	08006e51 	.word	0x08006e51
 8006ea8:	08006fd5 	.word	0x08006fd5
 8006eac:	08006e51 	.word	0x08006e51
 8006eb0:	08006e51 	.word	0x08006e51
 8006eb4:	08006e51 	.word	0x08006e51
 8006eb8:	08006e51 	.word	0x08006e51
 8006ebc:	08006f8d 	.word	0x08006f8d
 8006ec0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006ec4:	e7db      	b.n	8006e7e <_scanf_float+0x92>
 8006ec6:	290e      	cmp	r1, #14
 8006ec8:	d8c2      	bhi.n	8006e50 <_scanf_float+0x64>
 8006eca:	a001      	add	r0, pc, #4	; (adr r0, 8006ed0 <_scanf_float+0xe4>)
 8006ecc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006ed0:	08006f7f 	.word	0x08006f7f
 8006ed4:	08006e51 	.word	0x08006e51
 8006ed8:	08006f7f 	.word	0x08006f7f
 8006edc:	08007013 	.word	0x08007013
 8006ee0:	08006e51 	.word	0x08006e51
 8006ee4:	08006f2d 	.word	0x08006f2d
 8006ee8:	08006f69 	.word	0x08006f69
 8006eec:	08006f69 	.word	0x08006f69
 8006ef0:	08006f69 	.word	0x08006f69
 8006ef4:	08006f69 	.word	0x08006f69
 8006ef8:	08006f69 	.word	0x08006f69
 8006efc:	08006f69 	.word	0x08006f69
 8006f00:	08006f69 	.word	0x08006f69
 8006f04:	08006f69 	.word	0x08006f69
 8006f08:	08006f69 	.word	0x08006f69
 8006f0c:	2b6e      	cmp	r3, #110	; 0x6e
 8006f0e:	d809      	bhi.n	8006f24 <_scanf_float+0x138>
 8006f10:	2b60      	cmp	r3, #96	; 0x60
 8006f12:	d8b2      	bhi.n	8006e7a <_scanf_float+0x8e>
 8006f14:	2b54      	cmp	r3, #84	; 0x54
 8006f16:	d077      	beq.n	8007008 <_scanf_float+0x21c>
 8006f18:	2b59      	cmp	r3, #89	; 0x59
 8006f1a:	d199      	bne.n	8006e50 <_scanf_float+0x64>
 8006f1c:	2d07      	cmp	r5, #7
 8006f1e:	d197      	bne.n	8006e50 <_scanf_float+0x64>
 8006f20:	2508      	movs	r5, #8
 8006f22:	e029      	b.n	8006f78 <_scanf_float+0x18c>
 8006f24:	2b74      	cmp	r3, #116	; 0x74
 8006f26:	d06f      	beq.n	8007008 <_scanf_float+0x21c>
 8006f28:	2b79      	cmp	r3, #121	; 0x79
 8006f2a:	e7f6      	b.n	8006f1a <_scanf_float+0x12e>
 8006f2c:	6821      	ldr	r1, [r4, #0]
 8006f2e:	05c8      	lsls	r0, r1, #23
 8006f30:	d51a      	bpl.n	8006f68 <_scanf_float+0x17c>
 8006f32:	9b02      	ldr	r3, [sp, #8]
 8006f34:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006f38:	6021      	str	r1, [r4, #0]
 8006f3a:	f109 0901 	add.w	r9, r9, #1
 8006f3e:	b11b      	cbz	r3, 8006f48 <_scanf_float+0x15c>
 8006f40:	3b01      	subs	r3, #1
 8006f42:	3201      	adds	r2, #1
 8006f44:	9302      	str	r3, [sp, #8]
 8006f46:	60a2      	str	r2, [r4, #8]
 8006f48:	68a3      	ldr	r3, [r4, #8]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	60a3      	str	r3, [r4, #8]
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	3301      	adds	r3, #1
 8006f52:	6123      	str	r3, [r4, #16]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	607b      	str	r3, [r7, #4]
 8006f5c:	f340 8084 	ble.w	8007068 <_scanf_float+0x27c>
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	3301      	adds	r3, #1
 8006f64:	603b      	str	r3, [r7, #0]
 8006f66:	e766      	b.n	8006e36 <_scanf_float+0x4a>
 8006f68:	eb1a 0f05 	cmn.w	sl, r5
 8006f6c:	f47f af70 	bne.w	8006e50 <_scanf_float+0x64>
 8006f70:	6822      	ldr	r2, [r4, #0]
 8006f72:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006f76:	6022      	str	r2, [r4, #0]
 8006f78:	f806 3b01 	strb.w	r3, [r6], #1
 8006f7c:	e7e4      	b.n	8006f48 <_scanf_float+0x15c>
 8006f7e:	6822      	ldr	r2, [r4, #0]
 8006f80:	0610      	lsls	r0, r2, #24
 8006f82:	f57f af65 	bpl.w	8006e50 <_scanf_float+0x64>
 8006f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f8a:	e7f4      	b.n	8006f76 <_scanf_float+0x18a>
 8006f8c:	f1ba 0f00 	cmp.w	sl, #0
 8006f90:	d10e      	bne.n	8006fb0 <_scanf_float+0x1c4>
 8006f92:	f1b9 0f00 	cmp.w	r9, #0
 8006f96:	d10e      	bne.n	8006fb6 <_scanf_float+0x1ca>
 8006f98:	6822      	ldr	r2, [r4, #0]
 8006f9a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f9e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006fa2:	d108      	bne.n	8006fb6 <_scanf_float+0x1ca>
 8006fa4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006fa8:	f04f 0a01 	mov.w	sl, #1
 8006fac:	6022      	str	r2, [r4, #0]
 8006fae:	e7e3      	b.n	8006f78 <_scanf_float+0x18c>
 8006fb0:	f1ba 0f02 	cmp.w	sl, #2
 8006fb4:	d055      	beq.n	8007062 <_scanf_float+0x276>
 8006fb6:	2d01      	cmp	r5, #1
 8006fb8:	d002      	beq.n	8006fc0 <_scanf_float+0x1d4>
 8006fba:	2d04      	cmp	r5, #4
 8006fbc:	f47f af48 	bne.w	8006e50 <_scanf_float+0x64>
 8006fc0:	3501      	adds	r5, #1
 8006fc2:	b2ed      	uxtb	r5, r5
 8006fc4:	e7d8      	b.n	8006f78 <_scanf_float+0x18c>
 8006fc6:	f1ba 0f01 	cmp.w	sl, #1
 8006fca:	f47f af41 	bne.w	8006e50 <_scanf_float+0x64>
 8006fce:	f04f 0a02 	mov.w	sl, #2
 8006fd2:	e7d1      	b.n	8006f78 <_scanf_float+0x18c>
 8006fd4:	b97d      	cbnz	r5, 8006ff6 <_scanf_float+0x20a>
 8006fd6:	f1b9 0f00 	cmp.w	r9, #0
 8006fda:	f47f af3c 	bne.w	8006e56 <_scanf_float+0x6a>
 8006fde:	6822      	ldr	r2, [r4, #0]
 8006fe0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006fe4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006fe8:	f47f af39 	bne.w	8006e5e <_scanf_float+0x72>
 8006fec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ff0:	2501      	movs	r5, #1
 8006ff2:	6022      	str	r2, [r4, #0]
 8006ff4:	e7c0      	b.n	8006f78 <_scanf_float+0x18c>
 8006ff6:	2d03      	cmp	r5, #3
 8006ff8:	d0e2      	beq.n	8006fc0 <_scanf_float+0x1d4>
 8006ffa:	2d05      	cmp	r5, #5
 8006ffc:	e7de      	b.n	8006fbc <_scanf_float+0x1d0>
 8006ffe:	2d02      	cmp	r5, #2
 8007000:	f47f af26 	bne.w	8006e50 <_scanf_float+0x64>
 8007004:	2503      	movs	r5, #3
 8007006:	e7b7      	b.n	8006f78 <_scanf_float+0x18c>
 8007008:	2d06      	cmp	r5, #6
 800700a:	f47f af21 	bne.w	8006e50 <_scanf_float+0x64>
 800700e:	2507      	movs	r5, #7
 8007010:	e7b2      	b.n	8006f78 <_scanf_float+0x18c>
 8007012:	6822      	ldr	r2, [r4, #0]
 8007014:	0591      	lsls	r1, r2, #22
 8007016:	f57f af1b 	bpl.w	8006e50 <_scanf_float+0x64>
 800701a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800701e:	6022      	str	r2, [r4, #0]
 8007020:	f8cd 9004 	str.w	r9, [sp, #4]
 8007024:	e7a8      	b.n	8006f78 <_scanf_float+0x18c>
 8007026:	6822      	ldr	r2, [r4, #0]
 8007028:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800702c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007030:	d006      	beq.n	8007040 <_scanf_float+0x254>
 8007032:	0550      	lsls	r0, r2, #21
 8007034:	f57f af0c 	bpl.w	8006e50 <_scanf_float+0x64>
 8007038:	f1b9 0f00 	cmp.w	r9, #0
 800703c:	f43f af0f 	beq.w	8006e5e <_scanf_float+0x72>
 8007040:	0591      	lsls	r1, r2, #22
 8007042:	bf58      	it	pl
 8007044:	9901      	ldrpl	r1, [sp, #4]
 8007046:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800704a:	bf58      	it	pl
 800704c:	eba9 0101 	subpl.w	r1, r9, r1
 8007050:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007054:	f04f 0900 	mov.w	r9, #0
 8007058:	bf58      	it	pl
 800705a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800705e:	6022      	str	r2, [r4, #0]
 8007060:	e78a      	b.n	8006f78 <_scanf_float+0x18c>
 8007062:	f04f 0a03 	mov.w	sl, #3
 8007066:	e787      	b.n	8006f78 <_scanf_float+0x18c>
 8007068:	4639      	mov	r1, r7
 800706a:	4640      	mov	r0, r8
 800706c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007070:	4798      	blx	r3
 8007072:	2800      	cmp	r0, #0
 8007074:	f43f aedf 	beq.w	8006e36 <_scanf_float+0x4a>
 8007078:	e6ea      	b.n	8006e50 <_scanf_float+0x64>
 800707a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800707e:	463a      	mov	r2, r7
 8007080:	4640      	mov	r0, r8
 8007082:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007086:	4798      	blx	r3
 8007088:	6923      	ldr	r3, [r4, #16]
 800708a:	3b01      	subs	r3, #1
 800708c:	6123      	str	r3, [r4, #16]
 800708e:	e6ec      	b.n	8006e6a <_scanf_float+0x7e>
 8007090:	1e6b      	subs	r3, r5, #1
 8007092:	2b06      	cmp	r3, #6
 8007094:	d825      	bhi.n	80070e2 <_scanf_float+0x2f6>
 8007096:	2d02      	cmp	r5, #2
 8007098:	d836      	bhi.n	8007108 <_scanf_float+0x31c>
 800709a:	455e      	cmp	r6, fp
 800709c:	f67f aee8 	bls.w	8006e70 <_scanf_float+0x84>
 80070a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070a4:	463a      	mov	r2, r7
 80070a6:	4640      	mov	r0, r8
 80070a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070ac:	4798      	blx	r3
 80070ae:	6923      	ldr	r3, [r4, #16]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	6123      	str	r3, [r4, #16]
 80070b4:	e7f1      	b.n	800709a <_scanf_float+0x2ae>
 80070b6:	9802      	ldr	r0, [sp, #8]
 80070b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80070c0:	463a      	mov	r2, r7
 80070c2:	9002      	str	r0, [sp, #8]
 80070c4:	4640      	mov	r0, r8
 80070c6:	4798      	blx	r3
 80070c8:	6923      	ldr	r3, [r4, #16]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	6123      	str	r3, [r4, #16]
 80070ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070d2:	fa5f fa8a 	uxtb.w	sl, sl
 80070d6:	f1ba 0f02 	cmp.w	sl, #2
 80070da:	d1ec      	bne.n	80070b6 <_scanf_float+0x2ca>
 80070dc:	3d03      	subs	r5, #3
 80070de:	b2ed      	uxtb	r5, r5
 80070e0:	1b76      	subs	r6, r6, r5
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	05da      	lsls	r2, r3, #23
 80070e6:	d52f      	bpl.n	8007148 <_scanf_float+0x35c>
 80070e8:	055b      	lsls	r3, r3, #21
 80070ea:	d510      	bpl.n	800710e <_scanf_float+0x322>
 80070ec:	455e      	cmp	r6, fp
 80070ee:	f67f aebf 	bls.w	8006e70 <_scanf_float+0x84>
 80070f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070f6:	463a      	mov	r2, r7
 80070f8:	4640      	mov	r0, r8
 80070fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070fe:	4798      	blx	r3
 8007100:	6923      	ldr	r3, [r4, #16]
 8007102:	3b01      	subs	r3, #1
 8007104:	6123      	str	r3, [r4, #16]
 8007106:	e7f1      	b.n	80070ec <_scanf_float+0x300>
 8007108:	46aa      	mov	sl, r5
 800710a:	9602      	str	r6, [sp, #8]
 800710c:	e7df      	b.n	80070ce <_scanf_float+0x2e2>
 800710e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007112:	6923      	ldr	r3, [r4, #16]
 8007114:	2965      	cmp	r1, #101	; 0x65
 8007116:	f103 33ff 	add.w	r3, r3, #4294967295
 800711a:	f106 35ff 	add.w	r5, r6, #4294967295
 800711e:	6123      	str	r3, [r4, #16]
 8007120:	d00c      	beq.n	800713c <_scanf_float+0x350>
 8007122:	2945      	cmp	r1, #69	; 0x45
 8007124:	d00a      	beq.n	800713c <_scanf_float+0x350>
 8007126:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800712a:	463a      	mov	r2, r7
 800712c:	4640      	mov	r0, r8
 800712e:	4798      	blx	r3
 8007130:	6923      	ldr	r3, [r4, #16]
 8007132:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007136:	3b01      	subs	r3, #1
 8007138:	1eb5      	subs	r5, r6, #2
 800713a:	6123      	str	r3, [r4, #16]
 800713c:	463a      	mov	r2, r7
 800713e:	4640      	mov	r0, r8
 8007140:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007144:	4798      	blx	r3
 8007146:	462e      	mov	r6, r5
 8007148:	6825      	ldr	r5, [r4, #0]
 800714a:	f015 0510 	ands.w	r5, r5, #16
 800714e:	d155      	bne.n	80071fc <_scanf_float+0x410>
 8007150:	7035      	strb	r5, [r6, #0]
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800715c:	d11d      	bne.n	800719a <_scanf_float+0x3ae>
 800715e:	9b01      	ldr	r3, [sp, #4]
 8007160:	454b      	cmp	r3, r9
 8007162:	eba3 0209 	sub.w	r2, r3, r9
 8007166:	d125      	bne.n	80071b4 <_scanf_float+0x3c8>
 8007168:	2200      	movs	r2, #0
 800716a:	4659      	mov	r1, fp
 800716c:	4640      	mov	r0, r8
 800716e:	f001 f9af 	bl	80084d0 <_strtod_r>
 8007172:	9b03      	ldr	r3, [sp, #12]
 8007174:	f8d4 c000 	ldr.w	ip, [r4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f01c 0f02 	tst.w	ip, #2
 800717e:	4606      	mov	r6, r0
 8007180:	460f      	mov	r7, r1
 8007182:	f103 0204 	add.w	r2, r3, #4
 8007186:	d020      	beq.n	80071ca <_scanf_float+0x3de>
 8007188:	9903      	ldr	r1, [sp, #12]
 800718a:	600a      	str	r2, [r1, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	e9c3 6700 	strd	r6, r7, [r3]
 8007192:	68e3      	ldr	r3, [r4, #12]
 8007194:	3301      	adds	r3, #1
 8007196:	60e3      	str	r3, [r4, #12]
 8007198:	e66b      	b.n	8006e72 <_scanf_float+0x86>
 800719a:	9b04      	ldr	r3, [sp, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0e3      	beq.n	8007168 <_scanf_float+0x37c>
 80071a0:	9905      	ldr	r1, [sp, #20]
 80071a2:	230a      	movs	r3, #10
 80071a4:	462a      	mov	r2, r5
 80071a6:	4640      	mov	r0, r8
 80071a8:	3101      	adds	r1, #1
 80071aa:	f7ff fe1d 	bl	8006de8 <_strtol_r>
 80071ae:	9b04      	ldr	r3, [sp, #16]
 80071b0:	9e05      	ldr	r6, [sp, #20]
 80071b2:	1ac2      	subs	r2, r0, r3
 80071b4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80071b8:	429e      	cmp	r6, r3
 80071ba:	bf28      	it	cs
 80071bc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80071c0:	4630      	mov	r0, r6
 80071c2:	490f      	ldr	r1, [pc, #60]	; (8007200 <_scanf_float+0x414>)
 80071c4:	f000 f8e2 	bl	800738c <siprintf>
 80071c8:	e7ce      	b.n	8007168 <_scanf_float+0x37c>
 80071ca:	f01c 0f04 	tst.w	ip, #4
 80071ce:	d1db      	bne.n	8007188 <_scanf_float+0x39c>
 80071d0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80071d4:	f8cc 2000 	str.w	r2, [ip]
 80071d8:	f8d3 8000 	ldr.w	r8, [r3]
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	f7f9 fc14 	bl	8000a0c <__aeabi_dcmpun>
 80071e4:	b128      	cbz	r0, 80071f2 <_scanf_float+0x406>
 80071e6:	4807      	ldr	r0, [pc, #28]	; (8007204 <_scanf_float+0x418>)
 80071e8:	f000 fa3e 	bl	8007668 <nanf>
 80071ec:	f8c8 0000 	str.w	r0, [r8]
 80071f0:	e7cf      	b.n	8007192 <_scanf_float+0x3a6>
 80071f2:	4630      	mov	r0, r6
 80071f4:	4639      	mov	r1, r7
 80071f6:	f7f9 fc3f 	bl	8000a78 <__aeabi_d2f>
 80071fa:	e7f7      	b.n	80071ec <_scanf_float+0x400>
 80071fc:	2500      	movs	r5, #0
 80071fe:	e638      	b.n	8006e72 <_scanf_float+0x86>
 8007200:	0800ca79 	.word	0x0800ca79
 8007204:	0800cab9 	.word	0x0800cab9

08007208 <std>:
 8007208:	2300      	movs	r3, #0
 800720a:	b510      	push	{r4, lr}
 800720c:	4604      	mov	r4, r0
 800720e:	e9c0 3300 	strd	r3, r3, [r0]
 8007212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007216:	6083      	str	r3, [r0, #8]
 8007218:	8181      	strh	r1, [r0, #12]
 800721a:	6643      	str	r3, [r0, #100]	; 0x64
 800721c:	81c2      	strh	r2, [r0, #14]
 800721e:	6183      	str	r3, [r0, #24]
 8007220:	4619      	mov	r1, r3
 8007222:	2208      	movs	r2, #8
 8007224:	305c      	adds	r0, #92	; 0x5c
 8007226:	f000 f950 	bl	80074ca <memset>
 800722a:	4b0d      	ldr	r3, [pc, #52]	; (8007260 <std+0x58>)
 800722c:	6224      	str	r4, [r4, #32]
 800722e:	6263      	str	r3, [r4, #36]	; 0x24
 8007230:	4b0c      	ldr	r3, [pc, #48]	; (8007264 <std+0x5c>)
 8007232:	62a3      	str	r3, [r4, #40]	; 0x28
 8007234:	4b0c      	ldr	r3, [pc, #48]	; (8007268 <std+0x60>)
 8007236:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007238:	4b0c      	ldr	r3, [pc, #48]	; (800726c <std+0x64>)
 800723a:	6323      	str	r3, [r4, #48]	; 0x30
 800723c:	4b0c      	ldr	r3, [pc, #48]	; (8007270 <std+0x68>)
 800723e:	429c      	cmp	r4, r3
 8007240:	d006      	beq.n	8007250 <std+0x48>
 8007242:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007246:	4294      	cmp	r4, r2
 8007248:	d002      	beq.n	8007250 <std+0x48>
 800724a:	33d0      	adds	r3, #208	; 0xd0
 800724c:	429c      	cmp	r4, r3
 800724e:	d105      	bne.n	800725c <std+0x54>
 8007250:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007258:	f000 b9f4 	b.w	8007644 <__retarget_lock_init_recursive>
 800725c:	bd10      	pop	{r4, pc}
 800725e:	bf00      	nop
 8007260:	08007421 	.word	0x08007421
 8007264:	08007447 	.word	0x08007447
 8007268:	0800747f 	.word	0x0800747f
 800726c:	080074a3 	.word	0x080074a3
 8007270:	200018bc 	.word	0x200018bc

08007274 <stdio_exit_handler>:
 8007274:	4a02      	ldr	r2, [pc, #8]	; (8007280 <stdio_exit_handler+0xc>)
 8007276:	4903      	ldr	r1, [pc, #12]	; (8007284 <stdio_exit_handler+0x10>)
 8007278:	4803      	ldr	r0, [pc, #12]	; (8007288 <stdio_exit_handler+0x14>)
 800727a:	f000 b869 	b.w	8007350 <_fwalk_sglue>
 800727e:	bf00      	nop
 8007280:	200002f4 	.word	0x200002f4
 8007284:	080091f5 	.word	0x080091f5
 8007288:	20000300 	.word	0x20000300

0800728c <cleanup_stdio>:
 800728c:	6841      	ldr	r1, [r0, #4]
 800728e:	4b0c      	ldr	r3, [pc, #48]	; (80072c0 <cleanup_stdio+0x34>)
 8007290:	b510      	push	{r4, lr}
 8007292:	4299      	cmp	r1, r3
 8007294:	4604      	mov	r4, r0
 8007296:	d001      	beq.n	800729c <cleanup_stdio+0x10>
 8007298:	f001 ffac 	bl	80091f4 <_fflush_r>
 800729c:	68a1      	ldr	r1, [r4, #8]
 800729e:	4b09      	ldr	r3, [pc, #36]	; (80072c4 <cleanup_stdio+0x38>)
 80072a0:	4299      	cmp	r1, r3
 80072a2:	d002      	beq.n	80072aa <cleanup_stdio+0x1e>
 80072a4:	4620      	mov	r0, r4
 80072a6:	f001 ffa5 	bl	80091f4 <_fflush_r>
 80072aa:	68e1      	ldr	r1, [r4, #12]
 80072ac:	4b06      	ldr	r3, [pc, #24]	; (80072c8 <cleanup_stdio+0x3c>)
 80072ae:	4299      	cmp	r1, r3
 80072b0:	d004      	beq.n	80072bc <cleanup_stdio+0x30>
 80072b2:	4620      	mov	r0, r4
 80072b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072b8:	f001 bf9c 	b.w	80091f4 <_fflush_r>
 80072bc:	bd10      	pop	{r4, pc}
 80072be:	bf00      	nop
 80072c0:	200018bc 	.word	0x200018bc
 80072c4:	20001924 	.word	0x20001924
 80072c8:	2000198c 	.word	0x2000198c

080072cc <global_stdio_init.part.0>:
 80072cc:	b510      	push	{r4, lr}
 80072ce:	4b0b      	ldr	r3, [pc, #44]	; (80072fc <global_stdio_init.part.0+0x30>)
 80072d0:	4c0b      	ldr	r4, [pc, #44]	; (8007300 <global_stdio_init.part.0+0x34>)
 80072d2:	4a0c      	ldr	r2, [pc, #48]	; (8007304 <global_stdio_init.part.0+0x38>)
 80072d4:	4620      	mov	r0, r4
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	2104      	movs	r1, #4
 80072da:	2200      	movs	r2, #0
 80072dc:	f7ff ff94 	bl	8007208 <std>
 80072e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80072e4:	2201      	movs	r2, #1
 80072e6:	2109      	movs	r1, #9
 80072e8:	f7ff ff8e 	bl	8007208 <std>
 80072ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80072f0:	2202      	movs	r2, #2
 80072f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072f6:	2112      	movs	r1, #18
 80072f8:	f7ff bf86 	b.w	8007208 <std>
 80072fc:	200019f4 	.word	0x200019f4
 8007300:	200018bc 	.word	0x200018bc
 8007304:	08007275 	.word	0x08007275

08007308 <__sfp_lock_acquire>:
 8007308:	4801      	ldr	r0, [pc, #4]	; (8007310 <__sfp_lock_acquire+0x8>)
 800730a:	f000 b99c 	b.w	8007646 <__retarget_lock_acquire_recursive>
 800730e:	bf00      	nop
 8007310:	200019fd 	.word	0x200019fd

08007314 <__sfp_lock_release>:
 8007314:	4801      	ldr	r0, [pc, #4]	; (800731c <__sfp_lock_release+0x8>)
 8007316:	f000 b997 	b.w	8007648 <__retarget_lock_release_recursive>
 800731a:	bf00      	nop
 800731c:	200019fd 	.word	0x200019fd

08007320 <__sinit>:
 8007320:	b510      	push	{r4, lr}
 8007322:	4604      	mov	r4, r0
 8007324:	f7ff fff0 	bl	8007308 <__sfp_lock_acquire>
 8007328:	6a23      	ldr	r3, [r4, #32]
 800732a:	b11b      	cbz	r3, 8007334 <__sinit+0x14>
 800732c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007330:	f7ff bff0 	b.w	8007314 <__sfp_lock_release>
 8007334:	4b04      	ldr	r3, [pc, #16]	; (8007348 <__sinit+0x28>)
 8007336:	6223      	str	r3, [r4, #32]
 8007338:	4b04      	ldr	r3, [pc, #16]	; (800734c <__sinit+0x2c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1f5      	bne.n	800732c <__sinit+0xc>
 8007340:	f7ff ffc4 	bl	80072cc <global_stdio_init.part.0>
 8007344:	e7f2      	b.n	800732c <__sinit+0xc>
 8007346:	bf00      	nop
 8007348:	0800728d 	.word	0x0800728d
 800734c:	200019f4 	.word	0x200019f4

08007350 <_fwalk_sglue>:
 8007350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007354:	4607      	mov	r7, r0
 8007356:	4688      	mov	r8, r1
 8007358:	4614      	mov	r4, r2
 800735a:	2600      	movs	r6, #0
 800735c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007360:	f1b9 0901 	subs.w	r9, r9, #1
 8007364:	d505      	bpl.n	8007372 <_fwalk_sglue+0x22>
 8007366:	6824      	ldr	r4, [r4, #0]
 8007368:	2c00      	cmp	r4, #0
 800736a:	d1f7      	bne.n	800735c <_fwalk_sglue+0xc>
 800736c:	4630      	mov	r0, r6
 800736e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007372:	89ab      	ldrh	r3, [r5, #12]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d907      	bls.n	8007388 <_fwalk_sglue+0x38>
 8007378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800737c:	3301      	adds	r3, #1
 800737e:	d003      	beq.n	8007388 <_fwalk_sglue+0x38>
 8007380:	4629      	mov	r1, r5
 8007382:	4638      	mov	r0, r7
 8007384:	47c0      	blx	r8
 8007386:	4306      	orrs	r6, r0
 8007388:	3568      	adds	r5, #104	; 0x68
 800738a:	e7e9      	b.n	8007360 <_fwalk_sglue+0x10>

0800738c <siprintf>:
 800738c:	b40e      	push	{r1, r2, r3}
 800738e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007392:	b500      	push	{lr}
 8007394:	b09c      	sub	sp, #112	; 0x70
 8007396:	ab1d      	add	r3, sp, #116	; 0x74
 8007398:	9002      	str	r0, [sp, #8]
 800739a:	9006      	str	r0, [sp, #24]
 800739c:	9107      	str	r1, [sp, #28]
 800739e:	9104      	str	r1, [sp, #16]
 80073a0:	4808      	ldr	r0, [pc, #32]	; (80073c4 <siprintf+0x38>)
 80073a2:	4909      	ldr	r1, [pc, #36]	; (80073c8 <siprintf+0x3c>)
 80073a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073a8:	9105      	str	r1, [sp, #20]
 80073aa:	6800      	ldr	r0, [r0, #0]
 80073ac:	a902      	add	r1, sp, #8
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	f001 f8ee 	bl	8008590 <_svfiprintf_r>
 80073b4:	2200      	movs	r2, #0
 80073b6:	9b02      	ldr	r3, [sp, #8]
 80073b8:	701a      	strb	r2, [r3, #0]
 80073ba:	b01c      	add	sp, #112	; 0x70
 80073bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80073c0:	b003      	add	sp, #12
 80073c2:	4770      	bx	lr
 80073c4:	2000034c 	.word	0x2000034c
 80073c8:	ffff0208 	.word	0xffff0208

080073cc <siscanf>:
 80073cc:	b40e      	push	{r1, r2, r3}
 80073ce:	f44f 7201 	mov.w	r2, #516	; 0x204
 80073d2:	b530      	push	{r4, r5, lr}
 80073d4:	b09c      	sub	sp, #112	; 0x70
 80073d6:	ac1f      	add	r4, sp, #124	; 0x7c
 80073d8:	f854 5b04 	ldr.w	r5, [r4], #4
 80073dc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80073e0:	9002      	str	r0, [sp, #8]
 80073e2:	9006      	str	r0, [sp, #24]
 80073e4:	f7f8 feb4 	bl	8000150 <strlen>
 80073e8:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <siscanf+0x4c>)
 80073ea:	9003      	str	r0, [sp, #12]
 80073ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80073ee:	2300      	movs	r3, #0
 80073f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80073f2:	9314      	str	r3, [sp, #80]	; 0x50
 80073f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073f8:	9007      	str	r0, [sp, #28]
 80073fa:	4808      	ldr	r0, [pc, #32]	; (800741c <siscanf+0x50>)
 80073fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007400:	462a      	mov	r2, r5
 8007402:	4623      	mov	r3, r4
 8007404:	a902      	add	r1, sp, #8
 8007406:	6800      	ldr	r0, [r0, #0]
 8007408:	9401      	str	r4, [sp, #4]
 800740a:	f001 fa19 	bl	8008840 <__ssvfiscanf_r>
 800740e:	b01c      	add	sp, #112	; 0x70
 8007410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007414:	b003      	add	sp, #12
 8007416:	4770      	bx	lr
 8007418:	08007443 	.word	0x08007443
 800741c:	2000034c 	.word	0x2000034c

08007420 <__sread>:
 8007420:	b510      	push	{r4, lr}
 8007422:	460c      	mov	r4, r1
 8007424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007428:	f000 f8be 	bl	80075a8 <_read_r>
 800742c:	2800      	cmp	r0, #0
 800742e:	bfab      	itete	ge
 8007430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007432:	89a3      	ldrhlt	r3, [r4, #12]
 8007434:	181b      	addge	r3, r3, r0
 8007436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800743a:	bfac      	ite	ge
 800743c:	6563      	strge	r3, [r4, #84]	; 0x54
 800743e:	81a3      	strhlt	r3, [r4, #12]
 8007440:	bd10      	pop	{r4, pc}

08007442 <__seofread>:
 8007442:	2000      	movs	r0, #0
 8007444:	4770      	bx	lr

08007446 <__swrite>:
 8007446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800744a:	461f      	mov	r7, r3
 800744c:	898b      	ldrh	r3, [r1, #12]
 800744e:	4605      	mov	r5, r0
 8007450:	05db      	lsls	r3, r3, #23
 8007452:	460c      	mov	r4, r1
 8007454:	4616      	mov	r6, r2
 8007456:	d505      	bpl.n	8007464 <__swrite+0x1e>
 8007458:	2302      	movs	r3, #2
 800745a:	2200      	movs	r2, #0
 800745c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007460:	f000 f890 	bl	8007584 <_lseek_r>
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	4632      	mov	r2, r6
 8007468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800746c:	81a3      	strh	r3, [r4, #12]
 800746e:	4628      	mov	r0, r5
 8007470:	463b      	mov	r3, r7
 8007472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800747a:	f000 b8a7 	b.w	80075cc <_write_r>

0800747e <__sseek>:
 800747e:	b510      	push	{r4, lr}
 8007480:	460c      	mov	r4, r1
 8007482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007486:	f000 f87d 	bl	8007584 <_lseek_r>
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	bf15      	itete	ne
 8007490:	6560      	strne	r0, [r4, #84]	; 0x54
 8007492:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007496:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800749a:	81a3      	strheq	r3, [r4, #12]
 800749c:	bf18      	it	ne
 800749e:	81a3      	strhne	r3, [r4, #12]
 80074a0:	bd10      	pop	{r4, pc}

080074a2 <__sclose>:
 80074a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a6:	f000 b85d 	b.w	8007564 <_close_r>

080074aa <memcmp>:
 80074aa:	b510      	push	{r4, lr}
 80074ac:	3901      	subs	r1, #1
 80074ae:	4402      	add	r2, r0
 80074b0:	4290      	cmp	r0, r2
 80074b2:	d101      	bne.n	80074b8 <memcmp+0xe>
 80074b4:	2000      	movs	r0, #0
 80074b6:	e005      	b.n	80074c4 <memcmp+0x1a>
 80074b8:	7803      	ldrb	r3, [r0, #0]
 80074ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80074be:	42a3      	cmp	r3, r4
 80074c0:	d001      	beq.n	80074c6 <memcmp+0x1c>
 80074c2:	1b18      	subs	r0, r3, r4
 80074c4:	bd10      	pop	{r4, pc}
 80074c6:	3001      	adds	r0, #1
 80074c8:	e7f2      	b.n	80074b0 <memcmp+0x6>

080074ca <memset>:
 80074ca:	4603      	mov	r3, r0
 80074cc:	4402      	add	r2, r0
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d100      	bne.n	80074d4 <memset+0xa>
 80074d2:	4770      	bx	lr
 80074d4:	f803 1b01 	strb.w	r1, [r3], #1
 80074d8:	e7f9      	b.n	80074ce <memset+0x4>

080074da <strcat>:
 80074da:	4602      	mov	r2, r0
 80074dc:	b510      	push	{r4, lr}
 80074de:	7814      	ldrb	r4, [r2, #0]
 80074e0:	4613      	mov	r3, r2
 80074e2:	3201      	adds	r2, #1
 80074e4:	2c00      	cmp	r4, #0
 80074e6:	d1fa      	bne.n	80074de <strcat+0x4>
 80074e8:	3b01      	subs	r3, #1
 80074ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074f2:	2a00      	cmp	r2, #0
 80074f4:	d1f9      	bne.n	80074ea <strcat+0x10>
 80074f6:	bd10      	pop	{r4, pc}

080074f8 <strchr>:
 80074f8:	4603      	mov	r3, r0
 80074fa:	b2c9      	uxtb	r1, r1
 80074fc:	4618      	mov	r0, r3
 80074fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007502:	b112      	cbz	r2, 800750a <strchr+0x12>
 8007504:	428a      	cmp	r2, r1
 8007506:	d1f9      	bne.n	80074fc <strchr+0x4>
 8007508:	4770      	bx	lr
 800750a:	2900      	cmp	r1, #0
 800750c:	bf18      	it	ne
 800750e:	2000      	movne	r0, #0
 8007510:	4770      	bx	lr

08007512 <strncpy>:
 8007512:	4603      	mov	r3, r0
 8007514:	b510      	push	{r4, lr}
 8007516:	3901      	subs	r1, #1
 8007518:	b132      	cbz	r2, 8007528 <strncpy+0x16>
 800751a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800751e:	3a01      	subs	r2, #1
 8007520:	f803 4b01 	strb.w	r4, [r3], #1
 8007524:	2c00      	cmp	r4, #0
 8007526:	d1f7      	bne.n	8007518 <strncpy+0x6>
 8007528:	2100      	movs	r1, #0
 800752a:	441a      	add	r2, r3
 800752c:	4293      	cmp	r3, r2
 800752e:	d100      	bne.n	8007532 <strncpy+0x20>
 8007530:	bd10      	pop	{r4, pc}
 8007532:	f803 1b01 	strb.w	r1, [r3], #1
 8007536:	e7f9      	b.n	800752c <strncpy+0x1a>

08007538 <strstr>:
 8007538:	780a      	ldrb	r2, [r1, #0]
 800753a:	b570      	push	{r4, r5, r6, lr}
 800753c:	b96a      	cbnz	r2, 800755a <strstr+0x22>
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	429a      	cmp	r2, r3
 8007542:	d109      	bne.n	8007558 <strstr+0x20>
 8007544:	460c      	mov	r4, r1
 8007546:	4605      	mov	r5, r0
 8007548:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800754c:	2b00      	cmp	r3, #0
 800754e:	d0f6      	beq.n	800753e <strstr+0x6>
 8007550:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007554:	429e      	cmp	r6, r3
 8007556:	d0f7      	beq.n	8007548 <strstr+0x10>
 8007558:	3001      	adds	r0, #1
 800755a:	7803      	ldrb	r3, [r0, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1ef      	bne.n	8007540 <strstr+0x8>
 8007560:	4618      	mov	r0, r3
 8007562:	e7ec      	b.n	800753e <strstr+0x6>

08007564 <_close_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	2300      	movs	r3, #0
 8007568:	4d05      	ldr	r5, [pc, #20]	; (8007580 <_close_r+0x1c>)
 800756a:	4604      	mov	r4, r0
 800756c:	4608      	mov	r0, r1
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	f7fb fb18 	bl	8002ba4 <_close>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d102      	bne.n	800757e <_close_r+0x1a>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	b103      	cbz	r3, 800757e <_close_r+0x1a>
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	200019f8 	.word	0x200019f8

08007584 <_lseek_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	4604      	mov	r4, r0
 8007588:	4608      	mov	r0, r1
 800758a:	4611      	mov	r1, r2
 800758c:	2200      	movs	r2, #0
 800758e:	4d05      	ldr	r5, [pc, #20]	; (80075a4 <_lseek_r+0x20>)
 8007590:	602a      	str	r2, [r5, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	f7fb fb2a 	bl	8002bec <_lseek>
 8007598:	1c43      	adds	r3, r0, #1
 800759a:	d102      	bne.n	80075a2 <_lseek_r+0x1e>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	b103      	cbz	r3, 80075a2 <_lseek_r+0x1e>
 80075a0:	6023      	str	r3, [r4, #0]
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
 80075a4:	200019f8 	.word	0x200019f8

080075a8 <_read_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4604      	mov	r4, r0
 80075ac:	4608      	mov	r0, r1
 80075ae:	4611      	mov	r1, r2
 80075b0:	2200      	movs	r2, #0
 80075b2:	4d05      	ldr	r5, [pc, #20]	; (80075c8 <_read_r+0x20>)
 80075b4:	602a      	str	r2, [r5, #0]
 80075b6:	461a      	mov	r2, r3
 80075b8:	f7fb fabb 	bl	8002b32 <_read>
 80075bc:	1c43      	adds	r3, r0, #1
 80075be:	d102      	bne.n	80075c6 <_read_r+0x1e>
 80075c0:	682b      	ldr	r3, [r5, #0]
 80075c2:	b103      	cbz	r3, 80075c6 <_read_r+0x1e>
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	bd38      	pop	{r3, r4, r5, pc}
 80075c8:	200019f8 	.word	0x200019f8

080075cc <_write_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	4611      	mov	r1, r2
 80075d4:	2200      	movs	r2, #0
 80075d6:	4d05      	ldr	r5, [pc, #20]	; (80075ec <_write_r+0x20>)
 80075d8:	602a      	str	r2, [r5, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	f7fb fac6 	bl	8002b6c <_write>
 80075e0:	1c43      	adds	r3, r0, #1
 80075e2:	d102      	bne.n	80075ea <_write_r+0x1e>
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	b103      	cbz	r3, 80075ea <_write_r+0x1e>
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
 80075ec:	200019f8 	.word	0x200019f8

080075f0 <__errno>:
 80075f0:	4b01      	ldr	r3, [pc, #4]	; (80075f8 <__errno+0x8>)
 80075f2:	6818      	ldr	r0, [r3, #0]
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	2000034c 	.word	0x2000034c

080075fc <__libc_init_array>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	2600      	movs	r6, #0
 8007600:	4d0c      	ldr	r5, [pc, #48]	; (8007634 <__libc_init_array+0x38>)
 8007602:	4c0d      	ldr	r4, [pc, #52]	; (8007638 <__libc_init_array+0x3c>)
 8007604:	1b64      	subs	r4, r4, r5
 8007606:	10a4      	asrs	r4, r4, #2
 8007608:	42a6      	cmp	r6, r4
 800760a:	d109      	bne.n	8007620 <__libc_init_array+0x24>
 800760c:	f003 fcd2 	bl	800afb4 <_init>
 8007610:	2600      	movs	r6, #0
 8007612:	4d0a      	ldr	r5, [pc, #40]	; (800763c <__libc_init_array+0x40>)
 8007614:	4c0a      	ldr	r4, [pc, #40]	; (8007640 <__libc_init_array+0x44>)
 8007616:	1b64      	subs	r4, r4, r5
 8007618:	10a4      	asrs	r4, r4, #2
 800761a:	42a6      	cmp	r6, r4
 800761c:	d105      	bne.n	800762a <__libc_init_array+0x2e>
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	f855 3b04 	ldr.w	r3, [r5], #4
 8007624:	4798      	blx	r3
 8007626:	3601      	adds	r6, #1
 8007628:	e7ee      	b.n	8007608 <__libc_init_array+0xc>
 800762a:	f855 3b04 	ldr.w	r3, [r5], #4
 800762e:	4798      	blx	r3
 8007630:	3601      	adds	r6, #1
 8007632:	e7f2      	b.n	800761a <__libc_init_array+0x1e>
 8007634:	0800cd4c 	.word	0x0800cd4c
 8007638:	0800cd4c 	.word	0x0800cd4c
 800763c:	0800cd4c 	.word	0x0800cd4c
 8007640:	0800cd50 	.word	0x0800cd50

08007644 <__retarget_lock_init_recursive>:
 8007644:	4770      	bx	lr

08007646 <__retarget_lock_acquire_recursive>:
 8007646:	4770      	bx	lr

08007648 <__retarget_lock_release_recursive>:
 8007648:	4770      	bx	lr

0800764a <memcpy>:
 800764a:	440a      	add	r2, r1
 800764c:	4291      	cmp	r1, r2
 800764e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007652:	d100      	bne.n	8007656 <memcpy+0xc>
 8007654:	4770      	bx	lr
 8007656:	b510      	push	{r4, lr}
 8007658:	f811 4b01 	ldrb.w	r4, [r1], #1
 800765c:	4291      	cmp	r1, r2
 800765e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007662:	d1f9      	bne.n	8007658 <memcpy+0xe>
 8007664:	bd10      	pop	{r4, pc}
	...

08007668 <nanf>:
 8007668:	4800      	ldr	r0, [pc, #0]	; (800766c <nanf+0x4>)
 800766a:	4770      	bx	lr
 800766c:	7fc00000 	.word	0x7fc00000

08007670 <__assert_func>:
 8007670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007672:	4614      	mov	r4, r2
 8007674:	461a      	mov	r2, r3
 8007676:	4b09      	ldr	r3, [pc, #36]	; (800769c <__assert_func+0x2c>)
 8007678:	4605      	mov	r5, r0
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68d8      	ldr	r0, [r3, #12]
 800767e:	b14c      	cbz	r4, 8007694 <__assert_func+0x24>
 8007680:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <__assert_func+0x30>)
 8007682:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007686:	9100      	str	r1, [sp, #0]
 8007688:	462b      	mov	r3, r5
 800768a:	4906      	ldr	r1, [pc, #24]	; (80076a4 <__assert_func+0x34>)
 800768c:	f001 fdda 	bl	8009244 <fiprintf>
 8007690:	f001 feac 	bl	80093ec <abort>
 8007694:	4b04      	ldr	r3, [pc, #16]	; (80076a8 <__assert_func+0x38>)
 8007696:	461c      	mov	r4, r3
 8007698:	e7f3      	b.n	8007682 <__assert_func+0x12>
 800769a:	bf00      	nop
 800769c:	2000034c 	.word	0x2000034c
 80076a0:	0800ca7e 	.word	0x0800ca7e
 80076a4:	0800ca8b 	.word	0x0800ca8b
 80076a8:	0800cab9 	.word	0x0800cab9

080076ac <_free_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	4605      	mov	r5, r0
 80076b0:	2900      	cmp	r1, #0
 80076b2:	d040      	beq.n	8007736 <_free_r+0x8a>
 80076b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076b8:	1f0c      	subs	r4, r1, #4
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	bfb8      	it	lt
 80076be:	18e4      	addlt	r4, r4, r3
 80076c0:	f000 f8e4 	bl	800788c <__malloc_lock>
 80076c4:	4a1c      	ldr	r2, [pc, #112]	; (8007738 <_free_r+0x8c>)
 80076c6:	6813      	ldr	r3, [r2, #0]
 80076c8:	b933      	cbnz	r3, 80076d8 <_free_r+0x2c>
 80076ca:	6063      	str	r3, [r4, #4]
 80076cc:	6014      	str	r4, [r2, #0]
 80076ce:	4628      	mov	r0, r5
 80076d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076d4:	f000 b8e0 	b.w	8007898 <__malloc_unlock>
 80076d8:	42a3      	cmp	r3, r4
 80076da:	d908      	bls.n	80076ee <_free_r+0x42>
 80076dc:	6820      	ldr	r0, [r4, #0]
 80076de:	1821      	adds	r1, r4, r0
 80076e0:	428b      	cmp	r3, r1
 80076e2:	bf01      	itttt	eq
 80076e4:	6819      	ldreq	r1, [r3, #0]
 80076e6:	685b      	ldreq	r3, [r3, #4]
 80076e8:	1809      	addeq	r1, r1, r0
 80076ea:	6021      	streq	r1, [r4, #0]
 80076ec:	e7ed      	b.n	80076ca <_free_r+0x1e>
 80076ee:	461a      	mov	r2, r3
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	b10b      	cbz	r3, 80076f8 <_free_r+0x4c>
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	d9fa      	bls.n	80076ee <_free_r+0x42>
 80076f8:	6811      	ldr	r1, [r2, #0]
 80076fa:	1850      	adds	r0, r2, r1
 80076fc:	42a0      	cmp	r0, r4
 80076fe:	d10b      	bne.n	8007718 <_free_r+0x6c>
 8007700:	6820      	ldr	r0, [r4, #0]
 8007702:	4401      	add	r1, r0
 8007704:	1850      	adds	r0, r2, r1
 8007706:	4283      	cmp	r3, r0
 8007708:	6011      	str	r1, [r2, #0]
 800770a:	d1e0      	bne.n	80076ce <_free_r+0x22>
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	4408      	add	r0, r1
 8007712:	6010      	str	r0, [r2, #0]
 8007714:	6053      	str	r3, [r2, #4]
 8007716:	e7da      	b.n	80076ce <_free_r+0x22>
 8007718:	d902      	bls.n	8007720 <_free_r+0x74>
 800771a:	230c      	movs	r3, #12
 800771c:	602b      	str	r3, [r5, #0]
 800771e:	e7d6      	b.n	80076ce <_free_r+0x22>
 8007720:	6820      	ldr	r0, [r4, #0]
 8007722:	1821      	adds	r1, r4, r0
 8007724:	428b      	cmp	r3, r1
 8007726:	bf01      	itttt	eq
 8007728:	6819      	ldreq	r1, [r3, #0]
 800772a:	685b      	ldreq	r3, [r3, #4]
 800772c:	1809      	addeq	r1, r1, r0
 800772e:	6021      	streq	r1, [r4, #0]
 8007730:	6063      	str	r3, [r4, #4]
 8007732:	6054      	str	r4, [r2, #4]
 8007734:	e7cb      	b.n	80076ce <_free_r+0x22>
 8007736:	bd38      	pop	{r3, r4, r5, pc}
 8007738:	20001a00 	.word	0x20001a00

0800773c <malloc>:
 800773c:	4b02      	ldr	r3, [pc, #8]	; (8007748 <malloc+0xc>)
 800773e:	4601      	mov	r1, r0
 8007740:	6818      	ldr	r0, [r3, #0]
 8007742:	f000 b823 	b.w	800778c <_malloc_r>
 8007746:	bf00      	nop
 8007748:	2000034c 	.word	0x2000034c

0800774c <sbrk_aligned>:
 800774c:	b570      	push	{r4, r5, r6, lr}
 800774e:	4e0e      	ldr	r6, [pc, #56]	; (8007788 <sbrk_aligned+0x3c>)
 8007750:	460c      	mov	r4, r1
 8007752:	6831      	ldr	r1, [r6, #0]
 8007754:	4605      	mov	r5, r0
 8007756:	b911      	cbnz	r1, 800775e <sbrk_aligned+0x12>
 8007758:	f001 fe24 	bl	80093a4 <_sbrk_r>
 800775c:	6030      	str	r0, [r6, #0]
 800775e:	4621      	mov	r1, r4
 8007760:	4628      	mov	r0, r5
 8007762:	f001 fe1f 	bl	80093a4 <_sbrk_r>
 8007766:	1c43      	adds	r3, r0, #1
 8007768:	d00a      	beq.n	8007780 <sbrk_aligned+0x34>
 800776a:	1cc4      	adds	r4, r0, #3
 800776c:	f024 0403 	bic.w	r4, r4, #3
 8007770:	42a0      	cmp	r0, r4
 8007772:	d007      	beq.n	8007784 <sbrk_aligned+0x38>
 8007774:	1a21      	subs	r1, r4, r0
 8007776:	4628      	mov	r0, r5
 8007778:	f001 fe14 	bl	80093a4 <_sbrk_r>
 800777c:	3001      	adds	r0, #1
 800777e:	d101      	bne.n	8007784 <sbrk_aligned+0x38>
 8007780:	f04f 34ff 	mov.w	r4, #4294967295
 8007784:	4620      	mov	r0, r4
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	20001a04 	.word	0x20001a04

0800778c <_malloc_r>:
 800778c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007790:	1ccd      	adds	r5, r1, #3
 8007792:	f025 0503 	bic.w	r5, r5, #3
 8007796:	3508      	adds	r5, #8
 8007798:	2d0c      	cmp	r5, #12
 800779a:	bf38      	it	cc
 800779c:	250c      	movcc	r5, #12
 800779e:	2d00      	cmp	r5, #0
 80077a0:	4607      	mov	r7, r0
 80077a2:	db01      	blt.n	80077a8 <_malloc_r+0x1c>
 80077a4:	42a9      	cmp	r1, r5
 80077a6:	d905      	bls.n	80077b4 <_malloc_r+0x28>
 80077a8:	230c      	movs	r3, #12
 80077aa:	2600      	movs	r6, #0
 80077ac:	603b      	str	r3, [r7, #0]
 80077ae:	4630      	mov	r0, r6
 80077b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007888 <_malloc_r+0xfc>
 80077b8:	f000 f868 	bl	800788c <__malloc_lock>
 80077bc:	f8d8 3000 	ldr.w	r3, [r8]
 80077c0:	461c      	mov	r4, r3
 80077c2:	bb5c      	cbnz	r4, 800781c <_malloc_r+0x90>
 80077c4:	4629      	mov	r1, r5
 80077c6:	4638      	mov	r0, r7
 80077c8:	f7ff ffc0 	bl	800774c <sbrk_aligned>
 80077cc:	1c43      	adds	r3, r0, #1
 80077ce:	4604      	mov	r4, r0
 80077d0:	d155      	bne.n	800787e <_malloc_r+0xf2>
 80077d2:	f8d8 4000 	ldr.w	r4, [r8]
 80077d6:	4626      	mov	r6, r4
 80077d8:	2e00      	cmp	r6, #0
 80077da:	d145      	bne.n	8007868 <_malloc_r+0xdc>
 80077dc:	2c00      	cmp	r4, #0
 80077de:	d048      	beq.n	8007872 <_malloc_r+0xe6>
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	4631      	mov	r1, r6
 80077e4:	4638      	mov	r0, r7
 80077e6:	eb04 0903 	add.w	r9, r4, r3
 80077ea:	f001 fddb 	bl	80093a4 <_sbrk_r>
 80077ee:	4581      	cmp	r9, r0
 80077f0:	d13f      	bne.n	8007872 <_malloc_r+0xe6>
 80077f2:	6821      	ldr	r1, [r4, #0]
 80077f4:	4638      	mov	r0, r7
 80077f6:	1a6d      	subs	r5, r5, r1
 80077f8:	4629      	mov	r1, r5
 80077fa:	f7ff ffa7 	bl	800774c <sbrk_aligned>
 80077fe:	3001      	adds	r0, #1
 8007800:	d037      	beq.n	8007872 <_malloc_r+0xe6>
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	442b      	add	r3, r5
 8007806:	6023      	str	r3, [r4, #0]
 8007808:	f8d8 3000 	ldr.w	r3, [r8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d038      	beq.n	8007882 <_malloc_r+0xf6>
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	42a2      	cmp	r2, r4
 8007814:	d12b      	bne.n	800786e <_malloc_r+0xe2>
 8007816:	2200      	movs	r2, #0
 8007818:	605a      	str	r2, [r3, #4]
 800781a:	e00f      	b.n	800783c <_malloc_r+0xb0>
 800781c:	6822      	ldr	r2, [r4, #0]
 800781e:	1b52      	subs	r2, r2, r5
 8007820:	d41f      	bmi.n	8007862 <_malloc_r+0xd6>
 8007822:	2a0b      	cmp	r2, #11
 8007824:	d917      	bls.n	8007856 <_malloc_r+0xca>
 8007826:	1961      	adds	r1, r4, r5
 8007828:	42a3      	cmp	r3, r4
 800782a:	6025      	str	r5, [r4, #0]
 800782c:	bf18      	it	ne
 800782e:	6059      	strne	r1, [r3, #4]
 8007830:	6863      	ldr	r3, [r4, #4]
 8007832:	bf08      	it	eq
 8007834:	f8c8 1000 	streq.w	r1, [r8]
 8007838:	5162      	str	r2, [r4, r5]
 800783a:	604b      	str	r3, [r1, #4]
 800783c:	4638      	mov	r0, r7
 800783e:	f104 060b 	add.w	r6, r4, #11
 8007842:	f000 f829 	bl	8007898 <__malloc_unlock>
 8007846:	f026 0607 	bic.w	r6, r6, #7
 800784a:	1d23      	adds	r3, r4, #4
 800784c:	1af2      	subs	r2, r6, r3
 800784e:	d0ae      	beq.n	80077ae <_malloc_r+0x22>
 8007850:	1b9b      	subs	r3, r3, r6
 8007852:	50a3      	str	r3, [r4, r2]
 8007854:	e7ab      	b.n	80077ae <_malloc_r+0x22>
 8007856:	42a3      	cmp	r3, r4
 8007858:	6862      	ldr	r2, [r4, #4]
 800785a:	d1dd      	bne.n	8007818 <_malloc_r+0x8c>
 800785c:	f8c8 2000 	str.w	r2, [r8]
 8007860:	e7ec      	b.n	800783c <_malloc_r+0xb0>
 8007862:	4623      	mov	r3, r4
 8007864:	6864      	ldr	r4, [r4, #4]
 8007866:	e7ac      	b.n	80077c2 <_malloc_r+0x36>
 8007868:	4634      	mov	r4, r6
 800786a:	6876      	ldr	r6, [r6, #4]
 800786c:	e7b4      	b.n	80077d8 <_malloc_r+0x4c>
 800786e:	4613      	mov	r3, r2
 8007870:	e7cc      	b.n	800780c <_malloc_r+0x80>
 8007872:	230c      	movs	r3, #12
 8007874:	4638      	mov	r0, r7
 8007876:	603b      	str	r3, [r7, #0]
 8007878:	f000 f80e 	bl	8007898 <__malloc_unlock>
 800787c:	e797      	b.n	80077ae <_malloc_r+0x22>
 800787e:	6025      	str	r5, [r4, #0]
 8007880:	e7dc      	b.n	800783c <_malloc_r+0xb0>
 8007882:	605b      	str	r3, [r3, #4]
 8007884:	deff      	udf	#255	; 0xff
 8007886:	bf00      	nop
 8007888:	20001a00 	.word	0x20001a00

0800788c <__malloc_lock>:
 800788c:	4801      	ldr	r0, [pc, #4]	; (8007894 <__malloc_lock+0x8>)
 800788e:	f7ff beda 	b.w	8007646 <__retarget_lock_acquire_recursive>
 8007892:	bf00      	nop
 8007894:	200019fc 	.word	0x200019fc

08007898 <__malloc_unlock>:
 8007898:	4801      	ldr	r0, [pc, #4]	; (80078a0 <__malloc_unlock+0x8>)
 800789a:	f7ff bed5 	b.w	8007648 <__retarget_lock_release_recursive>
 800789e:	bf00      	nop
 80078a0:	200019fc 	.word	0x200019fc

080078a4 <sulp>:
 80078a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a8:	460f      	mov	r7, r1
 80078aa:	4690      	mov	r8, r2
 80078ac:	f002 fc7e 	bl	800a1ac <__ulp>
 80078b0:	4604      	mov	r4, r0
 80078b2:	460d      	mov	r5, r1
 80078b4:	f1b8 0f00 	cmp.w	r8, #0
 80078b8:	d011      	beq.n	80078de <sulp+0x3a>
 80078ba:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80078be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	dd0b      	ble.n	80078de <sulp+0x3a>
 80078c6:	2400      	movs	r4, #0
 80078c8:	051b      	lsls	r3, r3, #20
 80078ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80078ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80078d2:	4622      	mov	r2, r4
 80078d4:	462b      	mov	r3, r5
 80078d6:	f7f8 fdff 	bl	80004d8 <__aeabi_dmul>
 80078da:	4604      	mov	r4, r0
 80078dc:	460d      	mov	r5, r1
 80078de:	4620      	mov	r0, r4
 80078e0:	4629      	mov	r1, r5
 80078e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080078e8 <_strtod_l>:
 80078e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	b09f      	sub	sp, #124	; 0x7c
 80078ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80078f0:	2200      	movs	r2, #0
 80078f2:	4604      	mov	r4, r0
 80078f4:	921a      	str	r2, [sp, #104]	; 0x68
 80078f6:	460d      	mov	r5, r1
 80078f8:	f04f 0800 	mov.w	r8, #0
 80078fc:	f04f 0900 	mov.w	r9, #0
 8007900:	460a      	mov	r2, r1
 8007902:	9219      	str	r2, [sp, #100]	; 0x64
 8007904:	7811      	ldrb	r1, [r2, #0]
 8007906:	292b      	cmp	r1, #43	; 0x2b
 8007908:	d04a      	beq.n	80079a0 <_strtod_l+0xb8>
 800790a:	d838      	bhi.n	800797e <_strtod_l+0x96>
 800790c:	290d      	cmp	r1, #13
 800790e:	d832      	bhi.n	8007976 <_strtod_l+0x8e>
 8007910:	2908      	cmp	r1, #8
 8007912:	d832      	bhi.n	800797a <_strtod_l+0x92>
 8007914:	2900      	cmp	r1, #0
 8007916:	d03b      	beq.n	8007990 <_strtod_l+0xa8>
 8007918:	2200      	movs	r2, #0
 800791a:	920e      	str	r2, [sp, #56]	; 0x38
 800791c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800791e:	7832      	ldrb	r2, [r6, #0]
 8007920:	2a30      	cmp	r2, #48	; 0x30
 8007922:	f040 80b2 	bne.w	8007a8a <_strtod_l+0x1a2>
 8007926:	7872      	ldrb	r2, [r6, #1]
 8007928:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800792c:	2a58      	cmp	r2, #88	; 0x58
 800792e:	d16e      	bne.n	8007a0e <_strtod_l+0x126>
 8007930:	9302      	str	r3, [sp, #8]
 8007932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007934:	4620      	mov	r0, r4
 8007936:	9301      	str	r3, [sp, #4]
 8007938:	ab1a      	add	r3, sp, #104	; 0x68
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	4a8c      	ldr	r2, [pc, #560]	; (8007b70 <_strtod_l+0x288>)
 800793e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007940:	a919      	add	r1, sp, #100	; 0x64
 8007942:	f001 fdc3 	bl	80094cc <__gethex>
 8007946:	f010 070f 	ands.w	r7, r0, #15
 800794a:	4605      	mov	r5, r0
 800794c:	d005      	beq.n	800795a <_strtod_l+0x72>
 800794e:	2f06      	cmp	r7, #6
 8007950:	d128      	bne.n	80079a4 <_strtod_l+0xbc>
 8007952:	2300      	movs	r3, #0
 8007954:	3601      	adds	r6, #1
 8007956:	9619      	str	r6, [sp, #100]	; 0x64
 8007958:	930e      	str	r3, [sp, #56]	; 0x38
 800795a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800795c:	2b00      	cmp	r3, #0
 800795e:	f040 85a0 	bne.w	80084a2 <_strtod_l+0xbba>
 8007962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007964:	b1cb      	cbz	r3, 800799a <_strtod_l+0xb2>
 8007966:	4642      	mov	r2, r8
 8007968:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800796c:	4610      	mov	r0, r2
 800796e:	4619      	mov	r1, r3
 8007970:	b01f      	add	sp, #124	; 0x7c
 8007972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007976:	2920      	cmp	r1, #32
 8007978:	d1ce      	bne.n	8007918 <_strtod_l+0x30>
 800797a:	3201      	adds	r2, #1
 800797c:	e7c1      	b.n	8007902 <_strtod_l+0x1a>
 800797e:	292d      	cmp	r1, #45	; 0x2d
 8007980:	d1ca      	bne.n	8007918 <_strtod_l+0x30>
 8007982:	2101      	movs	r1, #1
 8007984:	910e      	str	r1, [sp, #56]	; 0x38
 8007986:	1c51      	adds	r1, r2, #1
 8007988:	9119      	str	r1, [sp, #100]	; 0x64
 800798a:	7852      	ldrb	r2, [r2, #1]
 800798c:	2a00      	cmp	r2, #0
 800798e:	d1c5      	bne.n	800791c <_strtod_l+0x34>
 8007990:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007992:	9519      	str	r5, [sp, #100]	; 0x64
 8007994:	2b00      	cmp	r3, #0
 8007996:	f040 8582 	bne.w	800849e <_strtod_l+0xbb6>
 800799a:	4642      	mov	r2, r8
 800799c:	464b      	mov	r3, r9
 800799e:	e7e5      	b.n	800796c <_strtod_l+0x84>
 80079a0:	2100      	movs	r1, #0
 80079a2:	e7ef      	b.n	8007984 <_strtod_l+0x9c>
 80079a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80079a6:	b13a      	cbz	r2, 80079b8 <_strtod_l+0xd0>
 80079a8:	2135      	movs	r1, #53	; 0x35
 80079aa:	a81c      	add	r0, sp, #112	; 0x70
 80079ac:	f002 fcea 	bl	800a384 <__copybits>
 80079b0:	4620      	mov	r0, r4
 80079b2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80079b4:	f002 f8ce 	bl	8009b54 <_Bfree>
 80079b8:	3f01      	subs	r7, #1
 80079ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80079bc:	2f04      	cmp	r7, #4
 80079be:	d806      	bhi.n	80079ce <_strtod_l+0xe6>
 80079c0:	e8df f007 	tbb	[pc, r7]
 80079c4:	201d0314 	.word	0x201d0314
 80079c8:	14          	.byte	0x14
 80079c9:	00          	.byte	0x00
 80079ca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80079ce:	05e9      	lsls	r1, r5, #23
 80079d0:	bf48      	it	mi
 80079d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80079d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079da:	0d1b      	lsrs	r3, r3, #20
 80079dc:	051b      	lsls	r3, r3, #20
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1bb      	bne.n	800795a <_strtod_l+0x72>
 80079e2:	f7ff fe05 	bl	80075f0 <__errno>
 80079e6:	2322      	movs	r3, #34	; 0x22
 80079e8:	6003      	str	r3, [r0, #0]
 80079ea:	e7b6      	b.n	800795a <_strtod_l+0x72>
 80079ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80079f0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80079f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80079f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80079fc:	e7e7      	b.n	80079ce <_strtod_l+0xe6>
 80079fe:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007b74 <_strtod_l+0x28c>
 8007a02:	e7e4      	b.n	80079ce <_strtod_l+0xe6>
 8007a04:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007a08:	f04f 38ff 	mov.w	r8, #4294967295
 8007a0c:	e7df      	b.n	80079ce <_strtod_l+0xe6>
 8007a0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	9219      	str	r2, [sp, #100]	; 0x64
 8007a14:	785b      	ldrb	r3, [r3, #1]
 8007a16:	2b30      	cmp	r3, #48	; 0x30
 8007a18:	d0f9      	beq.n	8007a0e <_strtod_l+0x126>
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d09d      	beq.n	800795a <_strtod_l+0x72>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	f04f 0a00 	mov.w	sl, #0
 8007a24:	220a      	movs	r2, #10
 8007a26:	46d3      	mov	fp, sl
 8007a28:	9305      	str	r3, [sp, #20]
 8007a2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a2c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007a30:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a32:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007a34:	7806      	ldrb	r6, [r0, #0]
 8007a36:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007a3a:	b2d9      	uxtb	r1, r3
 8007a3c:	2909      	cmp	r1, #9
 8007a3e:	d926      	bls.n	8007a8e <_strtod_l+0x1a6>
 8007a40:	2201      	movs	r2, #1
 8007a42:	494d      	ldr	r1, [pc, #308]	; (8007b78 <_strtod_l+0x290>)
 8007a44:	f001 fc9b 	bl	800937e <strncmp>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d030      	beq.n	8007aae <_strtod_l+0x1c6>
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	4632      	mov	r2, r6
 8007a50:	4603      	mov	r3, r0
 8007a52:	465e      	mov	r6, fp
 8007a54:	9008      	str	r0, [sp, #32]
 8007a56:	2a65      	cmp	r2, #101	; 0x65
 8007a58:	d001      	beq.n	8007a5e <_strtod_l+0x176>
 8007a5a:	2a45      	cmp	r2, #69	; 0x45
 8007a5c:	d113      	bne.n	8007a86 <_strtod_l+0x19e>
 8007a5e:	b91e      	cbnz	r6, 8007a68 <_strtod_l+0x180>
 8007a60:	9a05      	ldr	r2, [sp, #20]
 8007a62:	4302      	orrs	r2, r0
 8007a64:	d094      	beq.n	8007990 <_strtod_l+0xa8>
 8007a66:	2600      	movs	r6, #0
 8007a68:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007a6a:	1c6a      	adds	r2, r5, #1
 8007a6c:	9219      	str	r2, [sp, #100]	; 0x64
 8007a6e:	786a      	ldrb	r2, [r5, #1]
 8007a70:	2a2b      	cmp	r2, #43	; 0x2b
 8007a72:	d074      	beq.n	8007b5e <_strtod_l+0x276>
 8007a74:	2a2d      	cmp	r2, #45	; 0x2d
 8007a76:	d078      	beq.n	8007b6a <_strtod_l+0x282>
 8007a78:	f04f 0c00 	mov.w	ip, #0
 8007a7c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007a80:	2909      	cmp	r1, #9
 8007a82:	d97f      	bls.n	8007b84 <_strtod_l+0x29c>
 8007a84:	9519      	str	r5, [sp, #100]	; 0x64
 8007a86:	2700      	movs	r7, #0
 8007a88:	e09e      	b.n	8007bc8 <_strtod_l+0x2e0>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e7c8      	b.n	8007a20 <_strtod_l+0x138>
 8007a8e:	f1bb 0f08 	cmp.w	fp, #8
 8007a92:	bfd8      	it	le
 8007a94:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007a96:	f100 0001 	add.w	r0, r0, #1
 8007a9a:	bfd6      	itet	le
 8007a9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007aa0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007aa4:	930a      	strle	r3, [sp, #40]	; 0x28
 8007aa6:	f10b 0b01 	add.w	fp, fp, #1
 8007aaa:	9019      	str	r0, [sp, #100]	; 0x64
 8007aac:	e7c1      	b.n	8007a32 <_strtod_l+0x14a>
 8007aae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ab0:	1c5a      	adds	r2, r3, #1
 8007ab2:	9219      	str	r2, [sp, #100]	; 0x64
 8007ab4:	785a      	ldrb	r2, [r3, #1]
 8007ab6:	f1bb 0f00 	cmp.w	fp, #0
 8007aba:	d037      	beq.n	8007b2c <_strtod_l+0x244>
 8007abc:	465e      	mov	r6, fp
 8007abe:	9008      	str	r0, [sp, #32]
 8007ac0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007ac4:	2b09      	cmp	r3, #9
 8007ac6:	d912      	bls.n	8007aee <_strtod_l+0x206>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e7c4      	b.n	8007a56 <_strtod_l+0x16e>
 8007acc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ace:	3001      	adds	r0, #1
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	9219      	str	r2, [sp, #100]	; 0x64
 8007ad4:	785a      	ldrb	r2, [r3, #1]
 8007ad6:	2a30      	cmp	r2, #48	; 0x30
 8007ad8:	d0f8      	beq.n	8007acc <_strtod_l+0x1e4>
 8007ada:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007ade:	2b08      	cmp	r3, #8
 8007ae0:	f200 84e4 	bhi.w	80084ac <_strtod_l+0xbc4>
 8007ae4:	9008      	str	r0, [sp, #32]
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	4606      	mov	r6, r0
 8007aea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007aec:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aee:	3a30      	subs	r2, #48	; 0x30
 8007af0:	f100 0301 	add.w	r3, r0, #1
 8007af4:	d014      	beq.n	8007b20 <_strtod_l+0x238>
 8007af6:	9908      	ldr	r1, [sp, #32]
 8007af8:	eb00 0c06 	add.w	ip, r0, r6
 8007afc:	4419      	add	r1, r3
 8007afe:	9108      	str	r1, [sp, #32]
 8007b00:	4633      	mov	r3, r6
 8007b02:	210a      	movs	r1, #10
 8007b04:	4563      	cmp	r3, ip
 8007b06:	d113      	bne.n	8007b30 <_strtod_l+0x248>
 8007b08:	1833      	adds	r3, r6, r0
 8007b0a:	2b08      	cmp	r3, #8
 8007b0c:	f106 0601 	add.w	r6, r6, #1
 8007b10:	4406      	add	r6, r0
 8007b12:	dc1a      	bgt.n	8007b4a <_strtod_l+0x262>
 8007b14:	230a      	movs	r3, #10
 8007b16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b18:	fb03 2301 	mla	r3, r3, r1, r2
 8007b1c:	930a      	str	r3, [sp, #40]	; 0x28
 8007b1e:	2300      	movs	r3, #0
 8007b20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b22:	4618      	mov	r0, r3
 8007b24:	1c51      	adds	r1, r2, #1
 8007b26:	9119      	str	r1, [sp, #100]	; 0x64
 8007b28:	7852      	ldrb	r2, [r2, #1]
 8007b2a:	e7c9      	b.n	8007ac0 <_strtod_l+0x1d8>
 8007b2c:	4658      	mov	r0, fp
 8007b2e:	e7d2      	b.n	8007ad6 <_strtod_l+0x1ee>
 8007b30:	2b08      	cmp	r3, #8
 8007b32:	f103 0301 	add.w	r3, r3, #1
 8007b36:	dc03      	bgt.n	8007b40 <_strtod_l+0x258>
 8007b38:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007b3a:	434f      	muls	r7, r1
 8007b3c:	970a      	str	r7, [sp, #40]	; 0x28
 8007b3e:	e7e1      	b.n	8007b04 <_strtod_l+0x21c>
 8007b40:	2b10      	cmp	r3, #16
 8007b42:	bfd8      	it	le
 8007b44:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007b48:	e7dc      	b.n	8007b04 <_strtod_l+0x21c>
 8007b4a:	2e10      	cmp	r6, #16
 8007b4c:	bfdc      	itt	le
 8007b4e:	230a      	movle	r3, #10
 8007b50:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007b54:	e7e3      	b.n	8007b1e <_strtod_l+0x236>
 8007b56:	2300      	movs	r3, #0
 8007b58:	9308      	str	r3, [sp, #32]
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e780      	b.n	8007a60 <_strtod_l+0x178>
 8007b5e:	f04f 0c00 	mov.w	ip, #0
 8007b62:	1caa      	adds	r2, r5, #2
 8007b64:	9219      	str	r2, [sp, #100]	; 0x64
 8007b66:	78aa      	ldrb	r2, [r5, #2]
 8007b68:	e788      	b.n	8007a7c <_strtod_l+0x194>
 8007b6a:	f04f 0c01 	mov.w	ip, #1
 8007b6e:	e7f8      	b.n	8007b62 <_strtod_l+0x27a>
 8007b70:	0800cac8 	.word	0x0800cac8
 8007b74:	7ff00000 	.word	0x7ff00000
 8007b78:	0800caba 	.word	0x0800caba
 8007b7c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b7e:	1c51      	adds	r1, r2, #1
 8007b80:	9119      	str	r1, [sp, #100]	; 0x64
 8007b82:	7852      	ldrb	r2, [r2, #1]
 8007b84:	2a30      	cmp	r2, #48	; 0x30
 8007b86:	d0f9      	beq.n	8007b7c <_strtod_l+0x294>
 8007b88:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007b8c:	2908      	cmp	r1, #8
 8007b8e:	f63f af7a 	bhi.w	8007a86 <_strtod_l+0x19e>
 8007b92:	3a30      	subs	r2, #48	; 0x30
 8007b94:	9209      	str	r2, [sp, #36]	; 0x24
 8007b96:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b98:	920c      	str	r2, [sp, #48]	; 0x30
 8007b9a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b9c:	1c57      	adds	r7, r2, #1
 8007b9e:	9719      	str	r7, [sp, #100]	; 0x64
 8007ba0:	7852      	ldrb	r2, [r2, #1]
 8007ba2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007ba6:	f1be 0f09 	cmp.w	lr, #9
 8007baa:	d938      	bls.n	8007c1e <_strtod_l+0x336>
 8007bac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007bae:	1a7f      	subs	r7, r7, r1
 8007bb0:	2f08      	cmp	r7, #8
 8007bb2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007bb6:	dc03      	bgt.n	8007bc0 <_strtod_l+0x2d8>
 8007bb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bba:	428f      	cmp	r7, r1
 8007bbc:	bfa8      	it	ge
 8007bbe:	460f      	movge	r7, r1
 8007bc0:	f1bc 0f00 	cmp.w	ip, #0
 8007bc4:	d000      	beq.n	8007bc8 <_strtod_l+0x2e0>
 8007bc6:	427f      	negs	r7, r7
 8007bc8:	2e00      	cmp	r6, #0
 8007bca:	d14f      	bne.n	8007c6c <_strtod_l+0x384>
 8007bcc:	9905      	ldr	r1, [sp, #20]
 8007bce:	4301      	orrs	r1, r0
 8007bd0:	f47f aec3 	bne.w	800795a <_strtod_l+0x72>
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f47f aedb 	bne.w	8007990 <_strtod_l+0xa8>
 8007bda:	2a69      	cmp	r2, #105	; 0x69
 8007bdc:	d029      	beq.n	8007c32 <_strtod_l+0x34a>
 8007bde:	dc26      	bgt.n	8007c2e <_strtod_l+0x346>
 8007be0:	2a49      	cmp	r2, #73	; 0x49
 8007be2:	d026      	beq.n	8007c32 <_strtod_l+0x34a>
 8007be4:	2a4e      	cmp	r2, #78	; 0x4e
 8007be6:	f47f aed3 	bne.w	8007990 <_strtod_l+0xa8>
 8007bea:	499a      	ldr	r1, [pc, #616]	; (8007e54 <_strtod_l+0x56c>)
 8007bec:	a819      	add	r0, sp, #100	; 0x64
 8007bee:	f001 feaf 	bl	8009950 <__match>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	f43f aecc 	beq.w	8007990 <_strtod_l+0xa8>
 8007bf8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	2b28      	cmp	r3, #40	; 0x28
 8007bfe:	d12f      	bne.n	8007c60 <_strtod_l+0x378>
 8007c00:	4995      	ldr	r1, [pc, #596]	; (8007e58 <_strtod_l+0x570>)
 8007c02:	aa1c      	add	r2, sp, #112	; 0x70
 8007c04:	a819      	add	r0, sp, #100	; 0x64
 8007c06:	f001 feb7 	bl	8009978 <__hexnan>
 8007c0a:	2805      	cmp	r0, #5
 8007c0c:	d128      	bne.n	8007c60 <_strtod_l+0x378>
 8007c0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c10:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007c14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007c18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007c1c:	e69d      	b.n	800795a <_strtod_l+0x72>
 8007c1e:	210a      	movs	r1, #10
 8007c20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007c22:	fb01 2107 	mla	r1, r1, r7, r2
 8007c26:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007c2a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c2c:	e7b5      	b.n	8007b9a <_strtod_l+0x2b2>
 8007c2e:	2a6e      	cmp	r2, #110	; 0x6e
 8007c30:	e7d9      	b.n	8007be6 <_strtod_l+0x2fe>
 8007c32:	498a      	ldr	r1, [pc, #552]	; (8007e5c <_strtod_l+0x574>)
 8007c34:	a819      	add	r0, sp, #100	; 0x64
 8007c36:	f001 fe8b 	bl	8009950 <__match>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	f43f aea8 	beq.w	8007990 <_strtod_l+0xa8>
 8007c40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c42:	4987      	ldr	r1, [pc, #540]	; (8007e60 <_strtod_l+0x578>)
 8007c44:	3b01      	subs	r3, #1
 8007c46:	a819      	add	r0, sp, #100	; 0x64
 8007c48:	9319      	str	r3, [sp, #100]	; 0x64
 8007c4a:	f001 fe81 	bl	8009950 <__match>
 8007c4e:	b910      	cbnz	r0, 8007c56 <_strtod_l+0x36e>
 8007c50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c52:	3301      	adds	r3, #1
 8007c54:	9319      	str	r3, [sp, #100]	; 0x64
 8007c56:	f04f 0800 	mov.w	r8, #0
 8007c5a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007e64 <_strtod_l+0x57c>
 8007c5e:	e67c      	b.n	800795a <_strtod_l+0x72>
 8007c60:	4881      	ldr	r0, [pc, #516]	; (8007e68 <_strtod_l+0x580>)
 8007c62:	f001 fbbd 	bl	80093e0 <nan>
 8007c66:	4680      	mov	r8, r0
 8007c68:	4689      	mov	r9, r1
 8007c6a:	e676      	b.n	800795a <_strtod_l+0x72>
 8007c6c:	9b08      	ldr	r3, [sp, #32]
 8007c6e:	f1bb 0f00 	cmp.w	fp, #0
 8007c72:	bf08      	it	eq
 8007c74:	46b3      	moveq	fp, r6
 8007c76:	1afb      	subs	r3, r7, r3
 8007c78:	2e10      	cmp	r6, #16
 8007c7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c7c:	4635      	mov	r5, r6
 8007c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c80:	bfa8      	it	ge
 8007c82:	2510      	movge	r5, #16
 8007c84:	f7f8 fbae 	bl	80003e4 <__aeabi_ui2d>
 8007c88:	2e09      	cmp	r6, #9
 8007c8a:	4680      	mov	r8, r0
 8007c8c:	4689      	mov	r9, r1
 8007c8e:	dd13      	ble.n	8007cb8 <_strtod_l+0x3d0>
 8007c90:	4b76      	ldr	r3, [pc, #472]	; (8007e6c <_strtod_l+0x584>)
 8007c92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007c96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007c9a:	f7f8 fc1d 	bl	80004d8 <__aeabi_dmul>
 8007c9e:	4680      	mov	r8, r0
 8007ca0:	4650      	mov	r0, sl
 8007ca2:	4689      	mov	r9, r1
 8007ca4:	f7f8 fb9e 	bl	80003e4 <__aeabi_ui2d>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4640      	mov	r0, r8
 8007cae:	4649      	mov	r1, r9
 8007cb0:	f7f8 fa5c 	bl	800016c <__adddf3>
 8007cb4:	4680      	mov	r8, r0
 8007cb6:	4689      	mov	r9, r1
 8007cb8:	2e0f      	cmp	r6, #15
 8007cba:	dc36      	bgt.n	8007d2a <_strtod_l+0x442>
 8007cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f43f ae4b 	beq.w	800795a <_strtod_l+0x72>
 8007cc4:	dd22      	ble.n	8007d0c <_strtod_l+0x424>
 8007cc6:	2b16      	cmp	r3, #22
 8007cc8:	dc09      	bgt.n	8007cde <_strtod_l+0x3f6>
 8007cca:	4968      	ldr	r1, [pc, #416]	; (8007e6c <_strtod_l+0x584>)
 8007ccc:	4642      	mov	r2, r8
 8007cce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cd2:	464b      	mov	r3, r9
 8007cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cd8:	f7f8 fbfe 	bl	80004d8 <__aeabi_dmul>
 8007cdc:	e7c3      	b.n	8007c66 <_strtod_l+0x37e>
 8007cde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ce0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	db20      	blt.n	8007d2a <_strtod_l+0x442>
 8007ce8:	4c60      	ldr	r4, [pc, #384]	; (8007e6c <_strtod_l+0x584>)
 8007cea:	f1c6 060f 	rsb	r6, r6, #15
 8007cee:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007cf2:	4642      	mov	r2, r8
 8007cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cf8:	464b      	mov	r3, r9
 8007cfa:	f7f8 fbed 	bl	80004d8 <__aeabi_dmul>
 8007cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d00:	1b9e      	subs	r6, r3, r6
 8007d02:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007d06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d0a:	e7e5      	b.n	8007cd8 <_strtod_l+0x3f0>
 8007d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d0e:	3316      	adds	r3, #22
 8007d10:	db0b      	blt.n	8007d2a <_strtod_l+0x442>
 8007d12:	9b08      	ldr	r3, [sp, #32]
 8007d14:	4640      	mov	r0, r8
 8007d16:	1bdf      	subs	r7, r3, r7
 8007d18:	4b54      	ldr	r3, [pc, #336]	; (8007e6c <_strtod_l+0x584>)
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d24:	f7f8 fd02 	bl	800072c <__aeabi_ddiv>
 8007d28:	e79d      	b.n	8007c66 <_strtod_l+0x37e>
 8007d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2c:	1b75      	subs	r5, r6, r5
 8007d2e:	441d      	add	r5, r3
 8007d30:	2d00      	cmp	r5, #0
 8007d32:	dd70      	ble.n	8007e16 <_strtod_l+0x52e>
 8007d34:	f015 030f 	ands.w	r3, r5, #15
 8007d38:	d00a      	beq.n	8007d50 <_strtod_l+0x468>
 8007d3a:	494c      	ldr	r1, [pc, #304]	; (8007e6c <_strtod_l+0x584>)
 8007d3c:	4642      	mov	r2, r8
 8007d3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d46:	464b      	mov	r3, r9
 8007d48:	f7f8 fbc6 	bl	80004d8 <__aeabi_dmul>
 8007d4c:	4680      	mov	r8, r0
 8007d4e:	4689      	mov	r9, r1
 8007d50:	f035 050f 	bics.w	r5, r5, #15
 8007d54:	d04d      	beq.n	8007df2 <_strtod_l+0x50a>
 8007d56:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007d5a:	dd22      	ble.n	8007da2 <_strtod_l+0x4ba>
 8007d5c:	2600      	movs	r6, #0
 8007d5e:	46b3      	mov	fp, r6
 8007d60:	960b      	str	r6, [sp, #44]	; 0x2c
 8007d62:	9608      	str	r6, [sp, #32]
 8007d64:	2322      	movs	r3, #34	; 0x22
 8007d66:	f04f 0800 	mov.w	r8, #0
 8007d6a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007e64 <_strtod_l+0x57c>
 8007d6e:	6023      	str	r3, [r4, #0]
 8007d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f43f adf1 	beq.w	800795a <_strtod_l+0x72>
 8007d78:	4620      	mov	r0, r4
 8007d7a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d7c:	f001 feea 	bl	8009b54 <_Bfree>
 8007d80:	4620      	mov	r0, r4
 8007d82:	9908      	ldr	r1, [sp, #32]
 8007d84:	f001 fee6 	bl	8009b54 <_Bfree>
 8007d88:	4659      	mov	r1, fp
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f001 fee2 	bl	8009b54 <_Bfree>
 8007d90:	4620      	mov	r0, r4
 8007d92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d94:	f001 fede 	bl	8009b54 <_Bfree>
 8007d98:	4631      	mov	r1, r6
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f001 feda 	bl	8009b54 <_Bfree>
 8007da0:	e5db      	b.n	800795a <_strtod_l+0x72>
 8007da2:	4b33      	ldr	r3, [pc, #204]	; (8007e70 <_strtod_l+0x588>)
 8007da4:	4640      	mov	r0, r8
 8007da6:	9305      	str	r3, [sp, #20]
 8007da8:	2300      	movs	r3, #0
 8007daa:	4649      	mov	r1, r9
 8007dac:	469a      	mov	sl, r3
 8007dae:	112d      	asrs	r5, r5, #4
 8007db0:	2d01      	cmp	r5, #1
 8007db2:	dc21      	bgt.n	8007df8 <_strtod_l+0x510>
 8007db4:	b10b      	cbz	r3, 8007dba <_strtod_l+0x4d2>
 8007db6:	4680      	mov	r8, r0
 8007db8:	4689      	mov	r9, r1
 8007dba:	492d      	ldr	r1, [pc, #180]	; (8007e70 <_strtod_l+0x588>)
 8007dbc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007dc0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007dc4:	4642      	mov	r2, r8
 8007dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dca:	464b      	mov	r3, r9
 8007dcc:	f7f8 fb84 	bl	80004d8 <__aeabi_dmul>
 8007dd0:	4b24      	ldr	r3, [pc, #144]	; (8007e64 <_strtod_l+0x57c>)
 8007dd2:	460a      	mov	r2, r1
 8007dd4:	400b      	ands	r3, r1
 8007dd6:	4927      	ldr	r1, [pc, #156]	; (8007e74 <_strtod_l+0x58c>)
 8007dd8:	4680      	mov	r8, r0
 8007dda:	428b      	cmp	r3, r1
 8007ddc:	d8be      	bhi.n	8007d5c <_strtod_l+0x474>
 8007dde:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007de2:	428b      	cmp	r3, r1
 8007de4:	bf86      	itte	hi
 8007de6:	f04f 38ff 	movhi.w	r8, #4294967295
 8007dea:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007e78 <_strtod_l+0x590>
 8007dee:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007df2:	2300      	movs	r3, #0
 8007df4:	9305      	str	r3, [sp, #20]
 8007df6:	e07b      	b.n	8007ef0 <_strtod_l+0x608>
 8007df8:	07ea      	lsls	r2, r5, #31
 8007dfa:	d505      	bpl.n	8007e08 <_strtod_l+0x520>
 8007dfc:	9b05      	ldr	r3, [sp, #20]
 8007dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e02:	f7f8 fb69 	bl	80004d8 <__aeabi_dmul>
 8007e06:	2301      	movs	r3, #1
 8007e08:	9a05      	ldr	r2, [sp, #20]
 8007e0a:	f10a 0a01 	add.w	sl, sl, #1
 8007e0e:	3208      	adds	r2, #8
 8007e10:	106d      	asrs	r5, r5, #1
 8007e12:	9205      	str	r2, [sp, #20]
 8007e14:	e7cc      	b.n	8007db0 <_strtod_l+0x4c8>
 8007e16:	d0ec      	beq.n	8007df2 <_strtod_l+0x50a>
 8007e18:	426d      	negs	r5, r5
 8007e1a:	f015 020f 	ands.w	r2, r5, #15
 8007e1e:	d00a      	beq.n	8007e36 <_strtod_l+0x54e>
 8007e20:	4b12      	ldr	r3, [pc, #72]	; (8007e6c <_strtod_l+0x584>)
 8007e22:	4640      	mov	r0, r8
 8007e24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e28:	4649      	mov	r1, r9
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	f7f8 fc7d 	bl	800072c <__aeabi_ddiv>
 8007e32:	4680      	mov	r8, r0
 8007e34:	4689      	mov	r9, r1
 8007e36:	112d      	asrs	r5, r5, #4
 8007e38:	d0db      	beq.n	8007df2 <_strtod_l+0x50a>
 8007e3a:	2d1f      	cmp	r5, #31
 8007e3c:	dd1e      	ble.n	8007e7c <_strtod_l+0x594>
 8007e3e:	2600      	movs	r6, #0
 8007e40:	46b3      	mov	fp, r6
 8007e42:	960b      	str	r6, [sp, #44]	; 0x2c
 8007e44:	9608      	str	r6, [sp, #32]
 8007e46:	2322      	movs	r3, #34	; 0x22
 8007e48:	f04f 0800 	mov.w	r8, #0
 8007e4c:	f04f 0900 	mov.w	r9, #0
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	e78d      	b.n	8007d70 <_strtod_l+0x488>
 8007e54:	0800cac5 	.word	0x0800cac5
 8007e58:	0800cadc 	.word	0x0800cadc
 8007e5c:	0800cabc 	.word	0x0800cabc
 8007e60:	0800cabf 	.word	0x0800cabf
 8007e64:	7ff00000 	.word	0x7ff00000
 8007e68:	0800cab9 	.word	0x0800cab9
 8007e6c:	0800cc78 	.word	0x0800cc78
 8007e70:	0800cc50 	.word	0x0800cc50
 8007e74:	7ca00000 	.word	0x7ca00000
 8007e78:	7fefffff 	.word	0x7fefffff
 8007e7c:	f015 0310 	ands.w	r3, r5, #16
 8007e80:	bf18      	it	ne
 8007e82:	236a      	movne	r3, #106	; 0x6a
 8007e84:	4640      	mov	r0, r8
 8007e86:	9305      	str	r3, [sp, #20]
 8007e88:	4649      	mov	r1, r9
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8008158 <_strtod_l+0x870>
 8007e90:	07ea      	lsls	r2, r5, #31
 8007e92:	d504      	bpl.n	8007e9e <_strtod_l+0x5b6>
 8007e94:	e9da 2300 	ldrd	r2, r3, [sl]
 8007e98:	f7f8 fb1e 	bl	80004d8 <__aeabi_dmul>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	106d      	asrs	r5, r5, #1
 8007ea0:	f10a 0a08 	add.w	sl, sl, #8
 8007ea4:	d1f4      	bne.n	8007e90 <_strtod_l+0x5a8>
 8007ea6:	b10b      	cbz	r3, 8007eac <_strtod_l+0x5c4>
 8007ea8:	4680      	mov	r8, r0
 8007eaa:	4689      	mov	r9, r1
 8007eac:	9b05      	ldr	r3, [sp, #20]
 8007eae:	b1bb      	cbz	r3, 8007ee0 <_strtod_l+0x5f8>
 8007eb0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007eb4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	4649      	mov	r1, r9
 8007ebc:	dd10      	ble.n	8007ee0 <_strtod_l+0x5f8>
 8007ebe:	2b1f      	cmp	r3, #31
 8007ec0:	f340 8128 	ble.w	8008114 <_strtod_l+0x82c>
 8007ec4:	2b34      	cmp	r3, #52	; 0x34
 8007ec6:	bfd8      	it	le
 8007ec8:	f04f 33ff 	movle.w	r3, #4294967295
 8007ecc:	f04f 0800 	mov.w	r8, #0
 8007ed0:	bfcf      	iteee	gt
 8007ed2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007ed6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007eda:	4093      	lslle	r3, r2
 8007edc:	ea03 0901 	andle.w	r9, r3, r1
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	f7f8 fd5e 	bl	80009a8 <__aeabi_dcmpeq>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d1a6      	bne.n	8007e3e <_strtod_l+0x556>
 8007ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef2:	465a      	mov	r2, fp
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	4633      	mov	r3, r6
 8007efa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007efc:	f001 fe92 	bl	8009c24 <__s2b>
 8007f00:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f02:	2800      	cmp	r0, #0
 8007f04:	f43f af2a 	beq.w	8007d5c <_strtod_l+0x474>
 8007f08:	2600      	movs	r6, #0
 8007f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f0c:	9b08      	ldr	r3, [sp, #32]
 8007f0e:	2a00      	cmp	r2, #0
 8007f10:	eba3 0307 	sub.w	r3, r3, r7
 8007f14:	bfa8      	it	ge
 8007f16:	2300      	movge	r3, #0
 8007f18:	46b3      	mov	fp, r6
 8007f1a:	9312      	str	r3, [sp, #72]	; 0x48
 8007f1c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007f20:	9316      	str	r3, [sp, #88]	; 0x58
 8007f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f24:	4620      	mov	r0, r4
 8007f26:	6859      	ldr	r1, [r3, #4]
 8007f28:	f001 fdd4 	bl	8009ad4 <_Balloc>
 8007f2c:	9008      	str	r0, [sp, #32]
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	f43f af18 	beq.w	8007d64 <_strtod_l+0x47c>
 8007f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f36:	300c      	adds	r0, #12
 8007f38:	691a      	ldr	r2, [r3, #16]
 8007f3a:	f103 010c 	add.w	r1, r3, #12
 8007f3e:	3202      	adds	r2, #2
 8007f40:	0092      	lsls	r2, r2, #2
 8007f42:	f7ff fb82 	bl	800764a <memcpy>
 8007f46:	ab1c      	add	r3, sp, #112	; 0x70
 8007f48:	9301      	str	r3, [sp, #4]
 8007f4a:	ab1b      	add	r3, sp, #108	; 0x6c
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	4642      	mov	r2, r8
 8007f50:	464b      	mov	r3, r9
 8007f52:	4620      	mov	r0, r4
 8007f54:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007f58:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007f5c:	f002 f98e 	bl	800a27c <__d2b>
 8007f60:	901a      	str	r0, [sp, #104]	; 0x68
 8007f62:	2800      	cmp	r0, #0
 8007f64:	f43f aefe 	beq.w	8007d64 <_strtod_l+0x47c>
 8007f68:	2101      	movs	r1, #1
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f001 fef2 	bl	8009d54 <__i2b>
 8007f70:	4683      	mov	fp, r0
 8007f72:	2800      	cmp	r0, #0
 8007f74:	f43f aef6 	beq.w	8007d64 <_strtod_l+0x47c>
 8007f78:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007f7a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f7c:	2f00      	cmp	r7, #0
 8007f7e:	bfab      	itete	ge
 8007f80:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007f82:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007f84:	eb07 0a03 	addge.w	sl, r7, r3
 8007f88:	1bdd      	sublt	r5, r3, r7
 8007f8a:	9b05      	ldr	r3, [sp, #20]
 8007f8c:	bfa8      	it	ge
 8007f8e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007f90:	eba7 0703 	sub.w	r7, r7, r3
 8007f94:	4417      	add	r7, r2
 8007f96:	4b71      	ldr	r3, [pc, #452]	; (800815c <_strtod_l+0x874>)
 8007f98:	f107 37ff 	add.w	r7, r7, #4294967295
 8007f9c:	bfb8      	it	lt
 8007f9e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007fa2:	429f      	cmp	r7, r3
 8007fa4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007fa8:	f280 80c7 	bge.w	800813a <_strtod_l+0x852>
 8007fac:	1bdb      	subs	r3, r3, r7
 8007fae:	2b1f      	cmp	r3, #31
 8007fb0:	f04f 0101 	mov.w	r1, #1
 8007fb4:	eba2 0203 	sub.w	r2, r2, r3
 8007fb8:	f300 80b3 	bgt.w	8008122 <_strtod_l+0x83a>
 8007fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007fc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	9310      	str	r3, [sp, #64]	; 0x40
 8007fc6:	eb0a 0702 	add.w	r7, sl, r2
 8007fca:	9b05      	ldr	r3, [sp, #20]
 8007fcc:	45ba      	cmp	sl, r7
 8007fce:	4415      	add	r5, r2
 8007fd0:	441d      	add	r5, r3
 8007fd2:	4653      	mov	r3, sl
 8007fd4:	bfa8      	it	ge
 8007fd6:	463b      	movge	r3, r7
 8007fd8:	42ab      	cmp	r3, r5
 8007fda:	bfa8      	it	ge
 8007fdc:	462b      	movge	r3, r5
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bfc2      	ittt	gt
 8007fe2:	1aff      	subgt	r7, r7, r3
 8007fe4:	1aed      	subgt	r5, r5, r3
 8007fe6:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007fea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	dd17      	ble.n	8008020 <_strtod_l+0x738>
 8007ff0:	4659      	mov	r1, fp
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f001 ff6b 	bl	8009ed0 <__pow5mult>
 8007ffa:	4683      	mov	fp, r0
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	f43f aeb1 	beq.w	8007d64 <_strtod_l+0x47c>
 8008002:	4601      	mov	r1, r0
 8008004:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008006:	4620      	mov	r0, r4
 8008008:	f001 feba 	bl	8009d80 <__multiply>
 800800c:	900a      	str	r0, [sp, #40]	; 0x28
 800800e:	2800      	cmp	r0, #0
 8008010:	f43f aea8 	beq.w	8007d64 <_strtod_l+0x47c>
 8008014:	4620      	mov	r0, r4
 8008016:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008018:	f001 fd9c 	bl	8009b54 <_Bfree>
 800801c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800801e:	931a      	str	r3, [sp, #104]	; 0x68
 8008020:	2f00      	cmp	r7, #0
 8008022:	f300 808f 	bgt.w	8008144 <_strtod_l+0x85c>
 8008026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008028:	2b00      	cmp	r3, #0
 800802a:	dd08      	ble.n	800803e <_strtod_l+0x756>
 800802c:	4620      	mov	r0, r4
 800802e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008030:	9908      	ldr	r1, [sp, #32]
 8008032:	f001 ff4d 	bl	8009ed0 <__pow5mult>
 8008036:	9008      	str	r0, [sp, #32]
 8008038:	2800      	cmp	r0, #0
 800803a:	f43f ae93 	beq.w	8007d64 <_strtod_l+0x47c>
 800803e:	2d00      	cmp	r5, #0
 8008040:	dd08      	ble.n	8008054 <_strtod_l+0x76c>
 8008042:	462a      	mov	r2, r5
 8008044:	4620      	mov	r0, r4
 8008046:	9908      	ldr	r1, [sp, #32]
 8008048:	f001 ff9c 	bl	8009f84 <__lshift>
 800804c:	9008      	str	r0, [sp, #32]
 800804e:	2800      	cmp	r0, #0
 8008050:	f43f ae88 	beq.w	8007d64 <_strtod_l+0x47c>
 8008054:	f1ba 0f00 	cmp.w	sl, #0
 8008058:	dd08      	ble.n	800806c <_strtod_l+0x784>
 800805a:	4659      	mov	r1, fp
 800805c:	4652      	mov	r2, sl
 800805e:	4620      	mov	r0, r4
 8008060:	f001 ff90 	bl	8009f84 <__lshift>
 8008064:	4683      	mov	fp, r0
 8008066:	2800      	cmp	r0, #0
 8008068:	f43f ae7c 	beq.w	8007d64 <_strtod_l+0x47c>
 800806c:	4620      	mov	r0, r4
 800806e:	9a08      	ldr	r2, [sp, #32]
 8008070:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008072:	f002 f80f 	bl	800a094 <__mdiff>
 8008076:	4606      	mov	r6, r0
 8008078:	2800      	cmp	r0, #0
 800807a:	f43f ae73 	beq.w	8007d64 <_strtod_l+0x47c>
 800807e:	2500      	movs	r5, #0
 8008080:	68c3      	ldr	r3, [r0, #12]
 8008082:	4659      	mov	r1, fp
 8008084:	60c5      	str	r5, [r0, #12]
 8008086:	930a      	str	r3, [sp, #40]	; 0x28
 8008088:	f001 ffe8 	bl	800a05c <__mcmp>
 800808c:	42a8      	cmp	r0, r5
 800808e:	da6b      	bge.n	8008168 <_strtod_l+0x880>
 8008090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008092:	ea53 0308 	orrs.w	r3, r3, r8
 8008096:	f040 808f 	bne.w	80081b8 <_strtod_l+0x8d0>
 800809a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f040 808a 	bne.w	80081b8 <_strtod_l+0x8d0>
 80080a4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080a8:	0d1b      	lsrs	r3, r3, #20
 80080aa:	051b      	lsls	r3, r3, #20
 80080ac:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80080b0:	f240 8082 	bls.w	80081b8 <_strtod_l+0x8d0>
 80080b4:	6973      	ldr	r3, [r6, #20]
 80080b6:	b913      	cbnz	r3, 80080be <_strtod_l+0x7d6>
 80080b8:	6933      	ldr	r3, [r6, #16]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	dd7c      	ble.n	80081b8 <_strtod_l+0x8d0>
 80080be:	4631      	mov	r1, r6
 80080c0:	2201      	movs	r2, #1
 80080c2:	4620      	mov	r0, r4
 80080c4:	f001 ff5e 	bl	8009f84 <__lshift>
 80080c8:	4659      	mov	r1, fp
 80080ca:	4606      	mov	r6, r0
 80080cc:	f001 ffc6 	bl	800a05c <__mcmp>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	dd71      	ble.n	80081b8 <_strtod_l+0x8d0>
 80080d4:	9905      	ldr	r1, [sp, #20]
 80080d6:	464b      	mov	r3, r9
 80080d8:	4a21      	ldr	r2, [pc, #132]	; (8008160 <_strtod_l+0x878>)
 80080da:	2900      	cmp	r1, #0
 80080dc:	f000 808d 	beq.w	80081fa <_strtod_l+0x912>
 80080e0:	ea02 0109 	and.w	r1, r2, r9
 80080e4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80080e8:	f300 8087 	bgt.w	80081fa <_strtod_l+0x912>
 80080ec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80080f0:	f77f aea9 	ble.w	8007e46 <_strtod_l+0x55e>
 80080f4:	4640      	mov	r0, r8
 80080f6:	4649      	mov	r1, r9
 80080f8:	4b1a      	ldr	r3, [pc, #104]	; (8008164 <_strtod_l+0x87c>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	f7f8 f9ec 	bl	80004d8 <__aeabi_dmul>
 8008100:	4b17      	ldr	r3, [pc, #92]	; (8008160 <_strtod_l+0x878>)
 8008102:	4680      	mov	r8, r0
 8008104:	400b      	ands	r3, r1
 8008106:	4689      	mov	r9, r1
 8008108:	2b00      	cmp	r3, #0
 800810a:	f47f ae35 	bne.w	8007d78 <_strtod_l+0x490>
 800810e:	2322      	movs	r3, #34	; 0x22
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	e631      	b.n	8007d78 <_strtod_l+0x490>
 8008114:	f04f 32ff 	mov.w	r2, #4294967295
 8008118:	fa02 f303 	lsl.w	r3, r2, r3
 800811c:	ea03 0808 	and.w	r8, r3, r8
 8008120:	e6de      	b.n	8007ee0 <_strtod_l+0x5f8>
 8008122:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8008126:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800812a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800812e:	37e2      	adds	r7, #226	; 0xe2
 8008130:	fa01 f307 	lsl.w	r3, r1, r7
 8008134:	9310      	str	r3, [sp, #64]	; 0x40
 8008136:	9113      	str	r1, [sp, #76]	; 0x4c
 8008138:	e745      	b.n	8007fc6 <_strtod_l+0x6de>
 800813a:	2300      	movs	r3, #0
 800813c:	9310      	str	r3, [sp, #64]	; 0x40
 800813e:	2301      	movs	r3, #1
 8008140:	9313      	str	r3, [sp, #76]	; 0x4c
 8008142:	e740      	b.n	8007fc6 <_strtod_l+0x6de>
 8008144:	463a      	mov	r2, r7
 8008146:	4620      	mov	r0, r4
 8008148:	991a      	ldr	r1, [sp, #104]	; 0x68
 800814a:	f001 ff1b 	bl	8009f84 <__lshift>
 800814e:	901a      	str	r0, [sp, #104]	; 0x68
 8008150:	2800      	cmp	r0, #0
 8008152:	f47f af68 	bne.w	8008026 <_strtod_l+0x73e>
 8008156:	e605      	b.n	8007d64 <_strtod_l+0x47c>
 8008158:	0800caf0 	.word	0x0800caf0
 800815c:	fffffc02 	.word	0xfffffc02
 8008160:	7ff00000 	.word	0x7ff00000
 8008164:	39500000 	.word	0x39500000
 8008168:	46ca      	mov	sl, r9
 800816a:	d165      	bne.n	8008238 <_strtod_l+0x950>
 800816c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800816e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008172:	b352      	cbz	r2, 80081ca <_strtod_l+0x8e2>
 8008174:	4a9e      	ldr	r2, [pc, #632]	; (80083f0 <_strtod_l+0xb08>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d12a      	bne.n	80081d0 <_strtod_l+0x8e8>
 800817a:	9b05      	ldr	r3, [sp, #20]
 800817c:	4641      	mov	r1, r8
 800817e:	b1fb      	cbz	r3, 80081c0 <_strtod_l+0x8d8>
 8008180:	4b9c      	ldr	r3, [pc, #624]	; (80083f4 <_strtod_l+0xb0c>)
 8008182:	f04f 32ff 	mov.w	r2, #4294967295
 8008186:	ea09 0303 	and.w	r3, r9, r3
 800818a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800818e:	d81a      	bhi.n	80081c6 <_strtod_l+0x8de>
 8008190:	0d1b      	lsrs	r3, r3, #20
 8008192:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008196:	fa02 f303 	lsl.w	r3, r2, r3
 800819a:	4299      	cmp	r1, r3
 800819c:	d118      	bne.n	80081d0 <_strtod_l+0x8e8>
 800819e:	4b96      	ldr	r3, [pc, #600]	; (80083f8 <_strtod_l+0xb10>)
 80081a0:	459a      	cmp	sl, r3
 80081a2:	d102      	bne.n	80081aa <_strtod_l+0x8c2>
 80081a4:	3101      	adds	r1, #1
 80081a6:	f43f addd 	beq.w	8007d64 <_strtod_l+0x47c>
 80081aa:	f04f 0800 	mov.w	r8, #0
 80081ae:	4b91      	ldr	r3, [pc, #580]	; (80083f4 <_strtod_l+0xb0c>)
 80081b0:	ea0a 0303 	and.w	r3, sl, r3
 80081b4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80081b8:	9b05      	ldr	r3, [sp, #20]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d19a      	bne.n	80080f4 <_strtod_l+0x80c>
 80081be:	e5db      	b.n	8007d78 <_strtod_l+0x490>
 80081c0:	f04f 33ff 	mov.w	r3, #4294967295
 80081c4:	e7e9      	b.n	800819a <_strtod_l+0x8b2>
 80081c6:	4613      	mov	r3, r2
 80081c8:	e7e7      	b.n	800819a <_strtod_l+0x8b2>
 80081ca:	ea53 0308 	orrs.w	r3, r3, r8
 80081ce:	d081      	beq.n	80080d4 <_strtod_l+0x7ec>
 80081d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081d2:	b1e3      	cbz	r3, 800820e <_strtod_l+0x926>
 80081d4:	ea13 0f0a 	tst.w	r3, sl
 80081d8:	d0ee      	beq.n	80081b8 <_strtod_l+0x8d0>
 80081da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081dc:	4640      	mov	r0, r8
 80081de:	4649      	mov	r1, r9
 80081e0:	9a05      	ldr	r2, [sp, #20]
 80081e2:	b1c3      	cbz	r3, 8008216 <_strtod_l+0x92e>
 80081e4:	f7ff fb5e 	bl	80078a4 <sulp>
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80081ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80081f0:	f7f7 ffbc 	bl	800016c <__adddf3>
 80081f4:	4680      	mov	r8, r0
 80081f6:	4689      	mov	r9, r1
 80081f8:	e7de      	b.n	80081b8 <_strtod_l+0x8d0>
 80081fa:	4013      	ands	r3, r2
 80081fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008200:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008204:	f04f 38ff 	mov.w	r8, #4294967295
 8008208:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800820c:	e7d4      	b.n	80081b8 <_strtod_l+0x8d0>
 800820e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008210:	ea13 0f08 	tst.w	r3, r8
 8008214:	e7e0      	b.n	80081d8 <_strtod_l+0x8f0>
 8008216:	f7ff fb45 	bl	80078a4 <sulp>
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008220:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008222:	f7f7 ffa1 	bl	8000168 <__aeabi_dsub>
 8008226:	2200      	movs	r2, #0
 8008228:	2300      	movs	r3, #0
 800822a:	4680      	mov	r8, r0
 800822c:	4689      	mov	r9, r1
 800822e:	f7f8 fbbb 	bl	80009a8 <__aeabi_dcmpeq>
 8008232:	2800      	cmp	r0, #0
 8008234:	d0c0      	beq.n	80081b8 <_strtod_l+0x8d0>
 8008236:	e606      	b.n	8007e46 <_strtod_l+0x55e>
 8008238:	4659      	mov	r1, fp
 800823a:	4630      	mov	r0, r6
 800823c:	f002 f874 	bl	800a328 <__ratio>
 8008240:	4602      	mov	r2, r0
 8008242:	460b      	mov	r3, r1
 8008244:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008248:	2200      	movs	r2, #0
 800824a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800824e:	f7f8 fbbf 	bl	80009d0 <__aeabi_dcmple>
 8008252:	2800      	cmp	r0, #0
 8008254:	d06f      	beq.n	8008336 <_strtod_l+0xa4e>
 8008256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008258:	2b00      	cmp	r3, #0
 800825a:	d17c      	bne.n	8008356 <_strtod_l+0xa6e>
 800825c:	f1b8 0f00 	cmp.w	r8, #0
 8008260:	d159      	bne.n	8008316 <_strtod_l+0xa2e>
 8008262:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008266:	2b00      	cmp	r3, #0
 8008268:	d17b      	bne.n	8008362 <_strtod_l+0xa7a>
 800826a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800826e:	2200      	movs	r2, #0
 8008270:	4b62      	ldr	r3, [pc, #392]	; (80083fc <_strtod_l+0xb14>)
 8008272:	f7f8 fba3 	bl	80009bc <__aeabi_dcmplt>
 8008276:	2800      	cmp	r0, #0
 8008278:	d15a      	bne.n	8008330 <_strtod_l+0xa48>
 800827a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800827e:	2200      	movs	r2, #0
 8008280:	4b5f      	ldr	r3, [pc, #380]	; (8008400 <_strtod_l+0xb18>)
 8008282:	f7f8 f929 	bl	80004d8 <__aeabi_dmul>
 8008286:	4605      	mov	r5, r0
 8008288:	460f      	mov	r7, r1
 800828a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800828e:	9506      	str	r5, [sp, #24]
 8008290:	9307      	str	r3, [sp, #28]
 8008292:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008296:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800829a:	4b56      	ldr	r3, [pc, #344]	; (80083f4 <_strtod_l+0xb0c>)
 800829c:	4a55      	ldr	r2, [pc, #340]	; (80083f4 <_strtod_l+0xb0c>)
 800829e:	ea0a 0303 	and.w	r3, sl, r3
 80082a2:	9313      	str	r3, [sp, #76]	; 0x4c
 80082a4:	4b57      	ldr	r3, [pc, #348]	; (8008404 <_strtod_l+0xb1c>)
 80082a6:	ea0a 0202 	and.w	r2, sl, r2
 80082aa:	429a      	cmp	r2, r3
 80082ac:	f040 80b0 	bne.w	8008410 <_strtod_l+0xb28>
 80082b0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80082b4:	4640      	mov	r0, r8
 80082b6:	4649      	mov	r1, r9
 80082b8:	f001 ff78 	bl	800a1ac <__ulp>
 80082bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082c0:	f7f8 f90a 	bl	80004d8 <__aeabi_dmul>
 80082c4:	4642      	mov	r2, r8
 80082c6:	464b      	mov	r3, r9
 80082c8:	f7f7 ff50 	bl	800016c <__adddf3>
 80082cc:	f8df a124 	ldr.w	sl, [pc, #292]	; 80083f4 <_strtod_l+0xb0c>
 80082d0:	4a4d      	ldr	r2, [pc, #308]	; (8008408 <_strtod_l+0xb20>)
 80082d2:	ea01 0a0a 	and.w	sl, r1, sl
 80082d6:	4592      	cmp	sl, r2
 80082d8:	4680      	mov	r8, r0
 80082da:	d948      	bls.n	800836e <_strtod_l+0xa86>
 80082dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082de:	4b46      	ldr	r3, [pc, #280]	; (80083f8 <_strtod_l+0xb10>)
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d103      	bne.n	80082ec <_strtod_l+0xa04>
 80082e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082e6:	3301      	adds	r3, #1
 80082e8:	f43f ad3c 	beq.w	8007d64 <_strtod_l+0x47c>
 80082ec:	f04f 38ff 	mov.w	r8, #4294967295
 80082f0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80083f8 <_strtod_l+0xb10>
 80082f4:	4620      	mov	r0, r4
 80082f6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80082f8:	f001 fc2c 	bl	8009b54 <_Bfree>
 80082fc:	4620      	mov	r0, r4
 80082fe:	9908      	ldr	r1, [sp, #32]
 8008300:	f001 fc28 	bl	8009b54 <_Bfree>
 8008304:	4659      	mov	r1, fp
 8008306:	4620      	mov	r0, r4
 8008308:	f001 fc24 	bl	8009b54 <_Bfree>
 800830c:	4631      	mov	r1, r6
 800830e:	4620      	mov	r0, r4
 8008310:	f001 fc20 	bl	8009b54 <_Bfree>
 8008314:	e605      	b.n	8007f22 <_strtod_l+0x63a>
 8008316:	f1b8 0f01 	cmp.w	r8, #1
 800831a:	d103      	bne.n	8008324 <_strtod_l+0xa3c>
 800831c:	f1b9 0f00 	cmp.w	r9, #0
 8008320:	f43f ad91 	beq.w	8007e46 <_strtod_l+0x55e>
 8008324:	2200      	movs	r2, #0
 8008326:	4b39      	ldr	r3, [pc, #228]	; (800840c <_strtod_l+0xb24>)
 8008328:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800832a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800832e:	e016      	b.n	800835e <_strtod_l+0xa76>
 8008330:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008332:	4f33      	ldr	r7, [pc, #204]	; (8008400 <_strtod_l+0xb18>)
 8008334:	e7a9      	b.n	800828a <_strtod_l+0x9a2>
 8008336:	4b32      	ldr	r3, [pc, #200]	; (8008400 <_strtod_l+0xb18>)
 8008338:	2200      	movs	r2, #0
 800833a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800833e:	f7f8 f8cb 	bl	80004d8 <__aeabi_dmul>
 8008342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008344:	4605      	mov	r5, r0
 8008346:	460f      	mov	r7, r1
 8008348:	2b00      	cmp	r3, #0
 800834a:	d09e      	beq.n	800828a <_strtod_l+0x9a2>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008354:	e79d      	b.n	8008292 <_strtod_l+0x9aa>
 8008356:	2200      	movs	r2, #0
 8008358:	4b28      	ldr	r3, [pc, #160]	; (80083fc <_strtod_l+0xb14>)
 800835a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800835e:	4f27      	ldr	r7, [pc, #156]	; (80083fc <_strtod_l+0xb14>)
 8008360:	e797      	b.n	8008292 <_strtod_l+0x9aa>
 8008362:	2200      	movs	r2, #0
 8008364:	4b29      	ldr	r3, [pc, #164]	; (800840c <_strtod_l+0xb24>)
 8008366:	4645      	mov	r5, r8
 8008368:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800836c:	e7f7      	b.n	800835e <_strtod_l+0xa76>
 800836e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8008372:	9b05      	ldr	r3, [sp, #20]
 8008374:	46ca      	mov	sl, r9
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1bc      	bne.n	80082f4 <_strtod_l+0xa0c>
 800837a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800837e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008380:	0d1b      	lsrs	r3, r3, #20
 8008382:	051b      	lsls	r3, r3, #20
 8008384:	429a      	cmp	r2, r3
 8008386:	d1b5      	bne.n	80082f4 <_strtod_l+0xa0c>
 8008388:	4628      	mov	r0, r5
 800838a:	4639      	mov	r1, r7
 800838c:	f7f8 febe 	bl	800110c <__aeabi_d2lz>
 8008390:	f7f8 f874 	bl	800047c <__aeabi_l2d>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	4628      	mov	r0, r5
 800839a:	4639      	mov	r1, r7
 800839c:	f7f7 fee4 	bl	8000168 <__aeabi_dsub>
 80083a0:	460b      	mov	r3, r1
 80083a2:	4602      	mov	r2, r0
 80083a4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80083a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80083ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ae:	ea4a 0a08 	orr.w	sl, sl, r8
 80083b2:	ea5a 0a03 	orrs.w	sl, sl, r3
 80083b6:	d06c      	beq.n	8008492 <_strtod_l+0xbaa>
 80083b8:	a309      	add	r3, pc, #36	; (adr r3, 80083e0 <_strtod_l+0xaf8>)
 80083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083be:	f7f8 fafd 	bl	80009bc <__aeabi_dcmplt>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	f47f acd8 	bne.w	8007d78 <_strtod_l+0x490>
 80083c8:	a307      	add	r3, pc, #28	; (adr r3, 80083e8 <_strtod_l+0xb00>)
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083d2:	f7f8 fb11 	bl	80009f8 <__aeabi_dcmpgt>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	d08c      	beq.n	80082f4 <_strtod_l+0xa0c>
 80083da:	e4cd      	b.n	8007d78 <_strtod_l+0x490>
 80083dc:	f3af 8000 	nop.w
 80083e0:	94a03595 	.word	0x94a03595
 80083e4:	3fdfffff 	.word	0x3fdfffff
 80083e8:	35afe535 	.word	0x35afe535
 80083ec:	3fe00000 	.word	0x3fe00000
 80083f0:	000fffff 	.word	0x000fffff
 80083f4:	7ff00000 	.word	0x7ff00000
 80083f8:	7fefffff 	.word	0x7fefffff
 80083fc:	3ff00000 	.word	0x3ff00000
 8008400:	3fe00000 	.word	0x3fe00000
 8008404:	7fe00000 	.word	0x7fe00000
 8008408:	7c9fffff 	.word	0x7c9fffff
 800840c:	bff00000 	.word	0xbff00000
 8008410:	9b05      	ldr	r3, [sp, #20]
 8008412:	b333      	cbz	r3, 8008462 <_strtod_l+0xb7a>
 8008414:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008416:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800841a:	d822      	bhi.n	8008462 <_strtod_l+0xb7a>
 800841c:	a328      	add	r3, pc, #160	; (adr r3, 80084c0 <_strtod_l+0xbd8>)
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	4628      	mov	r0, r5
 8008424:	4639      	mov	r1, r7
 8008426:	f7f8 fad3 	bl	80009d0 <__aeabi_dcmple>
 800842a:	b1a0      	cbz	r0, 8008456 <_strtod_l+0xb6e>
 800842c:	4639      	mov	r1, r7
 800842e:	4628      	mov	r0, r5
 8008430:	f7f8 fb02 	bl	8000a38 <__aeabi_d2uiz>
 8008434:	2801      	cmp	r0, #1
 8008436:	bf38      	it	cc
 8008438:	2001      	movcc	r0, #1
 800843a:	f7f7 ffd3 	bl	80003e4 <__aeabi_ui2d>
 800843e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008440:	4605      	mov	r5, r0
 8008442:	460f      	mov	r7, r1
 8008444:	bb03      	cbnz	r3, 8008488 <_strtod_l+0xba0>
 8008446:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800844a:	9014      	str	r0, [sp, #80]	; 0x50
 800844c:	9315      	str	r3, [sp, #84]	; 0x54
 800844e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008452:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008456:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008458:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800845a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800845e:	1a9b      	subs	r3, r3, r2
 8008460:	9311      	str	r3, [sp, #68]	; 0x44
 8008462:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008464:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008466:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800846a:	f001 fe9f 	bl	800a1ac <__ulp>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	4640      	mov	r0, r8
 8008474:	4649      	mov	r1, r9
 8008476:	f7f8 f82f 	bl	80004d8 <__aeabi_dmul>
 800847a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800847c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800847e:	f7f7 fe75 	bl	800016c <__adddf3>
 8008482:	4680      	mov	r8, r0
 8008484:	4689      	mov	r9, r1
 8008486:	e774      	b.n	8008372 <_strtod_l+0xa8a>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008490:	e7dd      	b.n	800844e <_strtod_l+0xb66>
 8008492:	a30d      	add	r3, pc, #52	; (adr r3, 80084c8 <_strtod_l+0xbe0>)
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	f7f8 fa90 	bl	80009bc <__aeabi_dcmplt>
 800849c:	e79b      	b.n	80083d6 <_strtod_l+0xaee>
 800849e:	2300      	movs	r3, #0
 80084a0:	930e      	str	r3, [sp, #56]	; 0x38
 80084a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	f7ff ba5b 	b.w	8007962 <_strtod_l+0x7a>
 80084ac:	2a65      	cmp	r2, #101	; 0x65
 80084ae:	f43f ab52 	beq.w	8007b56 <_strtod_l+0x26e>
 80084b2:	2a45      	cmp	r2, #69	; 0x45
 80084b4:	f43f ab4f 	beq.w	8007b56 <_strtod_l+0x26e>
 80084b8:	2301      	movs	r3, #1
 80084ba:	f7ff bb87 	b.w	8007bcc <_strtod_l+0x2e4>
 80084be:	bf00      	nop
 80084c0:	ffc00000 	.word	0xffc00000
 80084c4:	41dfffff 	.word	0x41dfffff
 80084c8:	94a03595 	.word	0x94a03595
 80084cc:	3fcfffff 	.word	0x3fcfffff

080084d0 <_strtod_r>:
 80084d0:	4b01      	ldr	r3, [pc, #4]	; (80084d8 <_strtod_r+0x8>)
 80084d2:	f7ff ba09 	b.w	80078e8 <_strtod_l>
 80084d6:	bf00      	nop
 80084d8:	20000350 	.word	0x20000350

080084dc <__ssputs_r>:
 80084dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e0:	461f      	mov	r7, r3
 80084e2:	688e      	ldr	r6, [r1, #8]
 80084e4:	4682      	mov	sl, r0
 80084e6:	42be      	cmp	r6, r7
 80084e8:	460c      	mov	r4, r1
 80084ea:	4690      	mov	r8, r2
 80084ec:	680b      	ldr	r3, [r1, #0]
 80084ee:	d82c      	bhi.n	800854a <__ssputs_r+0x6e>
 80084f0:	898a      	ldrh	r2, [r1, #12]
 80084f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084f6:	d026      	beq.n	8008546 <__ssputs_r+0x6a>
 80084f8:	6965      	ldr	r5, [r4, #20]
 80084fa:	6909      	ldr	r1, [r1, #16]
 80084fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008500:	eba3 0901 	sub.w	r9, r3, r1
 8008504:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008508:	1c7b      	adds	r3, r7, #1
 800850a:	444b      	add	r3, r9
 800850c:	106d      	asrs	r5, r5, #1
 800850e:	429d      	cmp	r5, r3
 8008510:	bf38      	it	cc
 8008512:	461d      	movcc	r5, r3
 8008514:	0553      	lsls	r3, r2, #21
 8008516:	d527      	bpl.n	8008568 <__ssputs_r+0x8c>
 8008518:	4629      	mov	r1, r5
 800851a:	f7ff f937 	bl	800778c <_malloc_r>
 800851e:	4606      	mov	r6, r0
 8008520:	b360      	cbz	r0, 800857c <__ssputs_r+0xa0>
 8008522:	464a      	mov	r2, r9
 8008524:	6921      	ldr	r1, [r4, #16]
 8008526:	f7ff f890 	bl	800764a <memcpy>
 800852a:	89a3      	ldrh	r3, [r4, #12]
 800852c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008534:	81a3      	strh	r3, [r4, #12]
 8008536:	6126      	str	r6, [r4, #16]
 8008538:	444e      	add	r6, r9
 800853a:	6026      	str	r6, [r4, #0]
 800853c:	463e      	mov	r6, r7
 800853e:	6165      	str	r5, [r4, #20]
 8008540:	eba5 0509 	sub.w	r5, r5, r9
 8008544:	60a5      	str	r5, [r4, #8]
 8008546:	42be      	cmp	r6, r7
 8008548:	d900      	bls.n	800854c <__ssputs_r+0x70>
 800854a:	463e      	mov	r6, r7
 800854c:	4632      	mov	r2, r6
 800854e:	4641      	mov	r1, r8
 8008550:	6820      	ldr	r0, [r4, #0]
 8008552:	f000 fefa 	bl	800934a <memmove>
 8008556:	2000      	movs	r0, #0
 8008558:	68a3      	ldr	r3, [r4, #8]
 800855a:	1b9b      	subs	r3, r3, r6
 800855c:	60a3      	str	r3, [r4, #8]
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	4433      	add	r3, r6
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008568:	462a      	mov	r2, r5
 800856a:	f001 ff4f 	bl	800a40c <_realloc_r>
 800856e:	4606      	mov	r6, r0
 8008570:	2800      	cmp	r0, #0
 8008572:	d1e0      	bne.n	8008536 <__ssputs_r+0x5a>
 8008574:	4650      	mov	r0, sl
 8008576:	6921      	ldr	r1, [r4, #16]
 8008578:	f7ff f898 	bl	80076ac <_free_r>
 800857c:	230c      	movs	r3, #12
 800857e:	f8ca 3000 	str.w	r3, [sl]
 8008582:	89a3      	ldrh	r3, [r4, #12]
 8008584:	f04f 30ff 	mov.w	r0, #4294967295
 8008588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800858c:	81a3      	strh	r3, [r4, #12]
 800858e:	e7e9      	b.n	8008564 <__ssputs_r+0x88>

08008590 <_svfiprintf_r>:
 8008590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	4698      	mov	r8, r3
 8008596:	898b      	ldrh	r3, [r1, #12]
 8008598:	4607      	mov	r7, r0
 800859a:	061b      	lsls	r3, r3, #24
 800859c:	460d      	mov	r5, r1
 800859e:	4614      	mov	r4, r2
 80085a0:	b09d      	sub	sp, #116	; 0x74
 80085a2:	d50e      	bpl.n	80085c2 <_svfiprintf_r+0x32>
 80085a4:	690b      	ldr	r3, [r1, #16]
 80085a6:	b963      	cbnz	r3, 80085c2 <_svfiprintf_r+0x32>
 80085a8:	2140      	movs	r1, #64	; 0x40
 80085aa:	f7ff f8ef 	bl	800778c <_malloc_r>
 80085ae:	6028      	str	r0, [r5, #0]
 80085b0:	6128      	str	r0, [r5, #16]
 80085b2:	b920      	cbnz	r0, 80085be <_svfiprintf_r+0x2e>
 80085b4:	230c      	movs	r3, #12
 80085b6:	603b      	str	r3, [r7, #0]
 80085b8:	f04f 30ff 	mov.w	r0, #4294967295
 80085bc:	e0d0      	b.n	8008760 <_svfiprintf_r+0x1d0>
 80085be:	2340      	movs	r3, #64	; 0x40
 80085c0:	616b      	str	r3, [r5, #20]
 80085c2:	2300      	movs	r3, #0
 80085c4:	9309      	str	r3, [sp, #36]	; 0x24
 80085c6:	2320      	movs	r3, #32
 80085c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085cc:	2330      	movs	r3, #48	; 0x30
 80085ce:	f04f 0901 	mov.w	r9, #1
 80085d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80085d6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008778 <_svfiprintf_r+0x1e8>
 80085da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085de:	4623      	mov	r3, r4
 80085e0:	469a      	mov	sl, r3
 80085e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085e6:	b10a      	cbz	r2, 80085ec <_svfiprintf_r+0x5c>
 80085e8:	2a25      	cmp	r2, #37	; 0x25
 80085ea:	d1f9      	bne.n	80085e0 <_svfiprintf_r+0x50>
 80085ec:	ebba 0b04 	subs.w	fp, sl, r4
 80085f0:	d00b      	beq.n	800860a <_svfiprintf_r+0x7a>
 80085f2:	465b      	mov	r3, fp
 80085f4:	4622      	mov	r2, r4
 80085f6:	4629      	mov	r1, r5
 80085f8:	4638      	mov	r0, r7
 80085fa:	f7ff ff6f 	bl	80084dc <__ssputs_r>
 80085fe:	3001      	adds	r0, #1
 8008600:	f000 80a9 	beq.w	8008756 <_svfiprintf_r+0x1c6>
 8008604:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008606:	445a      	add	r2, fp
 8008608:	9209      	str	r2, [sp, #36]	; 0x24
 800860a:	f89a 3000 	ldrb.w	r3, [sl]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 80a1 	beq.w	8008756 <_svfiprintf_r+0x1c6>
 8008614:	2300      	movs	r3, #0
 8008616:	f04f 32ff 	mov.w	r2, #4294967295
 800861a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800861e:	f10a 0a01 	add.w	sl, sl, #1
 8008622:	9304      	str	r3, [sp, #16]
 8008624:	9307      	str	r3, [sp, #28]
 8008626:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800862a:	931a      	str	r3, [sp, #104]	; 0x68
 800862c:	4654      	mov	r4, sl
 800862e:	2205      	movs	r2, #5
 8008630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008634:	4850      	ldr	r0, [pc, #320]	; (8008778 <_svfiprintf_r+0x1e8>)
 8008636:	f000 fec5 	bl	80093c4 <memchr>
 800863a:	9a04      	ldr	r2, [sp, #16]
 800863c:	b9d8      	cbnz	r0, 8008676 <_svfiprintf_r+0xe6>
 800863e:	06d0      	lsls	r0, r2, #27
 8008640:	bf44      	itt	mi
 8008642:	2320      	movmi	r3, #32
 8008644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008648:	0711      	lsls	r1, r2, #28
 800864a:	bf44      	itt	mi
 800864c:	232b      	movmi	r3, #43	; 0x2b
 800864e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008652:	f89a 3000 	ldrb.w	r3, [sl]
 8008656:	2b2a      	cmp	r3, #42	; 0x2a
 8008658:	d015      	beq.n	8008686 <_svfiprintf_r+0xf6>
 800865a:	4654      	mov	r4, sl
 800865c:	2000      	movs	r0, #0
 800865e:	f04f 0c0a 	mov.w	ip, #10
 8008662:	9a07      	ldr	r2, [sp, #28]
 8008664:	4621      	mov	r1, r4
 8008666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800866a:	3b30      	subs	r3, #48	; 0x30
 800866c:	2b09      	cmp	r3, #9
 800866e:	d94d      	bls.n	800870c <_svfiprintf_r+0x17c>
 8008670:	b1b0      	cbz	r0, 80086a0 <_svfiprintf_r+0x110>
 8008672:	9207      	str	r2, [sp, #28]
 8008674:	e014      	b.n	80086a0 <_svfiprintf_r+0x110>
 8008676:	eba0 0308 	sub.w	r3, r0, r8
 800867a:	fa09 f303 	lsl.w	r3, r9, r3
 800867e:	4313      	orrs	r3, r2
 8008680:	46a2      	mov	sl, r4
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	e7d2      	b.n	800862c <_svfiprintf_r+0x9c>
 8008686:	9b03      	ldr	r3, [sp, #12]
 8008688:	1d19      	adds	r1, r3, #4
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	9103      	str	r1, [sp, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	bfbb      	ittet	lt
 8008692:	425b      	neglt	r3, r3
 8008694:	f042 0202 	orrlt.w	r2, r2, #2
 8008698:	9307      	strge	r3, [sp, #28]
 800869a:	9307      	strlt	r3, [sp, #28]
 800869c:	bfb8      	it	lt
 800869e:	9204      	strlt	r2, [sp, #16]
 80086a0:	7823      	ldrb	r3, [r4, #0]
 80086a2:	2b2e      	cmp	r3, #46	; 0x2e
 80086a4:	d10c      	bne.n	80086c0 <_svfiprintf_r+0x130>
 80086a6:	7863      	ldrb	r3, [r4, #1]
 80086a8:	2b2a      	cmp	r3, #42	; 0x2a
 80086aa:	d134      	bne.n	8008716 <_svfiprintf_r+0x186>
 80086ac:	9b03      	ldr	r3, [sp, #12]
 80086ae:	3402      	adds	r4, #2
 80086b0:	1d1a      	adds	r2, r3, #4
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	9203      	str	r2, [sp, #12]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	bfb8      	it	lt
 80086ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80086be:	9305      	str	r3, [sp, #20]
 80086c0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800877c <_svfiprintf_r+0x1ec>
 80086c4:	2203      	movs	r2, #3
 80086c6:	4650      	mov	r0, sl
 80086c8:	7821      	ldrb	r1, [r4, #0]
 80086ca:	f000 fe7b 	bl	80093c4 <memchr>
 80086ce:	b138      	cbz	r0, 80086e0 <_svfiprintf_r+0x150>
 80086d0:	2240      	movs	r2, #64	; 0x40
 80086d2:	9b04      	ldr	r3, [sp, #16]
 80086d4:	eba0 000a 	sub.w	r0, r0, sl
 80086d8:	4082      	lsls	r2, r0
 80086da:	4313      	orrs	r3, r2
 80086dc:	3401      	adds	r4, #1
 80086de:	9304      	str	r3, [sp, #16]
 80086e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e4:	2206      	movs	r2, #6
 80086e6:	4826      	ldr	r0, [pc, #152]	; (8008780 <_svfiprintf_r+0x1f0>)
 80086e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086ec:	f000 fe6a 	bl	80093c4 <memchr>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d038      	beq.n	8008766 <_svfiprintf_r+0x1d6>
 80086f4:	4b23      	ldr	r3, [pc, #140]	; (8008784 <_svfiprintf_r+0x1f4>)
 80086f6:	bb1b      	cbnz	r3, 8008740 <_svfiprintf_r+0x1b0>
 80086f8:	9b03      	ldr	r3, [sp, #12]
 80086fa:	3307      	adds	r3, #7
 80086fc:	f023 0307 	bic.w	r3, r3, #7
 8008700:	3308      	adds	r3, #8
 8008702:	9303      	str	r3, [sp, #12]
 8008704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008706:	4433      	add	r3, r6
 8008708:	9309      	str	r3, [sp, #36]	; 0x24
 800870a:	e768      	b.n	80085de <_svfiprintf_r+0x4e>
 800870c:	460c      	mov	r4, r1
 800870e:	2001      	movs	r0, #1
 8008710:	fb0c 3202 	mla	r2, ip, r2, r3
 8008714:	e7a6      	b.n	8008664 <_svfiprintf_r+0xd4>
 8008716:	2300      	movs	r3, #0
 8008718:	f04f 0c0a 	mov.w	ip, #10
 800871c:	4619      	mov	r1, r3
 800871e:	3401      	adds	r4, #1
 8008720:	9305      	str	r3, [sp, #20]
 8008722:	4620      	mov	r0, r4
 8008724:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008728:	3a30      	subs	r2, #48	; 0x30
 800872a:	2a09      	cmp	r2, #9
 800872c:	d903      	bls.n	8008736 <_svfiprintf_r+0x1a6>
 800872e:	2b00      	cmp	r3, #0
 8008730:	d0c6      	beq.n	80086c0 <_svfiprintf_r+0x130>
 8008732:	9105      	str	r1, [sp, #20]
 8008734:	e7c4      	b.n	80086c0 <_svfiprintf_r+0x130>
 8008736:	4604      	mov	r4, r0
 8008738:	2301      	movs	r3, #1
 800873a:	fb0c 2101 	mla	r1, ip, r1, r2
 800873e:	e7f0      	b.n	8008722 <_svfiprintf_r+0x192>
 8008740:	ab03      	add	r3, sp, #12
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	462a      	mov	r2, r5
 8008746:	4638      	mov	r0, r7
 8008748:	4b0f      	ldr	r3, [pc, #60]	; (8008788 <_svfiprintf_r+0x1f8>)
 800874a:	a904      	add	r1, sp, #16
 800874c:	f3af 8000 	nop.w
 8008750:	1c42      	adds	r2, r0, #1
 8008752:	4606      	mov	r6, r0
 8008754:	d1d6      	bne.n	8008704 <_svfiprintf_r+0x174>
 8008756:	89ab      	ldrh	r3, [r5, #12]
 8008758:	065b      	lsls	r3, r3, #25
 800875a:	f53f af2d 	bmi.w	80085b8 <_svfiprintf_r+0x28>
 800875e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008760:	b01d      	add	sp, #116	; 0x74
 8008762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008766:	ab03      	add	r3, sp, #12
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	462a      	mov	r2, r5
 800876c:	4638      	mov	r0, r7
 800876e:	4b06      	ldr	r3, [pc, #24]	; (8008788 <_svfiprintf_r+0x1f8>)
 8008770:	a904      	add	r1, sp, #16
 8008772:	f000 fa4f 	bl	8008c14 <_printf_i>
 8008776:	e7eb      	b.n	8008750 <_svfiprintf_r+0x1c0>
 8008778:	0800cb18 	.word	0x0800cb18
 800877c:	0800cb1e 	.word	0x0800cb1e
 8008780:	0800cb22 	.word	0x0800cb22
 8008784:	00000000 	.word	0x00000000
 8008788:	080084dd 	.word	0x080084dd

0800878c <_sungetc_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	1c4b      	adds	r3, r1, #1
 8008790:	4614      	mov	r4, r2
 8008792:	d103      	bne.n	800879c <_sungetc_r+0x10>
 8008794:	f04f 35ff 	mov.w	r5, #4294967295
 8008798:	4628      	mov	r0, r5
 800879a:	bd38      	pop	{r3, r4, r5, pc}
 800879c:	8993      	ldrh	r3, [r2, #12]
 800879e:	b2cd      	uxtb	r5, r1
 80087a0:	f023 0320 	bic.w	r3, r3, #32
 80087a4:	8193      	strh	r3, [r2, #12]
 80087a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087a8:	6852      	ldr	r2, [r2, #4]
 80087aa:	b18b      	cbz	r3, 80087d0 <_sungetc_r+0x44>
 80087ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80087ae:	4293      	cmp	r3, r2
 80087b0:	dd08      	ble.n	80087c4 <_sungetc_r+0x38>
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	1e5a      	subs	r2, r3, #1
 80087b6:	6022      	str	r2, [r4, #0]
 80087b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80087bc:	6863      	ldr	r3, [r4, #4]
 80087be:	3301      	adds	r3, #1
 80087c0:	6063      	str	r3, [r4, #4]
 80087c2:	e7e9      	b.n	8008798 <_sungetc_r+0xc>
 80087c4:	4621      	mov	r1, r4
 80087c6:	f000 fd88 	bl	80092da <__submore>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	d0f1      	beq.n	80087b2 <_sungetc_r+0x26>
 80087ce:	e7e1      	b.n	8008794 <_sungetc_r+0x8>
 80087d0:	6921      	ldr	r1, [r4, #16]
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	b151      	cbz	r1, 80087ec <_sungetc_r+0x60>
 80087d6:	4299      	cmp	r1, r3
 80087d8:	d208      	bcs.n	80087ec <_sungetc_r+0x60>
 80087da:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80087de:	42a9      	cmp	r1, r5
 80087e0:	d104      	bne.n	80087ec <_sungetc_r+0x60>
 80087e2:	3b01      	subs	r3, #1
 80087e4:	3201      	adds	r2, #1
 80087e6:	6023      	str	r3, [r4, #0]
 80087e8:	6062      	str	r2, [r4, #4]
 80087ea:	e7d5      	b.n	8008798 <_sungetc_r+0xc>
 80087ec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80087f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087f4:	6363      	str	r3, [r4, #52]	; 0x34
 80087f6:	2303      	movs	r3, #3
 80087f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80087fa:	4623      	mov	r3, r4
 80087fc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	2301      	movs	r3, #1
 8008804:	e7dc      	b.n	80087c0 <_sungetc_r+0x34>

08008806 <__ssrefill_r>:
 8008806:	b510      	push	{r4, lr}
 8008808:	460c      	mov	r4, r1
 800880a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800880c:	b169      	cbz	r1, 800882a <__ssrefill_r+0x24>
 800880e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008812:	4299      	cmp	r1, r3
 8008814:	d001      	beq.n	800881a <__ssrefill_r+0x14>
 8008816:	f7fe ff49 	bl	80076ac <_free_r>
 800881a:	2000      	movs	r0, #0
 800881c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800881e:	6360      	str	r0, [r4, #52]	; 0x34
 8008820:	6063      	str	r3, [r4, #4]
 8008822:	b113      	cbz	r3, 800882a <__ssrefill_r+0x24>
 8008824:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008826:	6023      	str	r3, [r4, #0]
 8008828:	bd10      	pop	{r4, pc}
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	f04f 30ff 	mov.w	r0, #4294967295
 8008830:	6023      	str	r3, [r4, #0]
 8008832:	2300      	movs	r3, #0
 8008834:	6063      	str	r3, [r4, #4]
 8008836:	89a3      	ldrh	r3, [r4, #12]
 8008838:	f043 0320 	orr.w	r3, r3, #32
 800883c:	81a3      	strh	r3, [r4, #12]
 800883e:	e7f3      	b.n	8008828 <__ssrefill_r+0x22>

08008840 <__ssvfiscanf_r>:
 8008840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008844:	460c      	mov	r4, r1
 8008846:	2100      	movs	r1, #0
 8008848:	4606      	mov	r6, r0
 800884a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800884e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008852:	49a6      	ldr	r1, [pc, #664]	; (8008aec <__ssvfiscanf_r+0x2ac>)
 8008854:	f10d 0804 	add.w	r8, sp, #4
 8008858:	91a0      	str	r1, [sp, #640]	; 0x280
 800885a:	49a5      	ldr	r1, [pc, #660]	; (8008af0 <__ssvfiscanf_r+0x2b0>)
 800885c:	4fa5      	ldr	r7, [pc, #660]	; (8008af4 <__ssvfiscanf_r+0x2b4>)
 800885e:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008af8 <__ssvfiscanf_r+0x2b8>
 8008862:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008866:	91a1      	str	r1, [sp, #644]	; 0x284
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	7813      	ldrb	r3, [r2, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 815a 	beq.w	8008b26 <__ssvfiscanf_r+0x2e6>
 8008872:	5cf9      	ldrb	r1, [r7, r3]
 8008874:	1c55      	adds	r5, r2, #1
 8008876:	f011 0108 	ands.w	r1, r1, #8
 800887a:	d019      	beq.n	80088b0 <__ssvfiscanf_r+0x70>
 800887c:	6863      	ldr	r3, [r4, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	dd0f      	ble.n	80088a2 <__ssvfiscanf_r+0x62>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	781a      	ldrb	r2, [r3, #0]
 8008886:	5cba      	ldrb	r2, [r7, r2]
 8008888:	0712      	lsls	r2, r2, #28
 800888a:	d401      	bmi.n	8008890 <__ssvfiscanf_r+0x50>
 800888c:	462a      	mov	r2, r5
 800888e:	e7ec      	b.n	800886a <__ssvfiscanf_r+0x2a>
 8008890:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008892:	3301      	adds	r3, #1
 8008894:	3201      	adds	r2, #1
 8008896:	9245      	str	r2, [sp, #276]	; 0x114
 8008898:	6862      	ldr	r2, [r4, #4]
 800889a:	6023      	str	r3, [r4, #0]
 800889c:	3a01      	subs	r2, #1
 800889e:	6062      	str	r2, [r4, #4]
 80088a0:	e7ec      	b.n	800887c <__ssvfiscanf_r+0x3c>
 80088a2:	4621      	mov	r1, r4
 80088a4:	4630      	mov	r0, r6
 80088a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80088a8:	4798      	blx	r3
 80088aa:	2800      	cmp	r0, #0
 80088ac:	d0e9      	beq.n	8008882 <__ssvfiscanf_r+0x42>
 80088ae:	e7ed      	b.n	800888c <__ssvfiscanf_r+0x4c>
 80088b0:	2b25      	cmp	r3, #37	; 0x25
 80088b2:	d012      	beq.n	80088da <__ssvfiscanf_r+0x9a>
 80088b4:	469a      	mov	sl, r3
 80088b6:	6863      	ldr	r3, [r4, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f340 8092 	ble.w	80089e2 <__ssvfiscanf_r+0x1a2>
 80088be:	6822      	ldr	r2, [r4, #0]
 80088c0:	7813      	ldrb	r3, [r2, #0]
 80088c2:	4553      	cmp	r3, sl
 80088c4:	f040 812f 	bne.w	8008b26 <__ssvfiscanf_r+0x2e6>
 80088c8:	6863      	ldr	r3, [r4, #4]
 80088ca:	3201      	adds	r2, #1
 80088cc:	3b01      	subs	r3, #1
 80088ce:	6063      	str	r3, [r4, #4]
 80088d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80088d2:	6022      	str	r2, [r4, #0]
 80088d4:	3301      	adds	r3, #1
 80088d6:	9345      	str	r3, [sp, #276]	; 0x114
 80088d8:	e7d8      	b.n	800888c <__ssvfiscanf_r+0x4c>
 80088da:	9141      	str	r1, [sp, #260]	; 0x104
 80088dc:	9143      	str	r1, [sp, #268]	; 0x10c
 80088de:	7853      	ldrb	r3, [r2, #1]
 80088e0:	2b2a      	cmp	r3, #42	; 0x2a
 80088e2:	bf04      	itt	eq
 80088e4:	2310      	moveq	r3, #16
 80088e6:	1c95      	addeq	r5, r2, #2
 80088e8:	f04f 020a 	mov.w	r2, #10
 80088ec:	bf08      	it	eq
 80088ee:	9341      	streq	r3, [sp, #260]	; 0x104
 80088f0:	46aa      	mov	sl, r5
 80088f2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80088f6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80088fa:	2b09      	cmp	r3, #9
 80088fc:	d91c      	bls.n	8008938 <__ssvfiscanf_r+0xf8>
 80088fe:	2203      	movs	r2, #3
 8008900:	487d      	ldr	r0, [pc, #500]	; (8008af8 <__ssvfiscanf_r+0x2b8>)
 8008902:	f000 fd5f 	bl	80093c4 <memchr>
 8008906:	b138      	cbz	r0, 8008918 <__ssvfiscanf_r+0xd8>
 8008908:	2301      	movs	r3, #1
 800890a:	4655      	mov	r5, sl
 800890c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800890e:	eba0 0009 	sub.w	r0, r0, r9
 8008912:	4083      	lsls	r3, r0
 8008914:	4313      	orrs	r3, r2
 8008916:	9341      	str	r3, [sp, #260]	; 0x104
 8008918:	f815 3b01 	ldrb.w	r3, [r5], #1
 800891c:	2b78      	cmp	r3, #120	; 0x78
 800891e:	d806      	bhi.n	800892e <__ssvfiscanf_r+0xee>
 8008920:	2b57      	cmp	r3, #87	; 0x57
 8008922:	d810      	bhi.n	8008946 <__ssvfiscanf_r+0x106>
 8008924:	2b25      	cmp	r3, #37	; 0x25
 8008926:	d0c5      	beq.n	80088b4 <__ssvfiscanf_r+0x74>
 8008928:	d856      	bhi.n	80089d8 <__ssvfiscanf_r+0x198>
 800892a:	2b00      	cmp	r3, #0
 800892c:	d064      	beq.n	80089f8 <__ssvfiscanf_r+0x1b8>
 800892e:	2303      	movs	r3, #3
 8008930:	9347      	str	r3, [sp, #284]	; 0x11c
 8008932:	230a      	movs	r3, #10
 8008934:	9342      	str	r3, [sp, #264]	; 0x108
 8008936:	e075      	b.n	8008a24 <__ssvfiscanf_r+0x1e4>
 8008938:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800893a:	4655      	mov	r5, sl
 800893c:	fb02 1103 	mla	r1, r2, r3, r1
 8008940:	3930      	subs	r1, #48	; 0x30
 8008942:	9143      	str	r1, [sp, #268]	; 0x10c
 8008944:	e7d4      	b.n	80088f0 <__ssvfiscanf_r+0xb0>
 8008946:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800894a:	2a20      	cmp	r2, #32
 800894c:	d8ef      	bhi.n	800892e <__ssvfiscanf_r+0xee>
 800894e:	a101      	add	r1, pc, #4	; (adr r1, 8008954 <__ssvfiscanf_r+0x114>)
 8008950:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008954:	08008a07 	.word	0x08008a07
 8008958:	0800892f 	.word	0x0800892f
 800895c:	0800892f 	.word	0x0800892f
 8008960:	08008a65 	.word	0x08008a65
 8008964:	0800892f 	.word	0x0800892f
 8008968:	0800892f 	.word	0x0800892f
 800896c:	0800892f 	.word	0x0800892f
 8008970:	0800892f 	.word	0x0800892f
 8008974:	0800892f 	.word	0x0800892f
 8008978:	0800892f 	.word	0x0800892f
 800897c:	0800892f 	.word	0x0800892f
 8008980:	08008a7b 	.word	0x08008a7b
 8008984:	08008a61 	.word	0x08008a61
 8008988:	080089df 	.word	0x080089df
 800898c:	080089df 	.word	0x080089df
 8008990:	080089df 	.word	0x080089df
 8008994:	0800892f 	.word	0x0800892f
 8008998:	08008a1d 	.word	0x08008a1d
 800899c:	0800892f 	.word	0x0800892f
 80089a0:	0800892f 	.word	0x0800892f
 80089a4:	0800892f 	.word	0x0800892f
 80089a8:	0800892f 	.word	0x0800892f
 80089ac:	08008a8b 	.word	0x08008a8b
 80089b0:	08008a59 	.word	0x08008a59
 80089b4:	080089ff 	.word	0x080089ff
 80089b8:	0800892f 	.word	0x0800892f
 80089bc:	0800892f 	.word	0x0800892f
 80089c0:	08008a87 	.word	0x08008a87
 80089c4:	0800892f 	.word	0x0800892f
 80089c8:	08008a61 	.word	0x08008a61
 80089cc:	0800892f 	.word	0x0800892f
 80089d0:	0800892f 	.word	0x0800892f
 80089d4:	08008a07 	.word	0x08008a07
 80089d8:	3b45      	subs	r3, #69	; 0x45
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d8a7      	bhi.n	800892e <__ssvfiscanf_r+0xee>
 80089de:	2305      	movs	r3, #5
 80089e0:	e01f      	b.n	8008a22 <__ssvfiscanf_r+0x1e2>
 80089e2:	4621      	mov	r1, r4
 80089e4:	4630      	mov	r0, r6
 80089e6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80089e8:	4798      	blx	r3
 80089ea:	2800      	cmp	r0, #0
 80089ec:	f43f af67 	beq.w	80088be <__ssvfiscanf_r+0x7e>
 80089f0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80089f2:	2800      	cmp	r0, #0
 80089f4:	f040 808d 	bne.w	8008b12 <__ssvfiscanf_r+0x2d2>
 80089f8:	f04f 30ff 	mov.w	r0, #4294967295
 80089fc:	e08f      	b.n	8008b1e <__ssvfiscanf_r+0x2de>
 80089fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008a00:	f042 0220 	orr.w	r2, r2, #32
 8008a04:	9241      	str	r2, [sp, #260]	; 0x104
 8008a06:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a0c:	9241      	str	r2, [sp, #260]	; 0x104
 8008a0e:	2210      	movs	r2, #16
 8008a10:	2b6f      	cmp	r3, #111	; 0x6f
 8008a12:	bf34      	ite	cc
 8008a14:	2303      	movcc	r3, #3
 8008a16:	2304      	movcs	r3, #4
 8008a18:	9242      	str	r2, [sp, #264]	; 0x108
 8008a1a:	e002      	b.n	8008a22 <__ssvfiscanf_r+0x1e2>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	9342      	str	r3, [sp, #264]	; 0x108
 8008a20:	2303      	movs	r3, #3
 8008a22:	9347      	str	r3, [sp, #284]	; 0x11c
 8008a24:	6863      	ldr	r3, [r4, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	dd3d      	ble.n	8008aa6 <__ssvfiscanf_r+0x266>
 8008a2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008a2c:	0659      	lsls	r1, r3, #25
 8008a2e:	d404      	bmi.n	8008a3a <__ssvfiscanf_r+0x1fa>
 8008a30:	6823      	ldr	r3, [r4, #0]
 8008a32:	781a      	ldrb	r2, [r3, #0]
 8008a34:	5cba      	ldrb	r2, [r7, r2]
 8008a36:	0712      	lsls	r2, r2, #28
 8008a38:	d43c      	bmi.n	8008ab4 <__ssvfiscanf_r+0x274>
 8008a3a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	dc4b      	bgt.n	8008ad8 <__ssvfiscanf_r+0x298>
 8008a40:	466b      	mov	r3, sp
 8008a42:	4622      	mov	r2, r4
 8008a44:	4630      	mov	r0, r6
 8008a46:	a941      	add	r1, sp, #260	; 0x104
 8008a48:	f000 fa06 	bl	8008e58 <_scanf_chars>
 8008a4c:	2801      	cmp	r0, #1
 8008a4e:	d06a      	beq.n	8008b26 <__ssvfiscanf_r+0x2e6>
 8008a50:	2802      	cmp	r0, #2
 8008a52:	f47f af1b 	bne.w	800888c <__ssvfiscanf_r+0x4c>
 8008a56:	e7cb      	b.n	80089f0 <__ssvfiscanf_r+0x1b0>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	9342      	str	r3, [sp, #264]	; 0x108
 8008a5c:	2304      	movs	r3, #4
 8008a5e:	e7e0      	b.n	8008a22 <__ssvfiscanf_r+0x1e2>
 8008a60:	220a      	movs	r2, #10
 8008a62:	e7d5      	b.n	8008a10 <__ssvfiscanf_r+0x1d0>
 8008a64:	4629      	mov	r1, r5
 8008a66:	4640      	mov	r0, r8
 8008a68:	f000 fbfe 	bl	8009268 <__sccl>
 8008a6c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008a6e:	4605      	mov	r5, r0
 8008a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a74:	9341      	str	r3, [sp, #260]	; 0x104
 8008a76:	2301      	movs	r3, #1
 8008a78:	e7d3      	b.n	8008a22 <__ssvfiscanf_r+0x1e2>
 8008a7a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a80:	9341      	str	r3, [sp, #260]	; 0x104
 8008a82:	2300      	movs	r3, #0
 8008a84:	e7cd      	b.n	8008a22 <__ssvfiscanf_r+0x1e2>
 8008a86:	2302      	movs	r3, #2
 8008a88:	e7cb      	b.n	8008a22 <__ssvfiscanf_r+0x1e2>
 8008a8a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008a8c:	06c3      	lsls	r3, r0, #27
 8008a8e:	f53f aefd 	bmi.w	800888c <__ssvfiscanf_r+0x4c>
 8008a92:	9b00      	ldr	r3, [sp, #0]
 8008a94:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a96:	1d19      	adds	r1, r3, #4
 8008a98:	9100      	str	r1, [sp, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	07c0      	lsls	r0, r0, #31
 8008a9e:	bf4c      	ite	mi
 8008aa0:	801a      	strhmi	r2, [r3, #0]
 8008aa2:	601a      	strpl	r2, [r3, #0]
 8008aa4:	e6f2      	b.n	800888c <__ssvfiscanf_r+0x4c>
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008aac:	4798      	blx	r3
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d0bb      	beq.n	8008a2a <__ssvfiscanf_r+0x1ea>
 8008ab2:	e79d      	b.n	80089f0 <__ssvfiscanf_r+0x1b0>
 8008ab4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008ab6:	3201      	adds	r2, #1
 8008ab8:	9245      	str	r2, [sp, #276]	; 0x114
 8008aba:	6862      	ldr	r2, [r4, #4]
 8008abc:	3a01      	subs	r2, #1
 8008abe:	2a00      	cmp	r2, #0
 8008ac0:	6062      	str	r2, [r4, #4]
 8008ac2:	dd02      	ble.n	8008aca <__ssvfiscanf_r+0x28a>
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	6023      	str	r3, [r4, #0]
 8008ac8:	e7b2      	b.n	8008a30 <__ssvfiscanf_r+0x1f0>
 8008aca:	4621      	mov	r1, r4
 8008acc:	4630      	mov	r0, r6
 8008ace:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008ad0:	4798      	blx	r3
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d0ac      	beq.n	8008a30 <__ssvfiscanf_r+0x1f0>
 8008ad6:	e78b      	b.n	80089f0 <__ssvfiscanf_r+0x1b0>
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	dc0f      	bgt.n	8008afc <__ssvfiscanf_r+0x2bc>
 8008adc:	466b      	mov	r3, sp
 8008ade:	4622      	mov	r2, r4
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	a941      	add	r1, sp, #260	; 0x104
 8008ae4:	f000 fa12 	bl	8008f0c <_scanf_i>
 8008ae8:	e7b0      	b.n	8008a4c <__ssvfiscanf_r+0x20c>
 8008aea:	bf00      	nop
 8008aec:	0800878d 	.word	0x0800878d
 8008af0:	08008807 	.word	0x08008807
 8008af4:	0800c979 	.word	0x0800c979
 8008af8:	0800cb1e 	.word	0x0800cb1e
 8008afc:	4b0b      	ldr	r3, [pc, #44]	; (8008b2c <__ssvfiscanf_r+0x2ec>)
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f43f aec4 	beq.w	800888c <__ssvfiscanf_r+0x4c>
 8008b04:	466b      	mov	r3, sp
 8008b06:	4622      	mov	r2, r4
 8008b08:	4630      	mov	r0, r6
 8008b0a:	a941      	add	r1, sp, #260	; 0x104
 8008b0c:	f7fe f96e 	bl	8006dec <_scanf_float>
 8008b10:	e79c      	b.n	8008a4c <__ssvfiscanf_r+0x20c>
 8008b12:	89a3      	ldrh	r3, [r4, #12]
 8008b14:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008b18:	bf18      	it	ne
 8008b1a:	f04f 30ff 	movne.w	r0, #4294967295
 8008b1e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b26:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008b28:	e7f9      	b.n	8008b1e <__ssvfiscanf_r+0x2de>
 8008b2a:	bf00      	nop
 8008b2c:	08006ded 	.word	0x08006ded

08008b30 <_printf_common>:
 8008b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b34:	4616      	mov	r6, r2
 8008b36:	4699      	mov	r9, r3
 8008b38:	688a      	ldr	r2, [r1, #8]
 8008b3a:	690b      	ldr	r3, [r1, #16]
 8008b3c:	4607      	mov	r7, r0
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	bfb8      	it	lt
 8008b42:	4613      	movlt	r3, r2
 8008b44:	6033      	str	r3, [r6, #0]
 8008b46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b50:	b10a      	cbz	r2, 8008b56 <_printf_common+0x26>
 8008b52:	3301      	adds	r3, #1
 8008b54:	6033      	str	r3, [r6, #0]
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	0699      	lsls	r1, r3, #26
 8008b5a:	bf42      	ittt	mi
 8008b5c:	6833      	ldrmi	r3, [r6, #0]
 8008b5e:	3302      	addmi	r3, #2
 8008b60:	6033      	strmi	r3, [r6, #0]
 8008b62:	6825      	ldr	r5, [r4, #0]
 8008b64:	f015 0506 	ands.w	r5, r5, #6
 8008b68:	d106      	bne.n	8008b78 <_printf_common+0x48>
 8008b6a:	f104 0a19 	add.w	sl, r4, #25
 8008b6e:	68e3      	ldr	r3, [r4, #12]
 8008b70:	6832      	ldr	r2, [r6, #0]
 8008b72:	1a9b      	subs	r3, r3, r2
 8008b74:	42ab      	cmp	r3, r5
 8008b76:	dc2b      	bgt.n	8008bd0 <_printf_common+0xa0>
 8008b78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b7c:	1e13      	subs	r3, r2, #0
 8008b7e:	6822      	ldr	r2, [r4, #0]
 8008b80:	bf18      	it	ne
 8008b82:	2301      	movne	r3, #1
 8008b84:	0692      	lsls	r2, r2, #26
 8008b86:	d430      	bmi.n	8008bea <_printf_common+0xba>
 8008b88:	4649      	mov	r1, r9
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b90:	47c0      	blx	r8
 8008b92:	3001      	adds	r0, #1
 8008b94:	d023      	beq.n	8008bde <_printf_common+0xae>
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	6922      	ldr	r2, [r4, #16]
 8008b9a:	f003 0306 	and.w	r3, r3, #6
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	bf14      	ite	ne
 8008ba2:	2500      	movne	r5, #0
 8008ba4:	6833      	ldreq	r3, [r6, #0]
 8008ba6:	f04f 0600 	mov.w	r6, #0
 8008baa:	bf08      	it	eq
 8008bac:	68e5      	ldreq	r5, [r4, #12]
 8008bae:	f104 041a 	add.w	r4, r4, #26
 8008bb2:	bf08      	it	eq
 8008bb4:	1aed      	subeq	r5, r5, r3
 8008bb6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008bba:	bf08      	it	eq
 8008bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	bfc4      	itt	gt
 8008bc4:	1a9b      	subgt	r3, r3, r2
 8008bc6:	18ed      	addgt	r5, r5, r3
 8008bc8:	42b5      	cmp	r5, r6
 8008bca:	d11a      	bne.n	8008c02 <_printf_common+0xd2>
 8008bcc:	2000      	movs	r0, #0
 8008bce:	e008      	b.n	8008be2 <_printf_common+0xb2>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	4652      	mov	r2, sl
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	47c0      	blx	r8
 8008bda:	3001      	adds	r0, #1
 8008bdc:	d103      	bne.n	8008be6 <_printf_common+0xb6>
 8008bde:	f04f 30ff 	mov.w	r0, #4294967295
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	3501      	adds	r5, #1
 8008be8:	e7c1      	b.n	8008b6e <_printf_common+0x3e>
 8008bea:	2030      	movs	r0, #48	; 0x30
 8008bec:	18e1      	adds	r1, r4, r3
 8008bee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bf2:	1c5a      	adds	r2, r3, #1
 8008bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bf8:	4422      	add	r2, r4
 8008bfa:	3302      	adds	r3, #2
 8008bfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c00:	e7c2      	b.n	8008b88 <_printf_common+0x58>
 8008c02:	2301      	movs	r3, #1
 8008c04:	4622      	mov	r2, r4
 8008c06:	4649      	mov	r1, r9
 8008c08:	4638      	mov	r0, r7
 8008c0a:	47c0      	blx	r8
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d0e6      	beq.n	8008bde <_printf_common+0xae>
 8008c10:	3601      	adds	r6, #1
 8008c12:	e7d9      	b.n	8008bc8 <_printf_common+0x98>

08008c14 <_printf_i>:
 8008c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c18:	7e0f      	ldrb	r7, [r1, #24]
 8008c1a:	4691      	mov	r9, r2
 8008c1c:	2f78      	cmp	r7, #120	; 0x78
 8008c1e:	4680      	mov	r8, r0
 8008c20:	460c      	mov	r4, r1
 8008c22:	469a      	mov	sl, r3
 8008c24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c2a:	d807      	bhi.n	8008c3c <_printf_i+0x28>
 8008c2c:	2f62      	cmp	r7, #98	; 0x62
 8008c2e:	d80a      	bhi.n	8008c46 <_printf_i+0x32>
 8008c30:	2f00      	cmp	r7, #0
 8008c32:	f000 80d5 	beq.w	8008de0 <_printf_i+0x1cc>
 8008c36:	2f58      	cmp	r7, #88	; 0x58
 8008c38:	f000 80c1 	beq.w	8008dbe <_printf_i+0x1aa>
 8008c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c44:	e03a      	b.n	8008cbc <_printf_i+0xa8>
 8008c46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c4a:	2b15      	cmp	r3, #21
 8008c4c:	d8f6      	bhi.n	8008c3c <_printf_i+0x28>
 8008c4e:	a101      	add	r1, pc, #4	; (adr r1, 8008c54 <_printf_i+0x40>)
 8008c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c54:	08008cad 	.word	0x08008cad
 8008c58:	08008cc1 	.word	0x08008cc1
 8008c5c:	08008c3d 	.word	0x08008c3d
 8008c60:	08008c3d 	.word	0x08008c3d
 8008c64:	08008c3d 	.word	0x08008c3d
 8008c68:	08008c3d 	.word	0x08008c3d
 8008c6c:	08008cc1 	.word	0x08008cc1
 8008c70:	08008c3d 	.word	0x08008c3d
 8008c74:	08008c3d 	.word	0x08008c3d
 8008c78:	08008c3d 	.word	0x08008c3d
 8008c7c:	08008c3d 	.word	0x08008c3d
 8008c80:	08008dc7 	.word	0x08008dc7
 8008c84:	08008ced 	.word	0x08008ced
 8008c88:	08008d81 	.word	0x08008d81
 8008c8c:	08008c3d 	.word	0x08008c3d
 8008c90:	08008c3d 	.word	0x08008c3d
 8008c94:	08008de9 	.word	0x08008de9
 8008c98:	08008c3d 	.word	0x08008c3d
 8008c9c:	08008ced 	.word	0x08008ced
 8008ca0:	08008c3d 	.word	0x08008c3d
 8008ca4:	08008c3d 	.word	0x08008c3d
 8008ca8:	08008d89 	.word	0x08008d89
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	1d1a      	adds	r2, r3, #4
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	602a      	str	r2, [r5, #0]
 8008cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e0a0      	b.n	8008e02 <_printf_i+0x1ee>
 8008cc0:	6820      	ldr	r0, [r4, #0]
 8008cc2:	682b      	ldr	r3, [r5, #0]
 8008cc4:	0607      	lsls	r7, r0, #24
 8008cc6:	f103 0104 	add.w	r1, r3, #4
 8008cca:	6029      	str	r1, [r5, #0]
 8008ccc:	d501      	bpl.n	8008cd2 <_printf_i+0xbe>
 8008cce:	681e      	ldr	r6, [r3, #0]
 8008cd0:	e003      	b.n	8008cda <_printf_i+0xc6>
 8008cd2:	0646      	lsls	r6, r0, #25
 8008cd4:	d5fb      	bpl.n	8008cce <_printf_i+0xba>
 8008cd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008cda:	2e00      	cmp	r6, #0
 8008cdc:	da03      	bge.n	8008ce6 <_printf_i+0xd2>
 8008cde:	232d      	movs	r3, #45	; 0x2d
 8008ce0:	4276      	negs	r6, r6
 8008ce2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ce6:	230a      	movs	r3, #10
 8008ce8:	4859      	ldr	r0, [pc, #356]	; (8008e50 <_printf_i+0x23c>)
 8008cea:	e012      	b.n	8008d12 <_printf_i+0xfe>
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	6820      	ldr	r0, [r4, #0]
 8008cf0:	1d19      	adds	r1, r3, #4
 8008cf2:	6029      	str	r1, [r5, #0]
 8008cf4:	0605      	lsls	r5, r0, #24
 8008cf6:	d501      	bpl.n	8008cfc <_printf_i+0xe8>
 8008cf8:	681e      	ldr	r6, [r3, #0]
 8008cfa:	e002      	b.n	8008d02 <_printf_i+0xee>
 8008cfc:	0641      	lsls	r1, r0, #25
 8008cfe:	d5fb      	bpl.n	8008cf8 <_printf_i+0xe4>
 8008d00:	881e      	ldrh	r6, [r3, #0]
 8008d02:	2f6f      	cmp	r7, #111	; 0x6f
 8008d04:	bf0c      	ite	eq
 8008d06:	2308      	moveq	r3, #8
 8008d08:	230a      	movne	r3, #10
 8008d0a:	4851      	ldr	r0, [pc, #324]	; (8008e50 <_printf_i+0x23c>)
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d12:	6865      	ldr	r5, [r4, #4]
 8008d14:	2d00      	cmp	r5, #0
 8008d16:	bfa8      	it	ge
 8008d18:	6821      	ldrge	r1, [r4, #0]
 8008d1a:	60a5      	str	r5, [r4, #8]
 8008d1c:	bfa4      	itt	ge
 8008d1e:	f021 0104 	bicge.w	r1, r1, #4
 8008d22:	6021      	strge	r1, [r4, #0]
 8008d24:	b90e      	cbnz	r6, 8008d2a <_printf_i+0x116>
 8008d26:	2d00      	cmp	r5, #0
 8008d28:	d04b      	beq.n	8008dc2 <_printf_i+0x1ae>
 8008d2a:	4615      	mov	r5, r2
 8008d2c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d30:	fb03 6711 	mls	r7, r3, r1, r6
 8008d34:	5dc7      	ldrb	r7, [r0, r7]
 8008d36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d3a:	4637      	mov	r7, r6
 8008d3c:	42bb      	cmp	r3, r7
 8008d3e:	460e      	mov	r6, r1
 8008d40:	d9f4      	bls.n	8008d2c <_printf_i+0x118>
 8008d42:	2b08      	cmp	r3, #8
 8008d44:	d10b      	bne.n	8008d5e <_printf_i+0x14a>
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	07de      	lsls	r6, r3, #31
 8008d4a:	d508      	bpl.n	8008d5e <_printf_i+0x14a>
 8008d4c:	6923      	ldr	r3, [r4, #16]
 8008d4e:	6861      	ldr	r1, [r4, #4]
 8008d50:	4299      	cmp	r1, r3
 8008d52:	bfde      	ittt	le
 8008d54:	2330      	movle	r3, #48	; 0x30
 8008d56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d5e:	1b52      	subs	r2, r2, r5
 8008d60:	6122      	str	r2, [r4, #16]
 8008d62:	464b      	mov	r3, r9
 8008d64:	4621      	mov	r1, r4
 8008d66:	4640      	mov	r0, r8
 8008d68:	f8cd a000 	str.w	sl, [sp]
 8008d6c:	aa03      	add	r2, sp, #12
 8008d6e:	f7ff fedf 	bl	8008b30 <_printf_common>
 8008d72:	3001      	adds	r0, #1
 8008d74:	d14a      	bne.n	8008e0c <_printf_i+0x1f8>
 8008d76:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7a:	b004      	add	sp, #16
 8008d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	f043 0320 	orr.w	r3, r3, #32
 8008d86:	6023      	str	r3, [r4, #0]
 8008d88:	2778      	movs	r7, #120	; 0x78
 8008d8a:	4832      	ldr	r0, [pc, #200]	; (8008e54 <_printf_i+0x240>)
 8008d8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	6829      	ldr	r1, [r5, #0]
 8008d94:	061f      	lsls	r7, r3, #24
 8008d96:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d9a:	d402      	bmi.n	8008da2 <_printf_i+0x18e>
 8008d9c:	065f      	lsls	r7, r3, #25
 8008d9e:	bf48      	it	mi
 8008da0:	b2b6      	uxthmi	r6, r6
 8008da2:	07df      	lsls	r7, r3, #31
 8008da4:	bf48      	it	mi
 8008da6:	f043 0320 	orrmi.w	r3, r3, #32
 8008daa:	6029      	str	r1, [r5, #0]
 8008dac:	bf48      	it	mi
 8008dae:	6023      	strmi	r3, [r4, #0]
 8008db0:	b91e      	cbnz	r6, 8008dba <_printf_i+0x1a6>
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	f023 0320 	bic.w	r3, r3, #32
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	2310      	movs	r3, #16
 8008dbc:	e7a6      	b.n	8008d0c <_printf_i+0xf8>
 8008dbe:	4824      	ldr	r0, [pc, #144]	; (8008e50 <_printf_i+0x23c>)
 8008dc0:	e7e4      	b.n	8008d8c <_printf_i+0x178>
 8008dc2:	4615      	mov	r5, r2
 8008dc4:	e7bd      	b.n	8008d42 <_printf_i+0x12e>
 8008dc6:	682b      	ldr	r3, [r5, #0]
 8008dc8:	6826      	ldr	r6, [r4, #0]
 8008dca:	1d18      	adds	r0, r3, #4
 8008dcc:	6961      	ldr	r1, [r4, #20]
 8008dce:	6028      	str	r0, [r5, #0]
 8008dd0:	0635      	lsls	r5, r6, #24
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	d501      	bpl.n	8008dda <_printf_i+0x1c6>
 8008dd6:	6019      	str	r1, [r3, #0]
 8008dd8:	e002      	b.n	8008de0 <_printf_i+0x1cc>
 8008dda:	0670      	lsls	r0, r6, #25
 8008ddc:	d5fb      	bpl.n	8008dd6 <_printf_i+0x1c2>
 8008dde:	8019      	strh	r1, [r3, #0]
 8008de0:	2300      	movs	r3, #0
 8008de2:	4615      	mov	r5, r2
 8008de4:	6123      	str	r3, [r4, #16]
 8008de6:	e7bc      	b.n	8008d62 <_printf_i+0x14e>
 8008de8:	682b      	ldr	r3, [r5, #0]
 8008dea:	2100      	movs	r1, #0
 8008dec:	1d1a      	adds	r2, r3, #4
 8008dee:	602a      	str	r2, [r5, #0]
 8008df0:	681d      	ldr	r5, [r3, #0]
 8008df2:	6862      	ldr	r2, [r4, #4]
 8008df4:	4628      	mov	r0, r5
 8008df6:	f000 fae5 	bl	80093c4 <memchr>
 8008dfa:	b108      	cbz	r0, 8008e00 <_printf_i+0x1ec>
 8008dfc:	1b40      	subs	r0, r0, r5
 8008dfe:	6060      	str	r0, [r4, #4]
 8008e00:	6863      	ldr	r3, [r4, #4]
 8008e02:	6123      	str	r3, [r4, #16]
 8008e04:	2300      	movs	r3, #0
 8008e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e0a:	e7aa      	b.n	8008d62 <_printf_i+0x14e>
 8008e0c:	462a      	mov	r2, r5
 8008e0e:	4649      	mov	r1, r9
 8008e10:	4640      	mov	r0, r8
 8008e12:	6923      	ldr	r3, [r4, #16]
 8008e14:	47d0      	blx	sl
 8008e16:	3001      	adds	r0, #1
 8008e18:	d0ad      	beq.n	8008d76 <_printf_i+0x162>
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	079b      	lsls	r3, r3, #30
 8008e1e:	d413      	bmi.n	8008e48 <_printf_i+0x234>
 8008e20:	68e0      	ldr	r0, [r4, #12]
 8008e22:	9b03      	ldr	r3, [sp, #12]
 8008e24:	4298      	cmp	r0, r3
 8008e26:	bfb8      	it	lt
 8008e28:	4618      	movlt	r0, r3
 8008e2a:	e7a6      	b.n	8008d7a <_printf_i+0x166>
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	4632      	mov	r2, r6
 8008e30:	4649      	mov	r1, r9
 8008e32:	4640      	mov	r0, r8
 8008e34:	47d0      	blx	sl
 8008e36:	3001      	adds	r0, #1
 8008e38:	d09d      	beq.n	8008d76 <_printf_i+0x162>
 8008e3a:	3501      	adds	r5, #1
 8008e3c:	68e3      	ldr	r3, [r4, #12]
 8008e3e:	9903      	ldr	r1, [sp, #12]
 8008e40:	1a5b      	subs	r3, r3, r1
 8008e42:	42ab      	cmp	r3, r5
 8008e44:	dcf2      	bgt.n	8008e2c <_printf_i+0x218>
 8008e46:	e7eb      	b.n	8008e20 <_printf_i+0x20c>
 8008e48:	2500      	movs	r5, #0
 8008e4a:	f104 0619 	add.w	r6, r4, #25
 8008e4e:	e7f5      	b.n	8008e3c <_printf_i+0x228>
 8008e50:	0800cb29 	.word	0x0800cb29
 8008e54:	0800cb3a 	.word	0x0800cb3a

08008e58 <_scanf_chars>:
 8008e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e5c:	4615      	mov	r5, r2
 8008e5e:	688a      	ldr	r2, [r1, #8]
 8008e60:	4680      	mov	r8, r0
 8008e62:	460c      	mov	r4, r1
 8008e64:	b932      	cbnz	r2, 8008e74 <_scanf_chars+0x1c>
 8008e66:	698a      	ldr	r2, [r1, #24]
 8008e68:	2a00      	cmp	r2, #0
 8008e6a:	bf0c      	ite	eq
 8008e6c:	2201      	moveq	r2, #1
 8008e6e:	f04f 32ff 	movne.w	r2, #4294967295
 8008e72:	608a      	str	r2, [r1, #8]
 8008e74:	2700      	movs	r7, #0
 8008e76:	6822      	ldr	r2, [r4, #0]
 8008e78:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008f08 <_scanf_chars+0xb0>
 8008e7c:	06d1      	lsls	r1, r2, #27
 8008e7e:	bf5f      	itttt	pl
 8008e80:	681a      	ldrpl	r2, [r3, #0]
 8008e82:	1d11      	addpl	r1, r2, #4
 8008e84:	6019      	strpl	r1, [r3, #0]
 8008e86:	6816      	ldrpl	r6, [r2, #0]
 8008e88:	69a0      	ldr	r0, [r4, #24]
 8008e8a:	b188      	cbz	r0, 8008eb0 <_scanf_chars+0x58>
 8008e8c:	2801      	cmp	r0, #1
 8008e8e:	d107      	bne.n	8008ea0 <_scanf_chars+0x48>
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	781a      	ldrb	r2, [r3, #0]
 8008e94:	6963      	ldr	r3, [r4, #20]
 8008e96:	5c9b      	ldrb	r3, [r3, r2]
 8008e98:	b953      	cbnz	r3, 8008eb0 <_scanf_chars+0x58>
 8008e9a:	2f00      	cmp	r7, #0
 8008e9c:	d031      	beq.n	8008f02 <_scanf_chars+0xaa>
 8008e9e:	e022      	b.n	8008ee6 <_scanf_chars+0x8e>
 8008ea0:	2802      	cmp	r0, #2
 8008ea2:	d120      	bne.n	8008ee6 <_scanf_chars+0x8e>
 8008ea4:	682b      	ldr	r3, [r5, #0]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008eac:	071b      	lsls	r3, r3, #28
 8008eae:	d41a      	bmi.n	8008ee6 <_scanf_chars+0x8e>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	3701      	adds	r7, #1
 8008eb4:	06da      	lsls	r2, r3, #27
 8008eb6:	bf5e      	ittt	pl
 8008eb8:	682b      	ldrpl	r3, [r5, #0]
 8008eba:	781b      	ldrbpl	r3, [r3, #0]
 8008ebc:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008ec0:	682a      	ldr	r2, [r5, #0]
 8008ec2:	686b      	ldr	r3, [r5, #4]
 8008ec4:	3201      	adds	r2, #1
 8008ec6:	602a      	str	r2, [r5, #0]
 8008ec8:	68a2      	ldr	r2, [r4, #8]
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	3a01      	subs	r2, #1
 8008ece:	606b      	str	r3, [r5, #4]
 8008ed0:	60a2      	str	r2, [r4, #8]
 8008ed2:	b142      	cbz	r2, 8008ee6 <_scanf_chars+0x8e>
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	dcd7      	bgt.n	8008e88 <_scanf_chars+0x30>
 8008ed8:	4629      	mov	r1, r5
 8008eda:	4640      	mov	r0, r8
 8008edc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008ee0:	4798      	blx	r3
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d0d0      	beq.n	8008e88 <_scanf_chars+0x30>
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	f013 0310 	ands.w	r3, r3, #16
 8008eec:	d105      	bne.n	8008efa <_scanf_chars+0xa2>
 8008eee:	68e2      	ldr	r2, [r4, #12]
 8008ef0:	3201      	adds	r2, #1
 8008ef2:	60e2      	str	r2, [r4, #12]
 8008ef4:	69a2      	ldr	r2, [r4, #24]
 8008ef6:	b102      	cbz	r2, 8008efa <_scanf_chars+0xa2>
 8008ef8:	7033      	strb	r3, [r6, #0]
 8008efa:	2000      	movs	r0, #0
 8008efc:	6923      	ldr	r3, [r4, #16]
 8008efe:	443b      	add	r3, r7
 8008f00:	6123      	str	r3, [r4, #16]
 8008f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f06:	bf00      	nop
 8008f08:	0800c979 	.word	0x0800c979

08008f0c <_scanf_i>:
 8008f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f10:	460c      	mov	r4, r1
 8008f12:	4698      	mov	r8, r3
 8008f14:	4b72      	ldr	r3, [pc, #456]	; (80090e0 <_scanf_i+0x1d4>)
 8008f16:	b087      	sub	sp, #28
 8008f18:	4682      	mov	sl, r0
 8008f1a:	4616      	mov	r6, r2
 8008f1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f20:	ab03      	add	r3, sp, #12
 8008f22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008f26:	4b6f      	ldr	r3, [pc, #444]	; (80090e4 <_scanf_i+0x1d8>)
 8008f28:	69a1      	ldr	r1, [r4, #24]
 8008f2a:	4a6f      	ldr	r2, [pc, #444]	; (80090e8 <_scanf_i+0x1dc>)
 8008f2c:	4627      	mov	r7, r4
 8008f2e:	2903      	cmp	r1, #3
 8008f30:	bf18      	it	ne
 8008f32:	461a      	movne	r2, r3
 8008f34:	68a3      	ldr	r3, [r4, #8]
 8008f36:	9201      	str	r2, [sp, #4]
 8008f38:	1e5a      	subs	r2, r3, #1
 8008f3a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f3e:	bf81      	itttt	hi
 8008f40:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f44:	eb03 0905 	addhi.w	r9, r3, r5
 8008f48:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f4c:	60a3      	strhi	r3, [r4, #8]
 8008f4e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008f52:	bf98      	it	ls
 8008f54:	f04f 0900 	movls.w	r9, #0
 8008f58:	463d      	mov	r5, r7
 8008f5a:	f04f 0b00 	mov.w	fp, #0
 8008f5e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008f62:	6023      	str	r3, [r4, #0]
 8008f64:	6831      	ldr	r1, [r6, #0]
 8008f66:	ab03      	add	r3, sp, #12
 8008f68:	2202      	movs	r2, #2
 8008f6a:	7809      	ldrb	r1, [r1, #0]
 8008f6c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008f70:	f000 fa28 	bl	80093c4 <memchr>
 8008f74:	b328      	cbz	r0, 8008fc2 <_scanf_i+0xb6>
 8008f76:	f1bb 0f01 	cmp.w	fp, #1
 8008f7a:	d159      	bne.n	8009030 <_scanf_i+0x124>
 8008f7c:	6862      	ldr	r2, [r4, #4]
 8008f7e:	b92a      	cbnz	r2, 8008f8c <_scanf_i+0x80>
 8008f80:	2308      	movs	r3, #8
 8008f82:	6822      	ldr	r2, [r4, #0]
 8008f84:	6063      	str	r3, [r4, #4]
 8008f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f8a:	6022      	str	r2, [r4, #0]
 8008f8c:	6822      	ldr	r2, [r4, #0]
 8008f8e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008f92:	6022      	str	r2, [r4, #0]
 8008f94:	68a2      	ldr	r2, [r4, #8]
 8008f96:	1e51      	subs	r1, r2, #1
 8008f98:	60a1      	str	r1, [r4, #8]
 8008f9a:	b192      	cbz	r2, 8008fc2 <_scanf_i+0xb6>
 8008f9c:	6832      	ldr	r2, [r6, #0]
 8008f9e:	1c51      	adds	r1, r2, #1
 8008fa0:	6031      	str	r1, [r6, #0]
 8008fa2:	7812      	ldrb	r2, [r2, #0]
 8008fa4:	f805 2b01 	strb.w	r2, [r5], #1
 8008fa8:	6872      	ldr	r2, [r6, #4]
 8008faa:	3a01      	subs	r2, #1
 8008fac:	2a00      	cmp	r2, #0
 8008fae:	6072      	str	r2, [r6, #4]
 8008fb0:	dc07      	bgt.n	8008fc2 <_scanf_i+0xb6>
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	4650      	mov	r0, sl
 8008fb6:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008fba:	4790      	blx	r2
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	f040 8085 	bne.w	80090cc <_scanf_i+0x1c0>
 8008fc2:	f10b 0b01 	add.w	fp, fp, #1
 8008fc6:	f1bb 0f03 	cmp.w	fp, #3
 8008fca:	d1cb      	bne.n	8008f64 <_scanf_i+0x58>
 8008fcc:	6863      	ldr	r3, [r4, #4]
 8008fce:	b90b      	cbnz	r3, 8008fd4 <_scanf_i+0xc8>
 8008fd0:	230a      	movs	r3, #10
 8008fd2:	6063      	str	r3, [r4, #4]
 8008fd4:	6863      	ldr	r3, [r4, #4]
 8008fd6:	4945      	ldr	r1, [pc, #276]	; (80090ec <_scanf_i+0x1e0>)
 8008fd8:	6960      	ldr	r0, [r4, #20]
 8008fda:	1ac9      	subs	r1, r1, r3
 8008fdc:	f000 f944 	bl	8009268 <__sccl>
 8008fe0:	f04f 0b00 	mov.w	fp, #0
 8008fe4:	68a3      	ldr	r3, [r4, #8]
 8008fe6:	6822      	ldr	r2, [r4, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d03d      	beq.n	8009068 <_scanf_i+0x15c>
 8008fec:	6831      	ldr	r1, [r6, #0]
 8008fee:	6960      	ldr	r0, [r4, #20]
 8008ff0:	f891 c000 	ldrb.w	ip, [r1]
 8008ff4:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d035      	beq.n	8009068 <_scanf_i+0x15c>
 8008ffc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009000:	d124      	bne.n	800904c <_scanf_i+0x140>
 8009002:	0510      	lsls	r0, r2, #20
 8009004:	d522      	bpl.n	800904c <_scanf_i+0x140>
 8009006:	f10b 0b01 	add.w	fp, fp, #1
 800900a:	f1b9 0f00 	cmp.w	r9, #0
 800900e:	d003      	beq.n	8009018 <_scanf_i+0x10c>
 8009010:	3301      	adds	r3, #1
 8009012:	f109 39ff 	add.w	r9, r9, #4294967295
 8009016:	60a3      	str	r3, [r4, #8]
 8009018:	6873      	ldr	r3, [r6, #4]
 800901a:	3b01      	subs	r3, #1
 800901c:	2b00      	cmp	r3, #0
 800901e:	6073      	str	r3, [r6, #4]
 8009020:	dd1b      	ble.n	800905a <_scanf_i+0x14e>
 8009022:	6833      	ldr	r3, [r6, #0]
 8009024:	3301      	adds	r3, #1
 8009026:	6033      	str	r3, [r6, #0]
 8009028:	68a3      	ldr	r3, [r4, #8]
 800902a:	3b01      	subs	r3, #1
 800902c:	60a3      	str	r3, [r4, #8]
 800902e:	e7d9      	b.n	8008fe4 <_scanf_i+0xd8>
 8009030:	f1bb 0f02 	cmp.w	fp, #2
 8009034:	d1ae      	bne.n	8008f94 <_scanf_i+0x88>
 8009036:	6822      	ldr	r2, [r4, #0]
 8009038:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800903c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009040:	d1bf      	bne.n	8008fc2 <_scanf_i+0xb6>
 8009042:	2310      	movs	r3, #16
 8009044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009048:	6063      	str	r3, [r4, #4]
 800904a:	e7a2      	b.n	8008f92 <_scanf_i+0x86>
 800904c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009050:	6022      	str	r2, [r4, #0]
 8009052:	780b      	ldrb	r3, [r1, #0]
 8009054:	f805 3b01 	strb.w	r3, [r5], #1
 8009058:	e7de      	b.n	8009018 <_scanf_i+0x10c>
 800905a:	4631      	mov	r1, r6
 800905c:	4650      	mov	r0, sl
 800905e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009062:	4798      	blx	r3
 8009064:	2800      	cmp	r0, #0
 8009066:	d0df      	beq.n	8009028 <_scanf_i+0x11c>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	05d9      	lsls	r1, r3, #23
 800906c:	d50d      	bpl.n	800908a <_scanf_i+0x17e>
 800906e:	42bd      	cmp	r5, r7
 8009070:	d909      	bls.n	8009086 <_scanf_i+0x17a>
 8009072:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009076:	4632      	mov	r2, r6
 8009078:	4650      	mov	r0, sl
 800907a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800907e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009082:	4798      	blx	r3
 8009084:	464d      	mov	r5, r9
 8009086:	42bd      	cmp	r5, r7
 8009088:	d028      	beq.n	80090dc <_scanf_i+0x1d0>
 800908a:	6822      	ldr	r2, [r4, #0]
 800908c:	f012 0210 	ands.w	r2, r2, #16
 8009090:	d113      	bne.n	80090ba <_scanf_i+0x1ae>
 8009092:	702a      	strb	r2, [r5, #0]
 8009094:	4639      	mov	r1, r7
 8009096:	6863      	ldr	r3, [r4, #4]
 8009098:	4650      	mov	r0, sl
 800909a:	9e01      	ldr	r6, [sp, #4]
 800909c:	47b0      	blx	r6
 800909e:	f8d8 3000 	ldr.w	r3, [r8]
 80090a2:	6821      	ldr	r1, [r4, #0]
 80090a4:	1d1a      	adds	r2, r3, #4
 80090a6:	f8c8 2000 	str.w	r2, [r8]
 80090aa:	f011 0f20 	tst.w	r1, #32
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	d00f      	beq.n	80090d2 <_scanf_i+0x1c6>
 80090b2:	6018      	str	r0, [r3, #0]
 80090b4:	68e3      	ldr	r3, [r4, #12]
 80090b6:	3301      	adds	r3, #1
 80090b8:	60e3      	str	r3, [r4, #12]
 80090ba:	2000      	movs	r0, #0
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	1bed      	subs	r5, r5, r7
 80090c0:	445d      	add	r5, fp
 80090c2:	442b      	add	r3, r5
 80090c4:	6123      	str	r3, [r4, #16]
 80090c6:	b007      	add	sp, #28
 80090c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090cc:	f04f 0b00 	mov.w	fp, #0
 80090d0:	e7ca      	b.n	8009068 <_scanf_i+0x15c>
 80090d2:	07ca      	lsls	r2, r1, #31
 80090d4:	bf4c      	ite	mi
 80090d6:	8018      	strhmi	r0, [r3, #0]
 80090d8:	6018      	strpl	r0, [r3, #0]
 80090da:	e7eb      	b.n	80090b4 <_scanf_i+0x1a8>
 80090dc:	2001      	movs	r0, #1
 80090de:	e7f2      	b.n	80090c6 <_scanf_i+0x1ba>
 80090e0:	0800b460 	.word	0x0800b460
 80090e4:	0800a551 	.word	0x0800a551
 80090e8:	08006de9 	.word	0x08006de9
 80090ec:	0800cb5b 	.word	0x0800cb5b

080090f0 <__sflush_r>:
 80090f0:	898a      	ldrh	r2, [r1, #12]
 80090f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f4:	4605      	mov	r5, r0
 80090f6:	0710      	lsls	r0, r2, #28
 80090f8:	460c      	mov	r4, r1
 80090fa:	d457      	bmi.n	80091ac <__sflush_r+0xbc>
 80090fc:	684b      	ldr	r3, [r1, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	dc04      	bgt.n	800910c <__sflush_r+0x1c>
 8009102:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009104:	2b00      	cmp	r3, #0
 8009106:	dc01      	bgt.n	800910c <__sflush_r+0x1c>
 8009108:	2000      	movs	r0, #0
 800910a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800910c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800910e:	2e00      	cmp	r6, #0
 8009110:	d0fa      	beq.n	8009108 <__sflush_r+0x18>
 8009112:	2300      	movs	r3, #0
 8009114:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009118:	682f      	ldr	r7, [r5, #0]
 800911a:	6a21      	ldr	r1, [r4, #32]
 800911c:	602b      	str	r3, [r5, #0]
 800911e:	d032      	beq.n	8009186 <__sflush_r+0x96>
 8009120:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009122:	89a3      	ldrh	r3, [r4, #12]
 8009124:	075a      	lsls	r2, r3, #29
 8009126:	d505      	bpl.n	8009134 <__sflush_r+0x44>
 8009128:	6863      	ldr	r3, [r4, #4]
 800912a:	1ac0      	subs	r0, r0, r3
 800912c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800912e:	b10b      	cbz	r3, 8009134 <__sflush_r+0x44>
 8009130:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009132:	1ac0      	subs	r0, r0, r3
 8009134:	2300      	movs	r3, #0
 8009136:	4602      	mov	r2, r0
 8009138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800913a:	4628      	mov	r0, r5
 800913c:	6a21      	ldr	r1, [r4, #32]
 800913e:	47b0      	blx	r6
 8009140:	1c43      	adds	r3, r0, #1
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	d106      	bne.n	8009154 <__sflush_r+0x64>
 8009146:	6829      	ldr	r1, [r5, #0]
 8009148:	291d      	cmp	r1, #29
 800914a:	d82b      	bhi.n	80091a4 <__sflush_r+0xb4>
 800914c:	4a28      	ldr	r2, [pc, #160]	; (80091f0 <__sflush_r+0x100>)
 800914e:	410a      	asrs	r2, r1
 8009150:	07d6      	lsls	r6, r2, #31
 8009152:	d427      	bmi.n	80091a4 <__sflush_r+0xb4>
 8009154:	2200      	movs	r2, #0
 8009156:	6062      	str	r2, [r4, #4]
 8009158:	6922      	ldr	r2, [r4, #16]
 800915a:	04d9      	lsls	r1, r3, #19
 800915c:	6022      	str	r2, [r4, #0]
 800915e:	d504      	bpl.n	800916a <__sflush_r+0x7a>
 8009160:	1c42      	adds	r2, r0, #1
 8009162:	d101      	bne.n	8009168 <__sflush_r+0x78>
 8009164:	682b      	ldr	r3, [r5, #0]
 8009166:	b903      	cbnz	r3, 800916a <__sflush_r+0x7a>
 8009168:	6560      	str	r0, [r4, #84]	; 0x54
 800916a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800916c:	602f      	str	r7, [r5, #0]
 800916e:	2900      	cmp	r1, #0
 8009170:	d0ca      	beq.n	8009108 <__sflush_r+0x18>
 8009172:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009176:	4299      	cmp	r1, r3
 8009178:	d002      	beq.n	8009180 <__sflush_r+0x90>
 800917a:	4628      	mov	r0, r5
 800917c:	f7fe fa96 	bl	80076ac <_free_r>
 8009180:	2000      	movs	r0, #0
 8009182:	6360      	str	r0, [r4, #52]	; 0x34
 8009184:	e7c1      	b.n	800910a <__sflush_r+0x1a>
 8009186:	2301      	movs	r3, #1
 8009188:	4628      	mov	r0, r5
 800918a:	47b0      	blx	r6
 800918c:	1c41      	adds	r1, r0, #1
 800918e:	d1c8      	bne.n	8009122 <__sflush_r+0x32>
 8009190:	682b      	ldr	r3, [r5, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0c5      	beq.n	8009122 <__sflush_r+0x32>
 8009196:	2b1d      	cmp	r3, #29
 8009198:	d001      	beq.n	800919e <__sflush_r+0xae>
 800919a:	2b16      	cmp	r3, #22
 800919c:	d101      	bne.n	80091a2 <__sflush_r+0xb2>
 800919e:	602f      	str	r7, [r5, #0]
 80091a0:	e7b2      	b.n	8009108 <__sflush_r+0x18>
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091a8:	81a3      	strh	r3, [r4, #12]
 80091aa:	e7ae      	b.n	800910a <__sflush_r+0x1a>
 80091ac:	690f      	ldr	r7, [r1, #16]
 80091ae:	2f00      	cmp	r7, #0
 80091b0:	d0aa      	beq.n	8009108 <__sflush_r+0x18>
 80091b2:	0793      	lsls	r3, r2, #30
 80091b4:	bf18      	it	ne
 80091b6:	2300      	movne	r3, #0
 80091b8:	680e      	ldr	r6, [r1, #0]
 80091ba:	bf08      	it	eq
 80091bc:	694b      	ldreq	r3, [r1, #20]
 80091be:	1bf6      	subs	r6, r6, r7
 80091c0:	600f      	str	r7, [r1, #0]
 80091c2:	608b      	str	r3, [r1, #8]
 80091c4:	2e00      	cmp	r6, #0
 80091c6:	dd9f      	ble.n	8009108 <__sflush_r+0x18>
 80091c8:	4633      	mov	r3, r6
 80091ca:	463a      	mov	r2, r7
 80091cc:	4628      	mov	r0, r5
 80091ce:	6a21      	ldr	r1, [r4, #32]
 80091d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80091d4:	47e0      	blx	ip
 80091d6:	2800      	cmp	r0, #0
 80091d8:	dc06      	bgt.n	80091e8 <__sflush_r+0xf8>
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	f04f 30ff 	mov.w	r0, #4294967295
 80091e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091e4:	81a3      	strh	r3, [r4, #12]
 80091e6:	e790      	b.n	800910a <__sflush_r+0x1a>
 80091e8:	4407      	add	r7, r0
 80091ea:	1a36      	subs	r6, r6, r0
 80091ec:	e7ea      	b.n	80091c4 <__sflush_r+0xd4>
 80091ee:	bf00      	nop
 80091f0:	dfbffffe 	.word	0xdfbffffe

080091f4 <_fflush_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	690b      	ldr	r3, [r1, #16]
 80091f8:	4605      	mov	r5, r0
 80091fa:	460c      	mov	r4, r1
 80091fc:	b913      	cbnz	r3, 8009204 <_fflush_r+0x10>
 80091fe:	2500      	movs	r5, #0
 8009200:	4628      	mov	r0, r5
 8009202:	bd38      	pop	{r3, r4, r5, pc}
 8009204:	b118      	cbz	r0, 800920e <_fflush_r+0x1a>
 8009206:	6a03      	ldr	r3, [r0, #32]
 8009208:	b90b      	cbnz	r3, 800920e <_fflush_r+0x1a>
 800920a:	f7fe f889 	bl	8007320 <__sinit>
 800920e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0f3      	beq.n	80091fe <_fflush_r+0xa>
 8009216:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009218:	07d0      	lsls	r0, r2, #31
 800921a:	d404      	bmi.n	8009226 <_fflush_r+0x32>
 800921c:	0599      	lsls	r1, r3, #22
 800921e:	d402      	bmi.n	8009226 <_fflush_r+0x32>
 8009220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009222:	f7fe fa10 	bl	8007646 <__retarget_lock_acquire_recursive>
 8009226:	4628      	mov	r0, r5
 8009228:	4621      	mov	r1, r4
 800922a:	f7ff ff61 	bl	80090f0 <__sflush_r>
 800922e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009230:	4605      	mov	r5, r0
 8009232:	07da      	lsls	r2, r3, #31
 8009234:	d4e4      	bmi.n	8009200 <_fflush_r+0xc>
 8009236:	89a3      	ldrh	r3, [r4, #12]
 8009238:	059b      	lsls	r3, r3, #22
 800923a:	d4e1      	bmi.n	8009200 <_fflush_r+0xc>
 800923c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800923e:	f7fe fa03 	bl	8007648 <__retarget_lock_release_recursive>
 8009242:	e7dd      	b.n	8009200 <_fflush_r+0xc>

08009244 <fiprintf>:
 8009244:	b40e      	push	{r1, r2, r3}
 8009246:	b503      	push	{r0, r1, lr}
 8009248:	4601      	mov	r1, r0
 800924a:	ab03      	add	r3, sp, #12
 800924c:	4805      	ldr	r0, [pc, #20]	; (8009264 <fiprintf+0x20>)
 800924e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009252:	6800      	ldr	r0, [r0, #0]
 8009254:	9301      	str	r3, [sp, #4]
 8009256:	f001 f9b1 	bl	800a5bc <_vfiprintf_r>
 800925a:	b002      	add	sp, #8
 800925c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009260:	b003      	add	sp, #12
 8009262:	4770      	bx	lr
 8009264:	2000034c 	.word	0x2000034c

08009268 <__sccl>:
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	780b      	ldrb	r3, [r1, #0]
 800926c:	4604      	mov	r4, r0
 800926e:	2b5e      	cmp	r3, #94	; 0x5e
 8009270:	bf0b      	itete	eq
 8009272:	784b      	ldrbeq	r3, [r1, #1]
 8009274:	1c4a      	addne	r2, r1, #1
 8009276:	1c8a      	addeq	r2, r1, #2
 8009278:	2100      	movne	r1, #0
 800927a:	bf08      	it	eq
 800927c:	2101      	moveq	r1, #1
 800927e:	3801      	subs	r0, #1
 8009280:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009284:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009288:	42a8      	cmp	r0, r5
 800928a:	d1fb      	bne.n	8009284 <__sccl+0x1c>
 800928c:	b90b      	cbnz	r3, 8009292 <__sccl+0x2a>
 800928e:	1e50      	subs	r0, r2, #1
 8009290:	bd70      	pop	{r4, r5, r6, pc}
 8009292:	f081 0101 	eor.w	r1, r1, #1
 8009296:	4610      	mov	r0, r2
 8009298:	54e1      	strb	r1, [r4, r3]
 800929a:	4602      	mov	r2, r0
 800929c:	f812 5b01 	ldrb.w	r5, [r2], #1
 80092a0:	2d2d      	cmp	r5, #45	; 0x2d
 80092a2:	d005      	beq.n	80092b0 <__sccl+0x48>
 80092a4:	2d5d      	cmp	r5, #93	; 0x5d
 80092a6:	d016      	beq.n	80092d6 <__sccl+0x6e>
 80092a8:	2d00      	cmp	r5, #0
 80092aa:	d0f1      	beq.n	8009290 <__sccl+0x28>
 80092ac:	462b      	mov	r3, r5
 80092ae:	e7f2      	b.n	8009296 <__sccl+0x2e>
 80092b0:	7846      	ldrb	r6, [r0, #1]
 80092b2:	2e5d      	cmp	r6, #93	; 0x5d
 80092b4:	d0fa      	beq.n	80092ac <__sccl+0x44>
 80092b6:	42b3      	cmp	r3, r6
 80092b8:	dcf8      	bgt.n	80092ac <__sccl+0x44>
 80092ba:	461a      	mov	r2, r3
 80092bc:	3002      	adds	r0, #2
 80092be:	3201      	adds	r2, #1
 80092c0:	4296      	cmp	r6, r2
 80092c2:	54a1      	strb	r1, [r4, r2]
 80092c4:	dcfb      	bgt.n	80092be <__sccl+0x56>
 80092c6:	1af2      	subs	r2, r6, r3
 80092c8:	3a01      	subs	r2, #1
 80092ca:	42b3      	cmp	r3, r6
 80092cc:	bfa8      	it	ge
 80092ce:	2200      	movge	r2, #0
 80092d0:	1c5d      	adds	r5, r3, #1
 80092d2:	18ab      	adds	r3, r5, r2
 80092d4:	e7e1      	b.n	800929a <__sccl+0x32>
 80092d6:	4610      	mov	r0, r2
 80092d8:	e7da      	b.n	8009290 <__sccl+0x28>

080092da <__submore>:
 80092da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092de:	460c      	mov	r4, r1
 80092e0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80092e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092e6:	4299      	cmp	r1, r3
 80092e8:	d11b      	bne.n	8009322 <__submore+0x48>
 80092ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80092ee:	f7fe fa4d 	bl	800778c <_malloc_r>
 80092f2:	b918      	cbnz	r0, 80092fc <__submore+0x22>
 80092f4:	f04f 30ff 	mov.w	r0, #4294967295
 80092f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009300:	63a3      	str	r3, [r4, #56]	; 0x38
 8009302:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009306:	6360      	str	r0, [r4, #52]	; 0x34
 8009308:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800930c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009310:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009314:	7043      	strb	r3, [r0, #1]
 8009316:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800931a:	7003      	strb	r3, [r0, #0]
 800931c:	6020      	str	r0, [r4, #0]
 800931e:	2000      	movs	r0, #0
 8009320:	e7ea      	b.n	80092f8 <__submore+0x1e>
 8009322:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009324:	0077      	lsls	r7, r6, #1
 8009326:	463a      	mov	r2, r7
 8009328:	f001 f870 	bl	800a40c <_realloc_r>
 800932c:	4605      	mov	r5, r0
 800932e:	2800      	cmp	r0, #0
 8009330:	d0e0      	beq.n	80092f4 <__submore+0x1a>
 8009332:	eb00 0806 	add.w	r8, r0, r6
 8009336:	4601      	mov	r1, r0
 8009338:	4632      	mov	r2, r6
 800933a:	4640      	mov	r0, r8
 800933c:	f7fe f985 	bl	800764a <memcpy>
 8009340:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009344:	f8c4 8000 	str.w	r8, [r4]
 8009348:	e7e9      	b.n	800931e <__submore+0x44>

0800934a <memmove>:
 800934a:	4288      	cmp	r0, r1
 800934c:	b510      	push	{r4, lr}
 800934e:	eb01 0402 	add.w	r4, r1, r2
 8009352:	d902      	bls.n	800935a <memmove+0x10>
 8009354:	4284      	cmp	r4, r0
 8009356:	4623      	mov	r3, r4
 8009358:	d807      	bhi.n	800936a <memmove+0x20>
 800935a:	1e43      	subs	r3, r0, #1
 800935c:	42a1      	cmp	r1, r4
 800935e:	d008      	beq.n	8009372 <memmove+0x28>
 8009360:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009364:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009368:	e7f8      	b.n	800935c <memmove+0x12>
 800936a:	4601      	mov	r1, r0
 800936c:	4402      	add	r2, r0
 800936e:	428a      	cmp	r2, r1
 8009370:	d100      	bne.n	8009374 <memmove+0x2a>
 8009372:	bd10      	pop	{r4, pc}
 8009374:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009378:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800937c:	e7f7      	b.n	800936e <memmove+0x24>

0800937e <strncmp>:
 800937e:	b510      	push	{r4, lr}
 8009380:	b16a      	cbz	r2, 800939e <strncmp+0x20>
 8009382:	3901      	subs	r1, #1
 8009384:	1884      	adds	r4, r0, r2
 8009386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800938a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800938e:	429a      	cmp	r2, r3
 8009390:	d103      	bne.n	800939a <strncmp+0x1c>
 8009392:	42a0      	cmp	r0, r4
 8009394:	d001      	beq.n	800939a <strncmp+0x1c>
 8009396:	2a00      	cmp	r2, #0
 8009398:	d1f5      	bne.n	8009386 <strncmp+0x8>
 800939a:	1ad0      	subs	r0, r2, r3
 800939c:	bd10      	pop	{r4, pc}
 800939e:	4610      	mov	r0, r2
 80093a0:	e7fc      	b.n	800939c <strncmp+0x1e>
	...

080093a4 <_sbrk_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	2300      	movs	r3, #0
 80093a8:	4d05      	ldr	r5, [pc, #20]	; (80093c0 <_sbrk_r+0x1c>)
 80093aa:	4604      	mov	r4, r0
 80093ac:	4608      	mov	r0, r1
 80093ae:	602b      	str	r3, [r5, #0]
 80093b0:	f7f9 fc28 	bl	8002c04 <_sbrk>
 80093b4:	1c43      	adds	r3, r0, #1
 80093b6:	d102      	bne.n	80093be <_sbrk_r+0x1a>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	b103      	cbz	r3, 80093be <_sbrk_r+0x1a>
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	bd38      	pop	{r3, r4, r5, pc}
 80093c0:	200019f8 	.word	0x200019f8

080093c4 <memchr>:
 80093c4:	4603      	mov	r3, r0
 80093c6:	b510      	push	{r4, lr}
 80093c8:	b2c9      	uxtb	r1, r1
 80093ca:	4402      	add	r2, r0
 80093cc:	4293      	cmp	r3, r2
 80093ce:	4618      	mov	r0, r3
 80093d0:	d101      	bne.n	80093d6 <memchr+0x12>
 80093d2:	2000      	movs	r0, #0
 80093d4:	e003      	b.n	80093de <memchr+0x1a>
 80093d6:	7804      	ldrb	r4, [r0, #0]
 80093d8:	3301      	adds	r3, #1
 80093da:	428c      	cmp	r4, r1
 80093dc:	d1f6      	bne.n	80093cc <memchr+0x8>
 80093de:	bd10      	pop	{r4, pc}

080093e0 <nan>:
 80093e0:	2000      	movs	r0, #0
 80093e2:	4901      	ldr	r1, [pc, #4]	; (80093e8 <nan+0x8>)
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	7ff80000 	.word	0x7ff80000

080093ec <abort>:
 80093ec:	2006      	movs	r0, #6
 80093ee:	b508      	push	{r3, lr}
 80093f0:	f001 fabc 	bl	800a96c <raise>
 80093f4:	2001      	movs	r0, #1
 80093f6:	f7f9 fb92 	bl	8002b1e <_exit>

080093fa <rshift>:
 80093fa:	6903      	ldr	r3, [r0, #16]
 80093fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009400:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009404:	f100 0414 	add.w	r4, r0, #20
 8009408:	ea4f 1261 	mov.w	r2, r1, asr #5
 800940c:	dd46      	ble.n	800949c <rshift+0xa2>
 800940e:	f011 011f 	ands.w	r1, r1, #31
 8009412:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009416:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800941a:	d10c      	bne.n	8009436 <rshift+0x3c>
 800941c:	4629      	mov	r1, r5
 800941e:	f100 0710 	add.w	r7, r0, #16
 8009422:	42b1      	cmp	r1, r6
 8009424:	d335      	bcc.n	8009492 <rshift+0x98>
 8009426:	1a9b      	subs	r3, r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	1eea      	subs	r2, r5, #3
 800942c:	4296      	cmp	r6, r2
 800942e:	bf38      	it	cc
 8009430:	2300      	movcc	r3, #0
 8009432:	4423      	add	r3, r4
 8009434:	e015      	b.n	8009462 <rshift+0x68>
 8009436:	46a1      	mov	r9, r4
 8009438:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800943c:	f1c1 0820 	rsb	r8, r1, #32
 8009440:	40cf      	lsrs	r7, r1
 8009442:	f105 0e04 	add.w	lr, r5, #4
 8009446:	4576      	cmp	r6, lr
 8009448:	46f4      	mov	ip, lr
 800944a:	d816      	bhi.n	800947a <rshift+0x80>
 800944c:	1a9a      	subs	r2, r3, r2
 800944e:	0092      	lsls	r2, r2, #2
 8009450:	3a04      	subs	r2, #4
 8009452:	3501      	adds	r5, #1
 8009454:	42ae      	cmp	r6, r5
 8009456:	bf38      	it	cc
 8009458:	2200      	movcc	r2, #0
 800945a:	18a3      	adds	r3, r4, r2
 800945c:	50a7      	str	r7, [r4, r2]
 800945e:	b107      	cbz	r7, 8009462 <rshift+0x68>
 8009460:	3304      	adds	r3, #4
 8009462:	42a3      	cmp	r3, r4
 8009464:	eba3 0204 	sub.w	r2, r3, r4
 8009468:	bf08      	it	eq
 800946a:	2300      	moveq	r3, #0
 800946c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009470:	6102      	str	r2, [r0, #16]
 8009472:	bf08      	it	eq
 8009474:	6143      	streq	r3, [r0, #20]
 8009476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800947a:	f8dc c000 	ldr.w	ip, [ip]
 800947e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009482:	ea4c 0707 	orr.w	r7, ip, r7
 8009486:	f849 7b04 	str.w	r7, [r9], #4
 800948a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800948e:	40cf      	lsrs	r7, r1
 8009490:	e7d9      	b.n	8009446 <rshift+0x4c>
 8009492:	f851 cb04 	ldr.w	ip, [r1], #4
 8009496:	f847 cf04 	str.w	ip, [r7, #4]!
 800949a:	e7c2      	b.n	8009422 <rshift+0x28>
 800949c:	4623      	mov	r3, r4
 800949e:	e7e0      	b.n	8009462 <rshift+0x68>

080094a0 <__hexdig_fun>:
 80094a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80094a4:	2b09      	cmp	r3, #9
 80094a6:	d802      	bhi.n	80094ae <__hexdig_fun+0xe>
 80094a8:	3820      	subs	r0, #32
 80094aa:	b2c0      	uxtb	r0, r0
 80094ac:	4770      	bx	lr
 80094ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80094b2:	2b05      	cmp	r3, #5
 80094b4:	d801      	bhi.n	80094ba <__hexdig_fun+0x1a>
 80094b6:	3847      	subs	r0, #71	; 0x47
 80094b8:	e7f7      	b.n	80094aa <__hexdig_fun+0xa>
 80094ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80094be:	2b05      	cmp	r3, #5
 80094c0:	d801      	bhi.n	80094c6 <__hexdig_fun+0x26>
 80094c2:	3827      	subs	r0, #39	; 0x27
 80094c4:	e7f1      	b.n	80094aa <__hexdig_fun+0xa>
 80094c6:	2000      	movs	r0, #0
 80094c8:	4770      	bx	lr
	...

080094cc <__gethex>:
 80094cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d0:	4681      	mov	r9, r0
 80094d2:	468a      	mov	sl, r1
 80094d4:	4617      	mov	r7, r2
 80094d6:	680a      	ldr	r2, [r1, #0]
 80094d8:	b085      	sub	sp, #20
 80094da:	f102 0b02 	add.w	fp, r2, #2
 80094de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80094e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80094e6:	9302      	str	r3, [sp, #8]
 80094e8:	32fe      	adds	r2, #254	; 0xfe
 80094ea:	eb02 030b 	add.w	r3, r2, fp
 80094ee:	46d8      	mov	r8, fp
 80094f0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80094f4:	9301      	str	r3, [sp, #4]
 80094f6:	2830      	cmp	r0, #48	; 0x30
 80094f8:	d0f7      	beq.n	80094ea <__gethex+0x1e>
 80094fa:	f7ff ffd1 	bl	80094a0 <__hexdig_fun>
 80094fe:	4604      	mov	r4, r0
 8009500:	2800      	cmp	r0, #0
 8009502:	d138      	bne.n	8009576 <__gethex+0xaa>
 8009504:	2201      	movs	r2, #1
 8009506:	4640      	mov	r0, r8
 8009508:	49a7      	ldr	r1, [pc, #668]	; (80097a8 <__gethex+0x2dc>)
 800950a:	f7ff ff38 	bl	800937e <strncmp>
 800950e:	4606      	mov	r6, r0
 8009510:	2800      	cmp	r0, #0
 8009512:	d169      	bne.n	80095e8 <__gethex+0x11c>
 8009514:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009518:	465d      	mov	r5, fp
 800951a:	f7ff ffc1 	bl	80094a0 <__hexdig_fun>
 800951e:	2800      	cmp	r0, #0
 8009520:	d064      	beq.n	80095ec <__gethex+0x120>
 8009522:	465a      	mov	r2, fp
 8009524:	7810      	ldrb	r0, [r2, #0]
 8009526:	4690      	mov	r8, r2
 8009528:	2830      	cmp	r0, #48	; 0x30
 800952a:	f102 0201 	add.w	r2, r2, #1
 800952e:	d0f9      	beq.n	8009524 <__gethex+0x58>
 8009530:	f7ff ffb6 	bl	80094a0 <__hexdig_fun>
 8009534:	2301      	movs	r3, #1
 8009536:	fab0 f480 	clz	r4, r0
 800953a:	465e      	mov	r6, fp
 800953c:	0964      	lsrs	r4, r4, #5
 800953e:	9301      	str	r3, [sp, #4]
 8009540:	4642      	mov	r2, r8
 8009542:	4615      	mov	r5, r2
 8009544:	7828      	ldrb	r0, [r5, #0]
 8009546:	3201      	adds	r2, #1
 8009548:	f7ff ffaa 	bl	80094a0 <__hexdig_fun>
 800954c:	2800      	cmp	r0, #0
 800954e:	d1f8      	bne.n	8009542 <__gethex+0x76>
 8009550:	2201      	movs	r2, #1
 8009552:	4628      	mov	r0, r5
 8009554:	4994      	ldr	r1, [pc, #592]	; (80097a8 <__gethex+0x2dc>)
 8009556:	f7ff ff12 	bl	800937e <strncmp>
 800955a:	b978      	cbnz	r0, 800957c <__gethex+0xb0>
 800955c:	b946      	cbnz	r6, 8009570 <__gethex+0xa4>
 800955e:	1c6e      	adds	r6, r5, #1
 8009560:	4632      	mov	r2, r6
 8009562:	4615      	mov	r5, r2
 8009564:	7828      	ldrb	r0, [r5, #0]
 8009566:	3201      	adds	r2, #1
 8009568:	f7ff ff9a 	bl	80094a0 <__hexdig_fun>
 800956c:	2800      	cmp	r0, #0
 800956e:	d1f8      	bne.n	8009562 <__gethex+0x96>
 8009570:	1b73      	subs	r3, r6, r5
 8009572:	009e      	lsls	r6, r3, #2
 8009574:	e004      	b.n	8009580 <__gethex+0xb4>
 8009576:	2400      	movs	r4, #0
 8009578:	4626      	mov	r6, r4
 800957a:	e7e1      	b.n	8009540 <__gethex+0x74>
 800957c:	2e00      	cmp	r6, #0
 800957e:	d1f7      	bne.n	8009570 <__gethex+0xa4>
 8009580:	782b      	ldrb	r3, [r5, #0]
 8009582:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009586:	2b50      	cmp	r3, #80	; 0x50
 8009588:	d13d      	bne.n	8009606 <__gethex+0x13a>
 800958a:	786b      	ldrb	r3, [r5, #1]
 800958c:	2b2b      	cmp	r3, #43	; 0x2b
 800958e:	d02f      	beq.n	80095f0 <__gethex+0x124>
 8009590:	2b2d      	cmp	r3, #45	; 0x2d
 8009592:	d031      	beq.n	80095f8 <__gethex+0x12c>
 8009594:	f04f 0b00 	mov.w	fp, #0
 8009598:	1c69      	adds	r1, r5, #1
 800959a:	7808      	ldrb	r0, [r1, #0]
 800959c:	f7ff ff80 	bl	80094a0 <__hexdig_fun>
 80095a0:	1e42      	subs	r2, r0, #1
 80095a2:	b2d2      	uxtb	r2, r2
 80095a4:	2a18      	cmp	r2, #24
 80095a6:	d82e      	bhi.n	8009606 <__gethex+0x13a>
 80095a8:	f1a0 0210 	sub.w	r2, r0, #16
 80095ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80095b0:	f7ff ff76 	bl	80094a0 <__hexdig_fun>
 80095b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80095b8:	fa5f fc8c 	uxtb.w	ip, ip
 80095bc:	f1bc 0f18 	cmp.w	ip, #24
 80095c0:	d91d      	bls.n	80095fe <__gethex+0x132>
 80095c2:	f1bb 0f00 	cmp.w	fp, #0
 80095c6:	d000      	beq.n	80095ca <__gethex+0xfe>
 80095c8:	4252      	negs	r2, r2
 80095ca:	4416      	add	r6, r2
 80095cc:	f8ca 1000 	str.w	r1, [sl]
 80095d0:	b1dc      	cbz	r4, 800960a <__gethex+0x13e>
 80095d2:	9b01      	ldr	r3, [sp, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	bf14      	ite	ne
 80095d8:	f04f 0800 	movne.w	r8, #0
 80095dc:	f04f 0806 	moveq.w	r8, #6
 80095e0:	4640      	mov	r0, r8
 80095e2:	b005      	add	sp, #20
 80095e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e8:	4645      	mov	r5, r8
 80095ea:	4626      	mov	r6, r4
 80095ec:	2401      	movs	r4, #1
 80095ee:	e7c7      	b.n	8009580 <__gethex+0xb4>
 80095f0:	f04f 0b00 	mov.w	fp, #0
 80095f4:	1ca9      	adds	r1, r5, #2
 80095f6:	e7d0      	b.n	800959a <__gethex+0xce>
 80095f8:	f04f 0b01 	mov.w	fp, #1
 80095fc:	e7fa      	b.n	80095f4 <__gethex+0x128>
 80095fe:	230a      	movs	r3, #10
 8009600:	fb03 0002 	mla	r0, r3, r2, r0
 8009604:	e7d0      	b.n	80095a8 <__gethex+0xdc>
 8009606:	4629      	mov	r1, r5
 8009608:	e7e0      	b.n	80095cc <__gethex+0x100>
 800960a:	4621      	mov	r1, r4
 800960c:	eba5 0308 	sub.w	r3, r5, r8
 8009610:	3b01      	subs	r3, #1
 8009612:	2b07      	cmp	r3, #7
 8009614:	dc0a      	bgt.n	800962c <__gethex+0x160>
 8009616:	4648      	mov	r0, r9
 8009618:	f000 fa5c 	bl	8009ad4 <_Balloc>
 800961c:	4604      	mov	r4, r0
 800961e:	b940      	cbnz	r0, 8009632 <__gethex+0x166>
 8009620:	4602      	mov	r2, r0
 8009622:	21e4      	movs	r1, #228	; 0xe4
 8009624:	4b61      	ldr	r3, [pc, #388]	; (80097ac <__gethex+0x2e0>)
 8009626:	4862      	ldr	r0, [pc, #392]	; (80097b0 <__gethex+0x2e4>)
 8009628:	f7fe f822 	bl	8007670 <__assert_func>
 800962c:	3101      	adds	r1, #1
 800962e:	105b      	asrs	r3, r3, #1
 8009630:	e7ef      	b.n	8009612 <__gethex+0x146>
 8009632:	2300      	movs	r3, #0
 8009634:	469b      	mov	fp, r3
 8009636:	f100 0a14 	add.w	sl, r0, #20
 800963a:	f8cd a004 	str.w	sl, [sp, #4]
 800963e:	45a8      	cmp	r8, r5
 8009640:	d344      	bcc.n	80096cc <__gethex+0x200>
 8009642:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009646:	4658      	mov	r0, fp
 8009648:	f848 bb04 	str.w	fp, [r8], #4
 800964c:	eba8 080a 	sub.w	r8, r8, sl
 8009650:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8009654:	6122      	str	r2, [r4, #16]
 8009656:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800965a:	f000 fb2d 	bl	8009cb8 <__hi0bits>
 800965e:	683d      	ldr	r5, [r7, #0]
 8009660:	eba8 0800 	sub.w	r8, r8, r0
 8009664:	45a8      	cmp	r8, r5
 8009666:	dd59      	ble.n	800971c <__gethex+0x250>
 8009668:	eba8 0805 	sub.w	r8, r8, r5
 800966c:	4641      	mov	r1, r8
 800966e:	4620      	mov	r0, r4
 8009670:	f000 feab 	bl	800a3ca <__any_on>
 8009674:	4683      	mov	fp, r0
 8009676:	b1b8      	cbz	r0, 80096a8 <__gethex+0x1dc>
 8009678:	f04f 0b01 	mov.w	fp, #1
 800967c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009680:	1159      	asrs	r1, r3, #5
 8009682:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009686:	f003 021f 	and.w	r2, r3, #31
 800968a:	fa0b f202 	lsl.w	r2, fp, r2
 800968e:	420a      	tst	r2, r1
 8009690:	d00a      	beq.n	80096a8 <__gethex+0x1dc>
 8009692:	455b      	cmp	r3, fp
 8009694:	dd06      	ble.n	80096a4 <__gethex+0x1d8>
 8009696:	4620      	mov	r0, r4
 8009698:	f1a8 0102 	sub.w	r1, r8, #2
 800969c:	f000 fe95 	bl	800a3ca <__any_on>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d138      	bne.n	8009716 <__gethex+0x24a>
 80096a4:	f04f 0b02 	mov.w	fp, #2
 80096a8:	4641      	mov	r1, r8
 80096aa:	4620      	mov	r0, r4
 80096ac:	f7ff fea5 	bl	80093fa <rshift>
 80096b0:	4446      	add	r6, r8
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	42b3      	cmp	r3, r6
 80096b6:	da41      	bge.n	800973c <__gethex+0x270>
 80096b8:	4621      	mov	r1, r4
 80096ba:	4648      	mov	r0, r9
 80096bc:	f000 fa4a 	bl	8009b54 <_Bfree>
 80096c0:	2300      	movs	r3, #0
 80096c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096c4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80096c8:	6013      	str	r3, [r2, #0]
 80096ca:	e789      	b.n	80095e0 <__gethex+0x114>
 80096cc:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80096d0:	2a2e      	cmp	r2, #46	; 0x2e
 80096d2:	d014      	beq.n	80096fe <__gethex+0x232>
 80096d4:	2b20      	cmp	r3, #32
 80096d6:	d106      	bne.n	80096e6 <__gethex+0x21a>
 80096d8:	9b01      	ldr	r3, [sp, #4]
 80096da:	f843 bb04 	str.w	fp, [r3], #4
 80096de:	f04f 0b00 	mov.w	fp, #0
 80096e2:	9301      	str	r3, [sp, #4]
 80096e4:	465b      	mov	r3, fp
 80096e6:	7828      	ldrb	r0, [r5, #0]
 80096e8:	9303      	str	r3, [sp, #12]
 80096ea:	f7ff fed9 	bl	80094a0 <__hexdig_fun>
 80096ee:	9b03      	ldr	r3, [sp, #12]
 80096f0:	f000 000f 	and.w	r0, r0, #15
 80096f4:	4098      	lsls	r0, r3
 80096f6:	ea4b 0b00 	orr.w	fp, fp, r0
 80096fa:	3304      	adds	r3, #4
 80096fc:	e79f      	b.n	800963e <__gethex+0x172>
 80096fe:	45a8      	cmp	r8, r5
 8009700:	d8e8      	bhi.n	80096d4 <__gethex+0x208>
 8009702:	2201      	movs	r2, #1
 8009704:	4628      	mov	r0, r5
 8009706:	4928      	ldr	r1, [pc, #160]	; (80097a8 <__gethex+0x2dc>)
 8009708:	9303      	str	r3, [sp, #12]
 800970a:	f7ff fe38 	bl	800937e <strncmp>
 800970e:	9b03      	ldr	r3, [sp, #12]
 8009710:	2800      	cmp	r0, #0
 8009712:	d1df      	bne.n	80096d4 <__gethex+0x208>
 8009714:	e793      	b.n	800963e <__gethex+0x172>
 8009716:	f04f 0b03 	mov.w	fp, #3
 800971a:	e7c5      	b.n	80096a8 <__gethex+0x1dc>
 800971c:	da0b      	bge.n	8009736 <__gethex+0x26a>
 800971e:	eba5 0808 	sub.w	r8, r5, r8
 8009722:	4621      	mov	r1, r4
 8009724:	4642      	mov	r2, r8
 8009726:	4648      	mov	r0, r9
 8009728:	f000 fc2c 	bl	8009f84 <__lshift>
 800972c:	4604      	mov	r4, r0
 800972e:	eba6 0608 	sub.w	r6, r6, r8
 8009732:	f100 0a14 	add.w	sl, r0, #20
 8009736:	f04f 0b00 	mov.w	fp, #0
 800973a:	e7ba      	b.n	80096b2 <__gethex+0x1e6>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	42b3      	cmp	r3, r6
 8009740:	dd74      	ble.n	800982c <__gethex+0x360>
 8009742:	1b9e      	subs	r6, r3, r6
 8009744:	42b5      	cmp	r5, r6
 8009746:	dc35      	bgt.n	80097b4 <__gethex+0x2e8>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b02      	cmp	r3, #2
 800974c:	d023      	beq.n	8009796 <__gethex+0x2ca>
 800974e:	2b03      	cmp	r3, #3
 8009750:	d025      	beq.n	800979e <__gethex+0x2d2>
 8009752:	2b01      	cmp	r3, #1
 8009754:	d115      	bne.n	8009782 <__gethex+0x2b6>
 8009756:	42b5      	cmp	r5, r6
 8009758:	d113      	bne.n	8009782 <__gethex+0x2b6>
 800975a:	2d01      	cmp	r5, #1
 800975c:	d10b      	bne.n	8009776 <__gethex+0x2aa>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	9a02      	ldr	r2, [sp, #8]
 8009762:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009766:	6013      	str	r3, [r2, #0]
 8009768:	2301      	movs	r3, #1
 800976a:	6123      	str	r3, [r4, #16]
 800976c:	f8ca 3000 	str.w	r3, [sl]
 8009770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009772:	601c      	str	r4, [r3, #0]
 8009774:	e734      	b.n	80095e0 <__gethex+0x114>
 8009776:	4620      	mov	r0, r4
 8009778:	1e69      	subs	r1, r5, #1
 800977a:	f000 fe26 	bl	800a3ca <__any_on>
 800977e:	2800      	cmp	r0, #0
 8009780:	d1ed      	bne.n	800975e <__gethex+0x292>
 8009782:	4621      	mov	r1, r4
 8009784:	4648      	mov	r0, r9
 8009786:	f000 f9e5 	bl	8009b54 <_Bfree>
 800978a:	2300      	movs	r3, #0
 800978c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800978e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009792:	6013      	str	r3, [r2, #0]
 8009794:	e724      	b.n	80095e0 <__gethex+0x114>
 8009796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1f2      	bne.n	8009782 <__gethex+0x2b6>
 800979c:	e7df      	b.n	800975e <__gethex+0x292>
 800979e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1dc      	bne.n	800975e <__gethex+0x292>
 80097a4:	e7ed      	b.n	8009782 <__gethex+0x2b6>
 80097a6:	bf00      	nop
 80097a8:	0800caba 	.word	0x0800caba
 80097ac:	0800cb6e 	.word	0x0800cb6e
 80097b0:	0800cb7f 	.word	0x0800cb7f
 80097b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80097b8:	f1bb 0f00 	cmp.w	fp, #0
 80097bc:	d133      	bne.n	8009826 <__gethex+0x35a>
 80097be:	f1b8 0f00 	cmp.w	r8, #0
 80097c2:	d004      	beq.n	80097ce <__gethex+0x302>
 80097c4:	4641      	mov	r1, r8
 80097c6:	4620      	mov	r0, r4
 80097c8:	f000 fdff 	bl	800a3ca <__any_on>
 80097cc:	4683      	mov	fp, r0
 80097ce:	2301      	movs	r3, #1
 80097d0:	ea4f 1268 	mov.w	r2, r8, asr #5
 80097d4:	f008 081f 	and.w	r8, r8, #31
 80097d8:	fa03 f308 	lsl.w	r3, r3, r8
 80097dc:	f04f 0802 	mov.w	r8, #2
 80097e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80097e4:	4631      	mov	r1, r6
 80097e6:	4213      	tst	r3, r2
 80097e8:	4620      	mov	r0, r4
 80097ea:	bf18      	it	ne
 80097ec:	f04b 0b02 	orrne.w	fp, fp, #2
 80097f0:	1bad      	subs	r5, r5, r6
 80097f2:	f7ff fe02 	bl	80093fa <rshift>
 80097f6:	687e      	ldr	r6, [r7, #4]
 80097f8:	f1bb 0f00 	cmp.w	fp, #0
 80097fc:	d04a      	beq.n	8009894 <__gethex+0x3c8>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2b02      	cmp	r3, #2
 8009802:	d016      	beq.n	8009832 <__gethex+0x366>
 8009804:	2b03      	cmp	r3, #3
 8009806:	d018      	beq.n	800983a <__gethex+0x36e>
 8009808:	2b01      	cmp	r3, #1
 800980a:	d109      	bne.n	8009820 <__gethex+0x354>
 800980c:	f01b 0f02 	tst.w	fp, #2
 8009810:	d006      	beq.n	8009820 <__gethex+0x354>
 8009812:	f8da 3000 	ldr.w	r3, [sl]
 8009816:	ea4b 0b03 	orr.w	fp, fp, r3
 800981a:	f01b 0f01 	tst.w	fp, #1
 800981e:	d10f      	bne.n	8009840 <__gethex+0x374>
 8009820:	f048 0810 	orr.w	r8, r8, #16
 8009824:	e036      	b.n	8009894 <__gethex+0x3c8>
 8009826:	f04f 0b01 	mov.w	fp, #1
 800982a:	e7d0      	b.n	80097ce <__gethex+0x302>
 800982c:	f04f 0801 	mov.w	r8, #1
 8009830:	e7e2      	b.n	80097f8 <__gethex+0x32c>
 8009832:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009834:	f1c3 0301 	rsb	r3, r3, #1
 8009838:	930f      	str	r3, [sp, #60]	; 0x3c
 800983a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d0ef      	beq.n	8009820 <__gethex+0x354>
 8009840:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009844:	f104 0214 	add.w	r2, r4, #20
 8009848:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800984c:	9301      	str	r3, [sp, #4]
 800984e:	2300      	movs	r3, #0
 8009850:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009854:	4694      	mov	ip, r2
 8009856:	f852 1b04 	ldr.w	r1, [r2], #4
 800985a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800985e:	d01e      	beq.n	800989e <__gethex+0x3d2>
 8009860:	3101      	adds	r1, #1
 8009862:	f8cc 1000 	str.w	r1, [ip]
 8009866:	f1b8 0f02 	cmp.w	r8, #2
 800986a:	f104 0214 	add.w	r2, r4, #20
 800986e:	d13d      	bne.n	80098ec <__gethex+0x420>
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	3b01      	subs	r3, #1
 8009874:	42ab      	cmp	r3, r5
 8009876:	d10b      	bne.n	8009890 <__gethex+0x3c4>
 8009878:	2301      	movs	r3, #1
 800987a:	1169      	asrs	r1, r5, #5
 800987c:	f005 051f 	and.w	r5, r5, #31
 8009880:	fa03 f505 	lsl.w	r5, r3, r5
 8009884:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009888:	421d      	tst	r5, r3
 800988a:	bf18      	it	ne
 800988c:	f04f 0801 	movne.w	r8, #1
 8009890:	f048 0820 	orr.w	r8, r8, #32
 8009894:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009896:	601c      	str	r4, [r3, #0]
 8009898:	9b02      	ldr	r3, [sp, #8]
 800989a:	601e      	str	r6, [r3, #0]
 800989c:	e6a0      	b.n	80095e0 <__gethex+0x114>
 800989e:	4290      	cmp	r0, r2
 80098a0:	f842 3c04 	str.w	r3, [r2, #-4]
 80098a4:	d8d6      	bhi.n	8009854 <__gethex+0x388>
 80098a6:	68a2      	ldr	r2, [r4, #8]
 80098a8:	4593      	cmp	fp, r2
 80098aa:	db17      	blt.n	80098dc <__gethex+0x410>
 80098ac:	6861      	ldr	r1, [r4, #4]
 80098ae:	4648      	mov	r0, r9
 80098b0:	3101      	adds	r1, #1
 80098b2:	f000 f90f 	bl	8009ad4 <_Balloc>
 80098b6:	4682      	mov	sl, r0
 80098b8:	b918      	cbnz	r0, 80098c2 <__gethex+0x3f6>
 80098ba:	4602      	mov	r2, r0
 80098bc:	2184      	movs	r1, #132	; 0x84
 80098be:	4b1a      	ldr	r3, [pc, #104]	; (8009928 <__gethex+0x45c>)
 80098c0:	e6b1      	b.n	8009626 <__gethex+0x15a>
 80098c2:	6922      	ldr	r2, [r4, #16]
 80098c4:	f104 010c 	add.w	r1, r4, #12
 80098c8:	3202      	adds	r2, #2
 80098ca:	0092      	lsls	r2, r2, #2
 80098cc:	300c      	adds	r0, #12
 80098ce:	f7fd febc 	bl	800764a <memcpy>
 80098d2:	4621      	mov	r1, r4
 80098d4:	4648      	mov	r0, r9
 80098d6:	f000 f93d 	bl	8009b54 <_Bfree>
 80098da:	4654      	mov	r4, sl
 80098dc:	6922      	ldr	r2, [r4, #16]
 80098de:	1c51      	adds	r1, r2, #1
 80098e0:	6121      	str	r1, [r4, #16]
 80098e2:	2101      	movs	r1, #1
 80098e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80098e8:	6151      	str	r1, [r2, #20]
 80098ea:	e7bc      	b.n	8009866 <__gethex+0x39a>
 80098ec:	6921      	ldr	r1, [r4, #16]
 80098ee:	4559      	cmp	r1, fp
 80098f0:	dd0b      	ble.n	800990a <__gethex+0x43e>
 80098f2:	2101      	movs	r1, #1
 80098f4:	4620      	mov	r0, r4
 80098f6:	f7ff fd80 	bl	80093fa <rshift>
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	3601      	adds	r6, #1
 80098fe:	42b3      	cmp	r3, r6
 8009900:	f6ff aeda 	blt.w	80096b8 <__gethex+0x1ec>
 8009904:	f04f 0801 	mov.w	r8, #1
 8009908:	e7c2      	b.n	8009890 <__gethex+0x3c4>
 800990a:	f015 051f 	ands.w	r5, r5, #31
 800990e:	d0f9      	beq.n	8009904 <__gethex+0x438>
 8009910:	9b01      	ldr	r3, [sp, #4]
 8009912:	f1c5 0520 	rsb	r5, r5, #32
 8009916:	441a      	add	r2, r3
 8009918:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800991c:	f000 f9cc 	bl	8009cb8 <__hi0bits>
 8009920:	42a8      	cmp	r0, r5
 8009922:	dbe6      	blt.n	80098f2 <__gethex+0x426>
 8009924:	e7ee      	b.n	8009904 <__gethex+0x438>
 8009926:	bf00      	nop
 8009928:	0800cb6e 	.word	0x0800cb6e

0800992c <L_shift>:
 800992c:	f1c2 0208 	rsb	r2, r2, #8
 8009930:	0092      	lsls	r2, r2, #2
 8009932:	b570      	push	{r4, r5, r6, lr}
 8009934:	f1c2 0620 	rsb	r6, r2, #32
 8009938:	6843      	ldr	r3, [r0, #4]
 800993a:	6804      	ldr	r4, [r0, #0]
 800993c:	fa03 f506 	lsl.w	r5, r3, r6
 8009940:	432c      	orrs	r4, r5
 8009942:	40d3      	lsrs	r3, r2
 8009944:	6004      	str	r4, [r0, #0]
 8009946:	f840 3f04 	str.w	r3, [r0, #4]!
 800994a:	4288      	cmp	r0, r1
 800994c:	d3f4      	bcc.n	8009938 <L_shift+0xc>
 800994e:	bd70      	pop	{r4, r5, r6, pc}

08009950 <__match>:
 8009950:	b530      	push	{r4, r5, lr}
 8009952:	6803      	ldr	r3, [r0, #0]
 8009954:	3301      	adds	r3, #1
 8009956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800995a:	b914      	cbnz	r4, 8009962 <__match+0x12>
 800995c:	6003      	str	r3, [r0, #0]
 800995e:	2001      	movs	r0, #1
 8009960:	bd30      	pop	{r4, r5, pc}
 8009962:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009966:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800996a:	2d19      	cmp	r5, #25
 800996c:	bf98      	it	ls
 800996e:	3220      	addls	r2, #32
 8009970:	42a2      	cmp	r2, r4
 8009972:	d0f0      	beq.n	8009956 <__match+0x6>
 8009974:	2000      	movs	r0, #0
 8009976:	e7f3      	b.n	8009960 <__match+0x10>

08009978 <__hexnan>:
 8009978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997c:	2500      	movs	r5, #0
 800997e:	680b      	ldr	r3, [r1, #0]
 8009980:	4682      	mov	sl, r0
 8009982:	115e      	asrs	r6, r3, #5
 8009984:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009988:	f013 031f 	ands.w	r3, r3, #31
 800998c:	bf18      	it	ne
 800998e:	3604      	addne	r6, #4
 8009990:	1f37      	subs	r7, r6, #4
 8009992:	4690      	mov	r8, r2
 8009994:	46b9      	mov	r9, r7
 8009996:	463c      	mov	r4, r7
 8009998:	46ab      	mov	fp, r5
 800999a:	b087      	sub	sp, #28
 800999c:	6801      	ldr	r1, [r0, #0]
 800999e:	9301      	str	r3, [sp, #4]
 80099a0:	f846 5c04 	str.w	r5, [r6, #-4]
 80099a4:	9502      	str	r5, [sp, #8]
 80099a6:	784a      	ldrb	r2, [r1, #1]
 80099a8:	1c4b      	adds	r3, r1, #1
 80099aa:	9303      	str	r3, [sp, #12]
 80099ac:	b342      	cbz	r2, 8009a00 <__hexnan+0x88>
 80099ae:	4610      	mov	r0, r2
 80099b0:	9105      	str	r1, [sp, #20]
 80099b2:	9204      	str	r2, [sp, #16]
 80099b4:	f7ff fd74 	bl	80094a0 <__hexdig_fun>
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d14f      	bne.n	8009a5c <__hexnan+0xe4>
 80099bc:	9a04      	ldr	r2, [sp, #16]
 80099be:	9905      	ldr	r1, [sp, #20]
 80099c0:	2a20      	cmp	r2, #32
 80099c2:	d818      	bhi.n	80099f6 <__hexnan+0x7e>
 80099c4:	9b02      	ldr	r3, [sp, #8]
 80099c6:	459b      	cmp	fp, r3
 80099c8:	dd13      	ble.n	80099f2 <__hexnan+0x7a>
 80099ca:	454c      	cmp	r4, r9
 80099cc:	d206      	bcs.n	80099dc <__hexnan+0x64>
 80099ce:	2d07      	cmp	r5, #7
 80099d0:	dc04      	bgt.n	80099dc <__hexnan+0x64>
 80099d2:	462a      	mov	r2, r5
 80099d4:	4649      	mov	r1, r9
 80099d6:	4620      	mov	r0, r4
 80099d8:	f7ff ffa8 	bl	800992c <L_shift>
 80099dc:	4544      	cmp	r4, r8
 80099de:	d950      	bls.n	8009a82 <__hexnan+0x10a>
 80099e0:	2300      	movs	r3, #0
 80099e2:	f1a4 0904 	sub.w	r9, r4, #4
 80099e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80099ea:	461d      	mov	r5, r3
 80099ec:	464c      	mov	r4, r9
 80099ee:	f8cd b008 	str.w	fp, [sp, #8]
 80099f2:	9903      	ldr	r1, [sp, #12]
 80099f4:	e7d7      	b.n	80099a6 <__hexnan+0x2e>
 80099f6:	2a29      	cmp	r2, #41	; 0x29
 80099f8:	d155      	bne.n	8009aa6 <__hexnan+0x12e>
 80099fa:	3102      	adds	r1, #2
 80099fc:	f8ca 1000 	str.w	r1, [sl]
 8009a00:	f1bb 0f00 	cmp.w	fp, #0
 8009a04:	d04f      	beq.n	8009aa6 <__hexnan+0x12e>
 8009a06:	454c      	cmp	r4, r9
 8009a08:	d206      	bcs.n	8009a18 <__hexnan+0xa0>
 8009a0a:	2d07      	cmp	r5, #7
 8009a0c:	dc04      	bgt.n	8009a18 <__hexnan+0xa0>
 8009a0e:	462a      	mov	r2, r5
 8009a10:	4649      	mov	r1, r9
 8009a12:	4620      	mov	r0, r4
 8009a14:	f7ff ff8a 	bl	800992c <L_shift>
 8009a18:	4544      	cmp	r4, r8
 8009a1a:	d934      	bls.n	8009a86 <__hexnan+0x10e>
 8009a1c:	4623      	mov	r3, r4
 8009a1e:	f1a8 0204 	sub.w	r2, r8, #4
 8009a22:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a26:	429f      	cmp	r7, r3
 8009a28:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a2c:	d2f9      	bcs.n	8009a22 <__hexnan+0xaa>
 8009a2e:	1b3b      	subs	r3, r7, r4
 8009a30:	f023 0303 	bic.w	r3, r3, #3
 8009a34:	3304      	adds	r3, #4
 8009a36:	3e03      	subs	r6, #3
 8009a38:	3401      	adds	r4, #1
 8009a3a:	42a6      	cmp	r6, r4
 8009a3c:	bf38      	it	cc
 8009a3e:	2304      	movcc	r3, #4
 8009a40:	2200      	movs	r2, #0
 8009a42:	4443      	add	r3, r8
 8009a44:	f843 2b04 	str.w	r2, [r3], #4
 8009a48:	429f      	cmp	r7, r3
 8009a4a:	d2fb      	bcs.n	8009a44 <__hexnan+0xcc>
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	b91b      	cbnz	r3, 8009a58 <__hexnan+0xe0>
 8009a50:	4547      	cmp	r7, r8
 8009a52:	d126      	bne.n	8009aa2 <__hexnan+0x12a>
 8009a54:	2301      	movs	r3, #1
 8009a56:	603b      	str	r3, [r7, #0]
 8009a58:	2005      	movs	r0, #5
 8009a5a:	e025      	b.n	8009aa8 <__hexnan+0x130>
 8009a5c:	3501      	adds	r5, #1
 8009a5e:	2d08      	cmp	r5, #8
 8009a60:	f10b 0b01 	add.w	fp, fp, #1
 8009a64:	dd06      	ble.n	8009a74 <__hexnan+0xfc>
 8009a66:	4544      	cmp	r4, r8
 8009a68:	d9c3      	bls.n	80099f2 <__hexnan+0x7a>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	2501      	movs	r5, #1
 8009a6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a72:	3c04      	subs	r4, #4
 8009a74:	6822      	ldr	r2, [r4, #0]
 8009a76:	f000 000f 	and.w	r0, r0, #15
 8009a7a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009a7e:	6020      	str	r0, [r4, #0]
 8009a80:	e7b7      	b.n	80099f2 <__hexnan+0x7a>
 8009a82:	2508      	movs	r5, #8
 8009a84:	e7b5      	b.n	80099f2 <__hexnan+0x7a>
 8009a86:	9b01      	ldr	r3, [sp, #4]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d0df      	beq.n	8009a4c <__hexnan+0xd4>
 8009a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a90:	f1c3 0320 	rsb	r3, r3, #32
 8009a94:	40da      	lsrs	r2, r3
 8009a96:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009aa0:	e7d4      	b.n	8009a4c <__hexnan+0xd4>
 8009aa2:	3f04      	subs	r7, #4
 8009aa4:	e7d2      	b.n	8009a4c <__hexnan+0xd4>
 8009aa6:	2004      	movs	r0, #4
 8009aa8:	b007      	add	sp, #28
 8009aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009aae <__ascii_mbtowc>:
 8009aae:	b082      	sub	sp, #8
 8009ab0:	b901      	cbnz	r1, 8009ab4 <__ascii_mbtowc+0x6>
 8009ab2:	a901      	add	r1, sp, #4
 8009ab4:	b142      	cbz	r2, 8009ac8 <__ascii_mbtowc+0x1a>
 8009ab6:	b14b      	cbz	r3, 8009acc <__ascii_mbtowc+0x1e>
 8009ab8:	7813      	ldrb	r3, [r2, #0]
 8009aba:	600b      	str	r3, [r1, #0]
 8009abc:	7812      	ldrb	r2, [r2, #0]
 8009abe:	1e10      	subs	r0, r2, #0
 8009ac0:	bf18      	it	ne
 8009ac2:	2001      	movne	r0, #1
 8009ac4:	b002      	add	sp, #8
 8009ac6:	4770      	bx	lr
 8009ac8:	4610      	mov	r0, r2
 8009aca:	e7fb      	b.n	8009ac4 <__ascii_mbtowc+0x16>
 8009acc:	f06f 0001 	mvn.w	r0, #1
 8009ad0:	e7f8      	b.n	8009ac4 <__ascii_mbtowc+0x16>
	...

08009ad4 <_Balloc>:
 8009ad4:	b570      	push	{r4, r5, r6, lr}
 8009ad6:	69c6      	ldr	r6, [r0, #28]
 8009ad8:	4604      	mov	r4, r0
 8009ada:	460d      	mov	r5, r1
 8009adc:	b976      	cbnz	r6, 8009afc <_Balloc+0x28>
 8009ade:	2010      	movs	r0, #16
 8009ae0:	f7fd fe2c 	bl	800773c <malloc>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	61e0      	str	r0, [r4, #28]
 8009ae8:	b920      	cbnz	r0, 8009af4 <_Balloc+0x20>
 8009aea:	216b      	movs	r1, #107	; 0x6b
 8009aec:	4b17      	ldr	r3, [pc, #92]	; (8009b4c <_Balloc+0x78>)
 8009aee:	4818      	ldr	r0, [pc, #96]	; (8009b50 <_Balloc+0x7c>)
 8009af0:	f7fd fdbe 	bl	8007670 <__assert_func>
 8009af4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009af8:	6006      	str	r6, [r0, #0]
 8009afa:	60c6      	str	r6, [r0, #12]
 8009afc:	69e6      	ldr	r6, [r4, #28]
 8009afe:	68f3      	ldr	r3, [r6, #12]
 8009b00:	b183      	cbz	r3, 8009b24 <_Balloc+0x50>
 8009b02:	69e3      	ldr	r3, [r4, #28]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b0a:	b9b8      	cbnz	r0, 8009b3c <_Balloc+0x68>
 8009b0c:	2101      	movs	r1, #1
 8009b0e:	fa01 f605 	lsl.w	r6, r1, r5
 8009b12:	1d72      	adds	r2, r6, #5
 8009b14:	4620      	mov	r0, r4
 8009b16:	0092      	lsls	r2, r2, #2
 8009b18:	f000 ff44 	bl	800a9a4 <_calloc_r>
 8009b1c:	b160      	cbz	r0, 8009b38 <_Balloc+0x64>
 8009b1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b22:	e00e      	b.n	8009b42 <_Balloc+0x6e>
 8009b24:	2221      	movs	r2, #33	; 0x21
 8009b26:	2104      	movs	r1, #4
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f000 ff3b 	bl	800a9a4 <_calloc_r>
 8009b2e:	69e3      	ldr	r3, [r4, #28]
 8009b30:	60f0      	str	r0, [r6, #12]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d1e4      	bne.n	8009b02 <_Balloc+0x2e>
 8009b38:	2000      	movs	r0, #0
 8009b3a:	bd70      	pop	{r4, r5, r6, pc}
 8009b3c:	6802      	ldr	r2, [r0, #0]
 8009b3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b42:	2300      	movs	r3, #0
 8009b44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b48:	e7f7      	b.n	8009b3a <_Balloc+0x66>
 8009b4a:	bf00      	nop
 8009b4c:	0800cbdf 	.word	0x0800cbdf
 8009b50:	0800cbf6 	.word	0x0800cbf6

08009b54 <_Bfree>:
 8009b54:	b570      	push	{r4, r5, r6, lr}
 8009b56:	69c6      	ldr	r6, [r0, #28]
 8009b58:	4605      	mov	r5, r0
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	b976      	cbnz	r6, 8009b7c <_Bfree+0x28>
 8009b5e:	2010      	movs	r0, #16
 8009b60:	f7fd fdec 	bl	800773c <malloc>
 8009b64:	4602      	mov	r2, r0
 8009b66:	61e8      	str	r0, [r5, #28]
 8009b68:	b920      	cbnz	r0, 8009b74 <_Bfree+0x20>
 8009b6a:	218f      	movs	r1, #143	; 0x8f
 8009b6c:	4b08      	ldr	r3, [pc, #32]	; (8009b90 <_Bfree+0x3c>)
 8009b6e:	4809      	ldr	r0, [pc, #36]	; (8009b94 <_Bfree+0x40>)
 8009b70:	f7fd fd7e 	bl	8007670 <__assert_func>
 8009b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b78:	6006      	str	r6, [r0, #0]
 8009b7a:	60c6      	str	r6, [r0, #12]
 8009b7c:	b13c      	cbz	r4, 8009b8e <_Bfree+0x3a>
 8009b7e:	69eb      	ldr	r3, [r5, #28]
 8009b80:	6862      	ldr	r2, [r4, #4]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b88:	6021      	str	r1, [r4, #0]
 8009b8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b8e:	bd70      	pop	{r4, r5, r6, pc}
 8009b90:	0800cbdf 	.word	0x0800cbdf
 8009b94:	0800cbf6 	.word	0x0800cbf6

08009b98 <__multadd>:
 8009b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b9c:	4607      	mov	r7, r0
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	461e      	mov	r6, r3
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	690d      	ldr	r5, [r1, #16]
 8009ba6:	f101 0c14 	add.w	ip, r1, #20
 8009baa:	f8dc 3000 	ldr.w	r3, [ip]
 8009bae:	3001      	adds	r0, #1
 8009bb0:	b299      	uxth	r1, r3
 8009bb2:	fb02 6101 	mla	r1, r2, r1, r6
 8009bb6:	0c1e      	lsrs	r6, r3, #16
 8009bb8:	0c0b      	lsrs	r3, r1, #16
 8009bba:	fb02 3306 	mla	r3, r2, r6, r3
 8009bbe:	b289      	uxth	r1, r1
 8009bc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009bc4:	4285      	cmp	r5, r0
 8009bc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bca:	f84c 1b04 	str.w	r1, [ip], #4
 8009bce:	dcec      	bgt.n	8009baa <__multadd+0x12>
 8009bd0:	b30e      	cbz	r6, 8009c16 <__multadd+0x7e>
 8009bd2:	68a3      	ldr	r3, [r4, #8]
 8009bd4:	42ab      	cmp	r3, r5
 8009bd6:	dc19      	bgt.n	8009c0c <__multadd+0x74>
 8009bd8:	6861      	ldr	r1, [r4, #4]
 8009bda:	4638      	mov	r0, r7
 8009bdc:	3101      	adds	r1, #1
 8009bde:	f7ff ff79 	bl	8009ad4 <_Balloc>
 8009be2:	4680      	mov	r8, r0
 8009be4:	b928      	cbnz	r0, 8009bf2 <__multadd+0x5a>
 8009be6:	4602      	mov	r2, r0
 8009be8:	21ba      	movs	r1, #186	; 0xba
 8009bea:	4b0c      	ldr	r3, [pc, #48]	; (8009c1c <__multadd+0x84>)
 8009bec:	480c      	ldr	r0, [pc, #48]	; (8009c20 <__multadd+0x88>)
 8009bee:	f7fd fd3f 	bl	8007670 <__assert_func>
 8009bf2:	6922      	ldr	r2, [r4, #16]
 8009bf4:	f104 010c 	add.w	r1, r4, #12
 8009bf8:	3202      	adds	r2, #2
 8009bfa:	0092      	lsls	r2, r2, #2
 8009bfc:	300c      	adds	r0, #12
 8009bfe:	f7fd fd24 	bl	800764a <memcpy>
 8009c02:	4621      	mov	r1, r4
 8009c04:	4638      	mov	r0, r7
 8009c06:	f7ff ffa5 	bl	8009b54 <_Bfree>
 8009c0a:	4644      	mov	r4, r8
 8009c0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c10:	3501      	adds	r5, #1
 8009c12:	615e      	str	r6, [r3, #20]
 8009c14:	6125      	str	r5, [r4, #16]
 8009c16:	4620      	mov	r0, r4
 8009c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c1c:	0800cb6e 	.word	0x0800cb6e
 8009c20:	0800cbf6 	.word	0x0800cbf6

08009c24 <__s2b>:
 8009c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c28:	4615      	mov	r5, r2
 8009c2a:	2209      	movs	r2, #9
 8009c2c:	461f      	mov	r7, r3
 8009c2e:	3308      	adds	r3, #8
 8009c30:	460c      	mov	r4, r1
 8009c32:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c36:	4606      	mov	r6, r0
 8009c38:	2201      	movs	r2, #1
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	db09      	blt.n	8009c54 <__s2b+0x30>
 8009c40:	4630      	mov	r0, r6
 8009c42:	f7ff ff47 	bl	8009ad4 <_Balloc>
 8009c46:	b940      	cbnz	r0, 8009c5a <__s2b+0x36>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	21d3      	movs	r1, #211	; 0xd3
 8009c4c:	4b18      	ldr	r3, [pc, #96]	; (8009cb0 <__s2b+0x8c>)
 8009c4e:	4819      	ldr	r0, [pc, #100]	; (8009cb4 <__s2b+0x90>)
 8009c50:	f7fd fd0e 	bl	8007670 <__assert_func>
 8009c54:	0052      	lsls	r2, r2, #1
 8009c56:	3101      	adds	r1, #1
 8009c58:	e7f0      	b.n	8009c3c <__s2b+0x18>
 8009c5a:	9b08      	ldr	r3, [sp, #32]
 8009c5c:	2d09      	cmp	r5, #9
 8009c5e:	6143      	str	r3, [r0, #20]
 8009c60:	f04f 0301 	mov.w	r3, #1
 8009c64:	6103      	str	r3, [r0, #16]
 8009c66:	dd16      	ble.n	8009c96 <__s2b+0x72>
 8009c68:	f104 0909 	add.w	r9, r4, #9
 8009c6c:	46c8      	mov	r8, r9
 8009c6e:	442c      	add	r4, r5
 8009c70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c74:	4601      	mov	r1, r0
 8009c76:	220a      	movs	r2, #10
 8009c78:	4630      	mov	r0, r6
 8009c7a:	3b30      	subs	r3, #48	; 0x30
 8009c7c:	f7ff ff8c 	bl	8009b98 <__multadd>
 8009c80:	45a0      	cmp	r8, r4
 8009c82:	d1f5      	bne.n	8009c70 <__s2b+0x4c>
 8009c84:	f1a5 0408 	sub.w	r4, r5, #8
 8009c88:	444c      	add	r4, r9
 8009c8a:	1b2d      	subs	r5, r5, r4
 8009c8c:	1963      	adds	r3, r4, r5
 8009c8e:	42bb      	cmp	r3, r7
 8009c90:	db04      	blt.n	8009c9c <__s2b+0x78>
 8009c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c96:	2509      	movs	r5, #9
 8009c98:	340a      	adds	r4, #10
 8009c9a:	e7f6      	b.n	8009c8a <__s2b+0x66>
 8009c9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ca0:	4601      	mov	r1, r0
 8009ca2:	220a      	movs	r2, #10
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	3b30      	subs	r3, #48	; 0x30
 8009ca8:	f7ff ff76 	bl	8009b98 <__multadd>
 8009cac:	e7ee      	b.n	8009c8c <__s2b+0x68>
 8009cae:	bf00      	nop
 8009cb0:	0800cb6e 	.word	0x0800cb6e
 8009cb4:	0800cbf6 	.word	0x0800cbf6

08009cb8 <__hi0bits>:
 8009cb8:	0c02      	lsrs	r2, r0, #16
 8009cba:	0412      	lsls	r2, r2, #16
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	b9ca      	cbnz	r2, 8009cf4 <__hi0bits+0x3c>
 8009cc0:	0403      	lsls	r3, r0, #16
 8009cc2:	2010      	movs	r0, #16
 8009cc4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009cc8:	bf04      	itt	eq
 8009cca:	021b      	lsleq	r3, r3, #8
 8009ccc:	3008      	addeq	r0, #8
 8009cce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009cd2:	bf04      	itt	eq
 8009cd4:	011b      	lsleq	r3, r3, #4
 8009cd6:	3004      	addeq	r0, #4
 8009cd8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009cdc:	bf04      	itt	eq
 8009cde:	009b      	lsleq	r3, r3, #2
 8009ce0:	3002      	addeq	r0, #2
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	db05      	blt.n	8009cf2 <__hi0bits+0x3a>
 8009ce6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009cea:	f100 0001 	add.w	r0, r0, #1
 8009cee:	bf08      	it	eq
 8009cf0:	2020      	moveq	r0, #32
 8009cf2:	4770      	bx	lr
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	e7e5      	b.n	8009cc4 <__hi0bits+0xc>

08009cf8 <__lo0bits>:
 8009cf8:	6803      	ldr	r3, [r0, #0]
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	f013 0007 	ands.w	r0, r3, #7
 8009d00:	d00b      	beq.n	8009d1a <__lo0bits+0x22>
 8009d02:	07d9      	lsls	r1, r3, #31
 8009d04:	d421      	bmi.n	8009d4a <__lo0bits+0x52>
 8009d06:	0798      	lsls	r0, r3, #30
 8009d08:	bf49      	itett	mi
 8009d0a:	085b      	lsrmi	r3, r3, #1
 8009d0c:	089b      	lsrpl	r3, r3, #2
 8009d0e:	2001      	movmi	r0, #1
 8009d10:	6013      	strmi	r3, [r2, #0]
 8009d12:	bf5c      	itt	pl
 8009d14:	2002      	movpl	r0, #2
 8009d16:	6013      	strpl	r3, [r2, #0]
 8009d18:	4770      	bx	lr
 8009d1a:	b299      	uxth	r1, r3
 8009d1c:	b909      	cbnz	r1, 8009d22 <__lo0bits+0x2a>
 8009d1e:	2010      	movs	r0, #16
 8009d20:	0c1b      	lsrs	r3, r3, #16
 8009d22:	b2d9      	uxtb	r1, r3
 8009d24:	b909      	cbnz	r1, 8009d2a <__lo0bits+0x32>
 8009d26:	3008      	adds	r0, #8
 8009d28:	0a1b      	lsrs	r3, r3, #8
 8009d2a:	0719      	lsls	r1, r3, #28
 8009d2c:	bf04      	itt	eq
 8009d2e:	091b      	lsreq	r3, r3, #4
 8009d30:	3004      	addeq	r0, #4
 8009d32:	0799      	lsls	r1, r3, #30
 8009d34:	bf04      	itt	eq
 8009d36:	089b      	lsreq	r3, r3, #2
 8009d38:	3002      	addeq	r0, #2
 8009d3a:	07d9      	lsls	r1, r3, #31
 8009d3c:	d403      	bmi.n	8009d46 <__lo0bits+0x4e>
 8009d3e:	085b      	lsrs	r3, r3, #1
 8009d40:	f100 0001 	add.w	r0, r0, #1
 8009d44:	d003      	beq.n	8009d4e <__lo0bits+0x56>
 8009d46:	6013      	str	r3, [r2, #0]
 8009d48:	4770      	bx	lr
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	4770      	bx	lr
 8009d4e:	2020      	movs	r0, #32
 8009d50:	4770      	bx	lr
	...

08009d54 <__i2b>:
 8009d54:	b510      	push	{r4, lr}
 8009d56:	460c      	mov	r4, r1
 8009d58:	2101      	movs	r1, #1
 8009d5a:	f7ff febb 	bl	8009ad4 <_Balloc>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	b928      	cbnz	r0, 8009d6e <__i2b+0x1a>
 8009d62:	f240 1145 	movw	r1, #325	; 0x145
 8009d66:	4b04      	ldr	r3, [pc, #16]	; (8009d78 <__i2b+0x24>)
 8009d68:	4804      	ldr	r0, [pc, #16]	; (8009d7c <__i2b+0x28>)
 8009d6a:	f7fd fc81 	bl	8007670 <__assert_func>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	6144      	str	r4, [r0, #20]
 8009d72:	6103      	str	r3, [r0, #16]
 8009d74:	bd10      	pop	{r4, pc}
 8009d76:	bf00      	nop
 8009d78:	0800cb6e 	.word	0x0800cb6e
 8009d7c:	0800cbf6 	.word	0x0800cbf6

08009d80 <__multiply>:
 8009d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d84:	4691      	mov	r9, r2
 8009d86:	690a      	ldr	r2, [r1, #16]
 8009d88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d8c:	460c      	mov	r4, r1
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	bfbe      	ittt	lt
 8009d92:	460b      	movlt	r3, r1
 8009d94:	464c      	movlt	r4, r9
 8009d96:	4699      	movlt	r9, r3
 8009d98:	6927      	ldr	r7, [r4, #16]
 8009d9a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d9e:	68a3      	ldr	r3, [r4, #8]
 8009da0:	6861      	ldr	r1, [r4, #4]
 8009da2:	eb07 060a 	add.w	r6, r7, sl
 8009da6:	42b3      	cmp	r3, r6
 8009da8:	b085      	sub	sp, #20
 8009daa:	bfb8      	it	lt
 8009dac:	3101      	addlt	r1, #1
 8009dae:	f7ff fe91 	bl	8009ad4 <_Balloc>
 8009db2:	b930      	cbnz	r0, 8009dc2 <__multiply+0x42>
 8009db4:	4602      	mov	r2, r0
 8009db6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009dba:	4b43      	ldr	r3, [pc, #268]	; (8009ec8 <__multiply+0x148>)
 8009dbc:	4843      	ldr	r0, [pc, #268]	; (8009ecc <__multiply+0x14c>)
 8009dbe:	f7fd fc57 	bl	8007670 <__assert_func>
 8009dc2:	f100 0514 	add.w	r5, r0, #20
 8009dc6:	462b      	mov	r3, r5
 8009dc8:	2200      	movs	r2, #0
 8009dca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009dce:	4543      	cmp	r3, r8
 8009dd0:	d321      	bcc.n	8009e16 <__multiply+0x96>
 8009dd2:	f104 0314 	add.w	r3, r4, #20
 8009dd6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009dda:	f109 0314 	add.w	r3, r9, #20
 8009dde:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009de2:	9202      	str	r2, [sp, #8]
 8009de4:	1b3a      	subs	r2, r7, r4
 8009de6:	3a15      	subs	r2, #21
 8009de8:	f022 0203 	bic.w	r2, r2, #3
 8009dec:	3204      	adds	r2, #4
 8009dee:	f104 0115 	add.w	r1, r4, #21
 8009df2:	428f      	cmp	r7, r1
 8009df4:	bf38      	it	cc
 8009df6:	2204      	movcc	r2, #4
 8009df8:	9201      	str	r2, [sp, #4]
 8009dfa:	9a02      	ldr	r2, [sp, #8]
 8009dfc:	9303      	str	r3, [sp, #12]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d80c      	bhi.n	8009e1c <__multiply+0x9c>
 8009e02:	2e00      	cmp	r6, #0
 8009e04:	dd03      	ble.n	8009e0e <__multiply+0x8e>
 8009e06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d05a      	beq.n	8009ec4 <__multiply+0x144>
 8009e0e:	6106      	str	r6, [r0, #16]
 8009e10:	b005      	add	sp, #20
 8009e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e16:	f843 2b04 	str.w	r2, [r3], #4
 8009e1a:	e7d8      	b.n	8009dce <__multiply+0x4e>
 8009e1c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e20:	f1ba 0f00 	cmp.w	sl, #0
 8009e24:	d023      	beq.n	8009e6e <__multiply+0xee>
 8009e26:	46a9      	mov	r9, r5
 8009e28:	f04f 0c00 	mov.w	ip, #0
 8009e2c:	f104 0e14 	add.w	lr, r4, #20
 8009e30:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009e34:	f8d9 1000 	ldr.w	r1, [r9]
 8009e38:	fa1f fb82 	uxth.w	fp, r2
 8009e3c:	b289      	uxth	r1, r1
 8009e3e:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e42:	4461      	add	r1, ip
 8009e44:	f8d9 c000 	ldr.w	ip, [r9]
 8009e48:	0c12      	lsrs	r2, r2, #16
 8009e4a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009e4e:	fb0a c202 	mla	r2, sl, r2, ip
 8009e52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e56:	b289      	uxth	r1, r1
 8009e58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e5c:	4577      	cmp	r7, lr
 8009e5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e62:	f849 1b04 	str.w	r1, [r9], #4
 8009e66:	d8e3      	bhi.n	8009e30 <__multiply+0xb0>
 8009e68:	9a01      	ldr	r2, [sp, #4]
 8009e6a:	f845 c002 	str.w	ip, [r5, r2]
 8009e6e:	9a03      	ldr	r2, [sp, #12]
 8009e70:	3304      	adds	r3, #4
 8009e72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e76:	f1b9 0f00 	cmp.w	r9, #0
 8009e7a:	d021      	beq.n	8009ec0 <__multiply+0x140>
 8009e7c:	46ae      	mov	lr, r5
 8009e7e:	f04f 0a00 	mov.w	sl, #0
 8009e82:	6829      	ldr	r1, [r5, #0]
 8009e84:	f104 0c14 	add.w	ip, r4, #20
 8009e88:	f8bc b000 	ldrh.w	fp, [ip]
 8009e8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e90:	b289      	uxth	r1, r1
 8009e92:	fb09 220b 	mla	r2, r9, fp, r2
 8009e96:	4452      	add	r2, sl
 8009e98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e9c:	f84e 1b04 	str.w	r1, [lr], #4
 8009ea0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009ea4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ea8:	f8be 1000 	ldrh.w	r1, [lr]
 8009eac:	4567      	cmp	r7, ip
 8009eae:	fb09 110a 	mla	r1, r9, sl, r1
 8009eb2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009eb6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009eba:	d8e5      	bhi.n	8009e88 <__multiply+0x108>
 8009ebc:	9a01      	ldr	r2, [sp, #4]
 8009ebe:	50a9      	str	r1, [r5, r2]
 8009ec0:	3504      	adds	r5, #4
 8009ec2:	e79a      	b.n	8009dfa <__multiply+0x7a>
 8009ec4:	3e01      	subs	r6, #1
 8009ec6:	e79c      	b.n	8009e02 <__multiply+0x82>
 8009ec8:	0800cb6e 	.word	0x0800cb6e
 8009ecc:	0800cbf6 	.word	0x0800cbf6

08009ed0 <__pow5mult>:
 8009ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ed4:	4615      	mov	r5, r2
 8009ed6:	f012 0203 	ands.w	r2, r2, #3
 8009eda:	4606      	mov	r6, r0
 8009edc:	460f      	mov	r7, r1
 8009ede:	d007      	beq.n	8009ef0 <__pow5mult+0x20>
 8009ee0:	4c25      	ldr	r4, [pc, #148]	; (8009f78 <__pow5mult+0xa8>)
 8009ee2:	3a01      	subs	r2, #1
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009eea:	f7ff fe55 	bl	8009b98 <__multadd>
 8009eee:	4607      	mov	r7, r0
 8009ef0:	10ad      	asrs	r5, r5, #2
 8009ef2:	d03d      	beq.n	8009f70 <__pow5mult+0xa0>
 8009ef4:	69f4      	ldr	r4, [r6, #28]
 8009ef6:	b97c      	cbnz	r4, 8009f18 <__pow5mult+0x48>
 8009ef8:	2010      	movs	r0, #16
 8009efa:	f7fd fc1f 	bl	800773c <malloc>
 8009efe:	4602      	mov	r2, r0
 8009f00:	61f0      	str	r0, [r6, #28]
 8009f02:	b928      	cbnz	r0, 8009f10 <__pow5mult+0x40>
 8009f04:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009f08:	4b1c      	ldr	r3, [pc, #112]	; (8009f7c <__pow5mult+0xac>)
 8009f0a:	481d      	ldr	r0, [pc, #116]	; (8009f80 <__pow5mult+0xb0>)
 8009f0c:	f7fd fbb0 	bl	8007670 <__assert_func>
 8009f10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f14:	6004      	str	r4, [r0, #0]
 8009f16:	60c4      	str	r4, [r0, #12]
 8009f18:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009f1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f20:	b94c      	cbnz	r4, 8009f36 <__pow5mult+0x66>
 8009f22:	f240 2171 	movw	r1, #625	; 0x271
 8009f26:	4630      	mov	r0, r6
 8009f28:	f7ff ff14 	bl	8009d54 <__i2b>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	4604      	mov	r4, r0
 8009f30:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f34:	6003      	str	r3, [r0, #0]
 8009f36:	f04f 0900 	mov.w	r9, #0
 8009f3a:	07eb      	lsls	r3, r5, #31
 8009f3c:	d50a      	bpl.n	8009f54 <__pow5mult+0x84>
 8009f3e:	4639      	mov	r1, r7
 8009f40:	4622      	mov	r2, r4
 8009f42:	4630      	mov	r0, r6
 8009f44:	f7ff ff1c 	bl	8009d80 <__multiply>
 8009f48:	4680      	mov	r8, r0
 8009f4a:	4639      	mov	r1, r7
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	f7ff fe01 	bl	8009b54 <_Bfree>
 8009f52:	4647      	mov	r7, r8
 8009f54:	106d      	asrs	r5, r5, #1
 8009f56:	d00b      	beq.n	8009f70 <__pow5mult+0xa0>
 8009f58:	6820      	ldr	r0, [r4, #0]
 8009f5a:	b938      	cbnz	r0, 8009f6c <__pow5mult+0x9c>
 8009f5c:	4622      	mov	r2, r4
 8009f5e:	4621      	mov	r1, r4
 8009f60:	4630      	mov	r0, r6
 8009f62:	f7ff ff0d 	bl	8009d80 <__multiply>
 8009f66:	6020      	str	r0, [r4, #0]
 8009f68:	f8c0 9000 	str.w	r9, [r0]
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	e7e4      	b.n	8009f3a <__pow5mult+0x6a>
 8009f70:	4638      	mov	r0, r7
 8009f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f76:	bf00      	nop
 8009f78:	0800cd40 	.word	0x0800cd40
 8009f7c:	0800cbdf 	.word	0x0800cbdf
 8009f80:	0800cbf6 	.word	0x0800cbf6

08009f84 <__lshift>:
 8009f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f88:	460c      	mov	r4, r1
 8009f8a:	4607      	mov	r7, r0
 8009f8c:	4691      	mov	r9, r2
 8009f8e:	6923      	ldr	r3, [r4, #16]
 8009f90:	6849      	ldr	r1, [r1, #4]
 8009f92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f96:	68a3      	ldr	r3, [r4, #8]
 8009f98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f9c:	f108 0601 	add.w	r6, r8, #1
 8009fa0:	42b3      	cmp	r3, r6
 8009fa2:	db0b      	blt.n	8009fbc <__lshift+0x38>
 8009fa4:	4638      	mov	r0, r7
 8009fa6:	f7ff fd95 	bl	8009ad4 <_Balloc>
 8009faa:	4605      	mov	r5, r0
 8009fac:	b948      	cbnz	r0, 8009fc2 <__lshift+0x3e>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009fb4:	4b27      	ldr	r3, [pc, #156]	; (800a054 <__lshift+0xd0>)
 8009fb6:	4828      	ldr	r0, [pc, #160]	; (800a058 <__lshift+0xd4>)
 8009fb8:	f7fd fb5a 	bl	8007670 <__assert_func>
 8009fbc:	3101      	adds	r1, #1
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	e7ee      	b.n	8009fa0 <__lshift+0x1c>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	f100 0114 	add.w	r1, r0, #20
 8009fc8:	f100 0210 	add.w	r2, r0, #16
 8009fcc:	4618      	mov	r0, r3
 8009fce:	4553      	cmp	r3, sl
 8009fd0:	db33      	blt.n	800a03a <__lshift+0xb6>
 8009fd2:	6920      	ldr	r0, [r4, #16]
 8009fd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fd8:	f104 0314 	add.w	r3, r4, #20
 8009fdc:	f019 091f 	ands.w	r9, r9, #31
 8009fe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fe4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009fe8:	d02b      	beq.n	800a042 <__lshift+0xbe>
 8009fea:	468a      	mov	sl, r1
 8009fec:	2200      	movs	r2, #0
 8009fee:	f1c9 0e20 	rsb	lr, r9, #32
 8009ff2:	6818      	ldr	r0, [r3, #0]
 8009ff4:	fa00 f009 	lsl.w	r0, r0, r9
 8009ff8:	4310      	orrs	r0, r2
 8009ffa:	f84a 0b04 	str.w	r0, [sl], #4
 8009ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a002:	459c      	cmp	ip, r3
 800a004:	fa22 f20e 	lsr.w	r2, r2, lr
 800a008:	d8f3      	bhi.n	8009ff2 <__lshift+0x6e>
 800a00a:	ebac 0304 	sub.w	r3, ip, r4
 800a00e:	3b15      	subs	r3, #21
 800a010:	f023 0303 	bic.w	r3, r3, #3
 800a014:	3304      	adds	r3, #4
 800a016:	f104 0015 	add.w	r0, r4, #21
 800a01a:	4584      	cmp	ip, r0
 800a01c:	bf38      	it	cc
 800a01e:	2304      	movcc	r3, #4
 800a020:	50ca      	str	r2, [r1, r3]
 800a022:	b10a      	cbz	r2, 800a028 <__lshift+0xa4>
 800a024:	f108 0602 	add.w	r6, r8, #2
 800a028:	3e01      	subs	r6, #1
 800a02a:	4638      	mov	r0, r7
 800a02c:	4621      	mov	r1, r4
 800a02e:	612e      	str	r6, [r5, #16]
 800a030:	f7ff fd90 	bl	8009b54 <_Bfree>
 800a034:	4628      	mov	r0, r5
 800a036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a03a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a03e:	3301      	adds	r3, #1
 800a040:	e7c5      	b.n	8009fce <__lshift+0x4a>
 800a042:	3904      	subs	r1, #4
 800a044:	f853 2b04 	ldr.w	r2, [r3], #4
 800a048:	459c      	cmp	ip, r3
 800a04a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a04e:	d8f9      	bhi.n	800a044 <__lshift+0xc0>
 800a050:	e7ea      	b.n	800a028 <__lshift+0xa4>
 800a052:	bf00      	nop
 800a054:	0800cb6e 	.word	0x0800cb6e
 800a058:	0800cbf6 	.word	0x0800cbf6

0800a05c <__mcmp>:
 800a05c:	4603      	mov	r3, r0
 800a05e:	690a      	ldr	r2, [r1, #16]
 800a060:	6900      	ldr	r0, [r0, #16]
 800a062:	b530      	push	{r4, r5, lr}
 800a064:	1a80      	subs	r0, r0, r2
 800a066:	d10d      	bne.n	800a084 <__mcmp+0x28>
 800a068:	3314      	adds	r3, #20
 800a06a:	3114      	adds	r1, #20
 800a06c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a070:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a074:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a078:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a07c:	4295      	cmp	r5, r2
 800a07e:	d002      	beq.n	800a086 <__mcmp+0x2a>
 800a080:	d304      	bcc.n	800a08c <__mcmp+0x30>
 800a082:	2001      	movs	r0, #1
 800a084:	bd30      	pop	{r4, r5, pc}
 800a086:	42a3      	cmp	r3, r4
 800a088:	d3f4      	bcc.n	800a074 <__mcmp+0x18>
 800a08a:	e7fb      	b.n	800a084 <__mcmp+0x28>
 800a08c:	f04f 30ff 	mov.w	r0, #4294967295
 800a090:	e7f8      	b.n	800a084 <__mcmp+0x28>
	...

0800a094 <__mdiff>:
 800a094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	460d      	mov	r5, r1
 800a09a:	4607      	mov	r7, r0
 800a09c:	4611      	mov	r1, r2
 800a09e:	4628      	mov	r0, r5
 800a0a0:	4614      	mov	r4, r2
 800a0a2:	f7ff ffdb 	bl	800a05c <__mcmp>
 800a0a6:	1e06      	subs	r6, r0, #0
 800a0a8:	d111      	bne.n	800a0ce <__mdiff+0x3a>
 800a0aa:	4631      	mov	r1, r6
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	f7ff fd11 	bl	8009ad4 <_Balloc>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	b928      	cbnz	r0, 800a0c2 <__mdiff+0x2e>
 800a0b6:	f240 2137 	movw	r1, #567	; 0x237
 800a0ba:	4b3a      	ldr	r3, [pc, #232]	; (800a1a4 <__mdiff+0x110>)
 800a0bc:	483a      	ldr	r0, [pc, #232]	; (800a1a8 <__mdiff+0x114>)
 800a0be:	f7fd fad7 	bl	8007670 <__assert_func>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a0c8:	4610      	mov	r0, r2
 800a0ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ce:	bfa4      	itt	ge
 800a0d0:	4623      	movge	r3, r4
 800a0d2:	462c      	movge	r4, r5
 800a0d4:	4638      	mov	r0, r7
 800a0d6:	6861      	ldr	r1, [r4, #4]
 800a0d8:	bfa6      	itte	ge
 800a0da:	461d      	movge	r5, r3
 800a0dc:	2600      	movge	r6, #0
 800a0de:	2601      	movlt	r6, #1
 800a0e0:	f7ff fcf8 	bl	8009ad4 <_Balloc>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	b918      	cbnz	r0, 800a0f0 <__mdiff+0x5c>
 800a0e8:	f240 2145 	movw	r1, #581	; 0x245
 800a0ec:	4b2d      	ldr	r3, [pc, #180]	; (800a1a4 <__mdiff+0x110>)
 800a0ee:	e7e5      	b.n	800a0bc <__mdiff+0x28>
 800a0f0:	f102 0814 	add.w	r8, r2, #20
 800a0f4:	46c2      	mov	sl, r8
 800a0f6:	f04f 0c00 	mov.w	ip, #0
 800a0fa:	6927      	ldr	r7, [r4, #16]
 800a0fc:	60c6      	str	r6, [r0, #12]
 800a0fe:	692e      	ldr	r6, [r5, #16]
 800a100:	f104 0014 	add.w	r0, r4, #20
 800a104:	f105 0914 	add.w	r9, r5, #20
 800a108:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a10c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a110:	3410      	adds	r4, #16
 800a112:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a116:	f859 3b04 	ldr.w	r3, [r9], #4
 800a11a:	fa1f f18b 	uxth.w	r1, fp
 800a11e:	4461      	add	r1, ip
 800a120:	fa1f fc83 	uxth.w	ip, r3
 800a124:	0c1b      	lsrs	r3, r3, #16
 800a126:	eba1 010c 	sub.w	r1, r1, ip
 800a12a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a12e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a132:	b289      	uxth	r1, r1
 800a134:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a138:	454e      	cmp	r6, r9
 800a13a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a13e:	f84a 1b04 	str.w	r1, [sl], #4
 800a142:	d8e6      	bhi.n	800a112 <__mdiff+0x7e>
 800a144:	1b73      	subs	r3, r6, r5
 800a146:	3b15      	subs	r3, #21
 800a148:	f023 0303 	bic.w	r3, r3, #3
 800a14c:	3515      	adds	r5, #21
 800a14e:	3304      	adds	r3, #4
 800a150:	42ae      	cmp	r6, r5
 800a152:	bf38      	it	cc
 800a154:	2304      	movcc	r3, #4
 800a156:	4418      	add	r0, r3
 800a158:	4443      	add	r3, r8
 800a15a:	461e      	mov	r6, r3
 800a15c:	4605      	mov	r5, r0
 800a15e:	4575      	cmp	r5, lr
 800a160:	d30e      	bcc.n	800a180 <__mdiff+0xec>
 800a162:	f10e 0103 	add.w	r1, lr, #3
 800a166:	1a09      	subs	r1, r1, r0
 800a168:	f021 0103 	bic.w	r1, r1, #3
 800a16c:	3803      	subs	r0, #3
 800a16e:	4586      	cmp	lr, r0
 800a170:	bf38      	it	cc
 800a172:	2100      	movcc	r1, #0
 800a174:	440b      	add	r3, r1
 800a176:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a17a:	b189      	cbz	r1, 800a1a0 <__mdiff+0x10c>
 800a17c:	6117      	str	r7, [r2, #16]
 800a17e:	e7a3      	b.n	800a0c8 <__mdiff+0x34>
 800a180:	f855 8b04 	ldr.w	r8, [r5], #4
 800a184:	fa1f f188 	uxth.w	r1, r8
 800a188:	4461      	add	r1, ip
 800a18a:	140c      	asrs	r4, r1, #16
 800a18c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a190:	b289      	uxth	r1, r1
 800a192:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a196:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a19a:	f846 1b04 	str.w	r1, [r6], #4
 800a19e:	e7de      	b.n	800a15e <__mdiff+0xca>
 800a1a0:	3f01      	subs	r7, #1
 800a1a2:	e7e8      	b.n	800a176 <__mdiff+0xe2>
 800a1a4:	0800cb6e 	.word	0x0800cb6e
 800a1a8:	0800cbf6 	.word	0x0800cbf6

0800a1ac <__ulp>:
 800a1ac:	4b0e      	ldr	r3, [pc, #56]	; (800a1e8 <__ulp+0x3c>)
 800a1ae:	400b      	ands	r3, r1
 800a1b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	dc08      	bgt.n	800a1ca <__ulp+0x1e>
 800a1b8:	425b      	negs	r3, r3
 800a1ba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a1be:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a1c2:	da04      	bge.n	800a1ce <__ulp+0x22>
 800a1c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a1c8:	4113      	asrs	r3, r2
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	e008      	b.n	800a1e0 <__ulp+0x34>
 800a1ce:	f1a2 0314 	sub.w	r3, r2, #20
 800a1d2:	2b1e      	cmp	r3, #30
 800a1d4:	bfd6      	itet	le
 800a1d6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a1da:	2201      	movgt	r2, #1
 800a1dc:	40da      	lsrle	r2, r3
 800a1de:	2300      	movs	r3, #0
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	4610      	mov	r0, r2
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	7ff00000 	.word	0x7ff00000

0800a1ec <__b2d>:
 800a1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ee:	6905      	ldr	r5, [r0, #16]
 800a1f0:	f100 0714 	add.w	r7, r0, #20
 800a1f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a1f8:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a1fc:	1f2e      	subs	r6, r5, #4
 800a1fe:	4620      	mov	r0, r4
 800a200:	f7ff fd5a 	bl	8009cb8 <__hi0bits>
 800a204:	f1c0 0220 	rsb	r2, r0, #32
 800a208:	280a      	cmp	r0, #10
 800a20a:	4603      	mov	r3, r0
 800a20c:	f8df c068 	ldr.w	ip, [pc, #104]	; 800a278 <__b2d+0x8c>
 800a210:	600a      	str	r2, [r1, #0]
 800a212:	dc12      	bgt.n	800a23a <__b2d+0x4e>
 800a214:	f1c0 0e0b 	rsb	lr, r0, #11
 800a218:	fa24 f20e 	lsr.w	r2, r4, lr
 800a21c:	42b7      	cmp	r7, r6
 800a21e:	ea42 010c 	orr.w	r1, r2, ip
 800a222:	bf2c      	ite	cs
 800a224:	2200      	movcs	r2, #0
 800a226:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a22a:	3315      	adds	r3, #21
 800a22c:	fa04 f303 	lsl.w	r3, r4, r3
 800a230:	fa22 f20e 	lsr.w	r2, r2, lr
 800a234:	431a      	orrs	r2, r3
 800a236:	4610      	mov	r0, r2
 800a238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a23a:	42b7      	cmp	r7, r6
 800a23c:	bf2e      	itee	cs
 800a23e:	2200      	movcs	r2, #0
 800a240:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a244:	f1a5 0608 	subcc.w	r6, r5, #8
 800a248:	3b0b      	subs	r3, #11
 800a24a:	d012      	beq.n	800a272 <__b2d+0x86>
 800a24c:	f1c3 0520 	rsb	r5, r3, #32
 800a250:	fa22 f105 	lsr.w	r1, r2, r5
 800a254:	409c      	lsls	r4, r3
 800a256:	430c      	orrs	r4, r1
 800a258:	42be      	cmp	r6, r7
 800a25a:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800a25e:	bf94      	ite	ls
 800a260:	2400      	movls	r4, #0
 800a262:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a266:	409a      	lsls	r2, r3
 800a268:	40ec      	lsrs	r4, r5
 800a26a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a26e:	4322      	orrs	r2, r4
 800a270:	e7e1      	b.n	800a236 <__b2d+0x4a>
 800a272:	ea44 010c 	orr.w	r1, r4, ip
 800a276:	e7de      	b.n	800a236 <__b2d+0x4a>
 800a278:	3ff00000 	.word	0x3ff00000

0800a27c <__d2b>:
 800a27c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a27e:	2101      	movs	r1, #1
 800a280:	4617      	mov	r7, r2
 800a282:	461c      	mov	r4, r3
 800a284:	9e08      	ldr	r6, [sp, #32]
 800a286:	f7ff fc25 	bl	8009ad4 <_Balloc>
 800a28a:	4605      	mov	r5, r0
 800a28c:	b930      	cbnz	r0, 800a29c <__d2b+0x20>
 800a28e:	4602      	mov	r2, r0
 800a290:	f240 310f 	movw	r1, #783	; 0x30f
 800a294:	4b22      	ldr	r3, [pc, #136]	; (800a320 <__d2b+0xa4>)
 800a296:	4823      	ldr	r0, [pc, #140]	; (800a324 <__d2b+0xa8>)
 800a298:	f7fd f9ea 	bl	8007670 <__assert_func>
 800a29c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a2a0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a2a4:	bb24      	cbnz	r4, 800a2f0 <__d2b+0x74>
 800a2a6:	2f00      	cmp	r7, #0
 800a2a8:	9301      	str	r3, [sp, #4]
 800a2aa:	d026      	beq.n	800a2fa <__d2b+0x7e>
 800a2ac:	4668      	mov	r0, sp
 800a2ae:	9700      	str	r7, [sp, #0]
 800a2b0:	f7ff fd22 	bl	8009cf8 <__lo0bits>
 800a2b4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a2b8:	b1e8      	cbz	r0, 800a2f6 <__d2b+0x7a>
 800a2ba:	f1c0 0320 	rsb	r3, r0, #32
 800a2be:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c2:	430b      	orrs	r3, r1
 800a2c4:	40c2      	lsrs	r2, r0
 800a2c6:	616b      	str	r3, [r5, #20]
 800a2c8:	9201      	str	r2, [sp, #4]
 800a2ca:	9b01      	ldr	r3, [sp, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	bf14      	ite	ne
 800a2d0:	2102      	movne	r1, #2
 800a2d2:	2101      	moveq	r1, #1
 800a2d4:	61ab      	str	r3, [r5, #24]
 800a2d6:	6129      	str	r1, [r5, #16]
 800a2d8:	b1bc      	cbz	r4, 800a30a <__d2b+0x8e>
 800a2da:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a2de:	4404      	add	r4, r0
 800a2e0:	6034      	str	r4, [r6, #0]
 800a2e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e8:	6018      	str	r0, [r3, #0]
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	b003      	add	sp, #12
 800a2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2f4:	e7d7      	b.n	800a2a6 <__d2b+0x2a>
 800a2f6:	6169      	str	r1, [r5, #20]
 800a2f8:	e7e7      	b.n	800a2ca <__d2b+0x4e>
 800a2fa:	a801      	add	r0, sp, #4
 800a2fc:	f7ff fcfc 	bl	8009cf8 <__lo0bits>
 800a300:	9b01      	ldr	r3, [sp, #4]
 800a302:	2101      	movs	r1, #1
 800a304:	616b      	str	r3, [r5, #20]
 800a306:	3020      	adds	r0, #32
 800a308:	e7e5      	b.n	800a2d6 <__d2b+0x5a>
 800a30a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a30e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a312:	6030      	str	r0, [r6, #0]
 800a314:	6918      	ldr	r0, [r3, #16]
 800a316:	f7ff fccf 	bl	8009cb8 <__hi0bits>
 800a31a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a31e:	e7e2      	b.n	800a2e6 <__d2b+0x6a>
 800a320:	0800cb6e 	.word	0x0800cb6e
 800a324:	0800cbf6 	.word	0x0800cbf6

0800a328 <__ratio>:
 800a328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32c:	4688      	mov	r8, r1
 800a32e:	4669      	mov	r1, sp
 800a330:	4681      	mov	r9, r0
 800a332:	f7ff ff5b 	bl	800a1ec <__b2d>
 800a336:	460f      	mov	r7, r1
 800a338:	4604      	mov	r4, r0
 800a33a:	460d      	mov	r5, r1
 800a33c:	4640      	mov	r0, r8
 800a33e:	a901      	add	r1, sp, #4
 800a340:	f7ff ff54 	bl	800a1ec <__b2d>
 800a344:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a348:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a34c:	468b      	mov	fp, r1
 800a34e:	eba3 0c02 	sub.w	ip, r3, r2
 800a352:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a356:	1a9b      	subs	r3, r3, r2
 800a358:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	bfd5      	itete	le
 800a360:	460a      	movle	r2, r1
 800a362:	462a      	movgt	r2, r5
 800a364:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a368:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a36c:	bfd8      	it	le
 800a36e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a372:	465b      	mov	r3, fp
 800a374:	4602      	mov	r2, r0
 800a376:	4639      	mov	r1, r7
 800a378:	4620      	mov	r0, r4
 800a37a:	f7f6 f9d7 	bl	800072c <__aeabi_ddiv>
 800a37e:	b003      	add	sp, #12
 800a380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a384 <__copybits>:
 800a384:	3901      	subs	r1, #1
 800a386:	b570      	push	{r4, r5, r6, lr}
 800a388:	1149      	asrs	r1, r1, #5
 800a38a:	6914      	ldr	r4, [r2, #16]
 800a38c:	3101      	adds	r1, #1
 800a38e:	f102 0314 	add.w	r3, r2, #20
 800a392:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a396:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a39a:	1f05      	subs	r5, r0, #4
 800a39c:	42a3      	cmp	r3, r4
 800a39e:	d30c      	bcc.n	800a3ba <__copybits+0x36>
 800a3a0:	1aa3      	subs	r3, r4, r2
 800a3a2:	3b11      	subs	r3, #17
 800a3a4:	f023 0303 	bic.w	r3, r3, #3
 800a3a8:	3211      	adds	r2, #17
 800a3aa:	42a2      	cmp	r2, r4
 800a3ac:	bf88      	it	hi
 800a3ae:	2300      	movhi	r3, #0
 800a3b0:	4418      	add	r0, r3
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	4288      	cmp	r0, r1
 800a3b6:	d305      	bcc.n	800a3c4 <__copybits+0x40>
 800a3b8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800a3be:	f845 6f04 	str.w	r6, [r5, #4]!
 800a3c2:	e7eb      	b.n	800a39c <__copybits+0x18>
 800a3c4:	f840 3b04 	str.w	r3, [r0], #4
 800a3c8:	e7f4      	b.n	800a3b4 <__copybits+0x30>

0800a3ca <__any_on>:
 800a3ca:	f100 0214 	add.w	r2, r0, #20
 800a3ce:	6900      	ldr	r0, [r0, #16]
 800a3d0:	114b      	asrs	r3, r1, #5
 800a3d2:	4298      	cmp	r0, r3
 800a3d4:	b510      	push	{r4, lr}
 800a3d6:	db11      	blt.n	800a3fc <__any_on+0x32>
 800a3d8:	dd0a      	ble.n	800a3f0 <__any_on+0x26>
 800a3da:	f011 011f 	ands.w	r1, r1, #31
 800a3de:	d007      	beq.n	800a3f0 <__any_on+0x26>
 800a3e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a3e4:	fa24 f001 	lsr.w	r0, r4, r1
 800a3e8:	fa00 f101 	lsl.w	r1, r0, r1
 800a3ec:	428c      	cmp	r4, r1
 800a3ee:	d10b      	bne.n	800a408 <__any_on+0x3e>
 800a3f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d803      	bhi.n	800a400 <__any_on+0x36>
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	bd10      	pop	{r4, pc}
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	e7f7      	b.n	800a3f0 <__any_on+0x26>
 800a400:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a404:	2900      	cmp	r1, #0
 800a406:	d0f5      	beq.n	800a3f4 <__any_on+0x2a>
 800a408:	2001      	movs	r0, #1
 800a40a:	e7f6      	b.n	800a3fa <__any_on+0x30>

0800a40c <_realloc_r>:
 800a40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a410:	4680      	mov	r8, r0
 800a412:	4614      	mov	r4, r2
 800a414:	460e      	mov	r6, r1
 800a416:	b921      	cbnz	r1, 800a422 <_realloc_r+0x16>
 800a418:	4611      	mov	r1, r2
 800a41a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a41e:	f7fd b9b5 	b.w	800778c <_malloc_r>
 800a422:	b92a      	cbnz	r2, 800a430 <_realloc_r+0x24>
 800a424:	f7fd f942 	bl	80076ac <_free_r>
 800a428:	4625      	mov	r5, r4
 800a42a:	4628      	mov	r0, r5
 800a42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a430:	f000 facc 	bl	800a9cc <_malloc_usable_size_r>
 800a434:	4284      	cmp	r4, r0
 800a436:	4607      	mov	r7, r0
 800a438:	d802      	bhi.n	800a440 <_realloc_r+0x34>
 800a43a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a43e:	d812      	bhi.n	800a466 <_realloc_r+0x5a>
 800a440:	4621      	mov	r1, r4
 800a442:	4640      	mov	r0, r8
 800a444:	f7fd f9a2 	bl	800778c <_malloc_r>
 800a448:	4605      	mov	r5, r0
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d0ed      	beq.n	800a42a <_realloc_r+0x1e>
 800a44e:	42bc      	cmp	r4, r7
 800a450:	4622      	mov	r2, r4
 800a452:	4631      	mov	r1, r6
 800a454:	bf28      	it	cs
 800a456:	463a      	movcs	r2, r7
 800a458:	f7fd f8f7 	bl	800764a <memcpy>
 800a45c:	4631      	mov	r1, r6
 800a45e:	4640      	mov	r0, r8
 800a460:	f7fd f924 	bl	80076ac <_free_r>
 800a464:	e7e1      	b.n	800a42a <_realloc_r+0x1e>
 800a466:	4635      	mov	r5, r6
 800a468:	e7df      	b.n	800a42a <_realloc_r+0x1e>
	...

0800a46c <_strtoul_l.constprop.0>:
 800a46c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a470:	4686      	mov	lr, r0
 800a472:	460d      	mov	r5, r1
 800a474:	4f35      	ldr	r7, [pc, #212]	; (800a54c <_strtoul_l.constprop.0+0xe0>)
 800a476:	4628      	mov	r0, r5
 800a478:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a47c:	5d3e      	ldrb	r6, [r7, r4]
 800a47e:	f016 0608 	ands.w	r6, r6, #8
 800a482:	d1f8      	bne.n	800a476 <_strtoul_l.constprop.0+0xa>
 800a484:	2c2d      	cmp	r4, #45	; 0x2d
 800a486:	d130      	bne.n	800a4ea <_strtoul_l.constprop.0+0x7e>
 800a488:	2601      	movs	r6, #1
 800a48a:	782c      	ldrb	r4, [r5, #0]
 800a48c:	1c85      	adds	r5, r0, #2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d057      	beq.n	800a542 <_strtoul_l.constprop.0+0xd6>
 800a492:	2b10      	cmp	r3, #16
 800a494:	d109      	bne.n	800a4aa <_strtoul_l.constprop.0+0x3e>
 800a496:	2c30      	cmp	r4, #48	; 0x30
 800a498:	d107      	bne.n	800a4aa <_strtoul_l.constprop.0+0x3e>
 800a49a:	7828      	ldrb	r0, [r5, #0]
 800a49c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a4a0:	2858      	cmp	r0, #88	; 0x58
 800a4a2:	d149      	bne.n	800a538 <_strtoul_l.constprop.0+0xcc>
 800a4a4:	2310      	movs	r3, #16
 800a4a6:	786c      	ldrb	r4, [r5, #1]
 800a4a8:	3502      	adds	r5, #2
 800a4aa:	f04f 38ff 	mov.w	r8, #4294967295
 800a4ae:	fbb8 f8f3 	udiv	r8, r8, r3
 800a4b2:	2700      	movs	r7, #0
 800a4b4:	fb03 f908 	mul.w	r9, r3, r8
 800a4b8:	4638      	mov	r0, r7
 800a4ba:	ea6f 0909 	mvn.w	r9, r9
 800a4be:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a4c2:	f1bc 0f09 	cmp.w	ip, #9
 800a4c6:	d815      	bhi.n	800a4f4 <_strtoul_l.constprop.0+0x88>
 800a4c8:	4664      	mov	r4, ip
 800a4ca:	42a3      	cmp	r3, r4
 800a4cc:	dd23      	ble.n	800a516 <_strtoul_l.constprop.0+0xaa>
 800a4ce:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a4d2:	d007      	beq.n	800a4e4 <_strtoul_l.constprop.0+0x78>
 800a4d4:	4580      	cmp	r8, r0
 800a4d6:	d31b      	bcc.n	800a510 <_strtoul_l.constprop.0+0xa4>
 800a4d8:	d101      	bne.n	800a4de <_strtoul_l.constprop.0+0x72>
 800a4da:	45a1      	cmp	r9, r4
 800a4dc:	db18      	blt.n	800a510 <_strtoul_l.constprop.0+0xa4>
 800a4de:	2701      	movs	r7, #1
 800a4e0:	fb00 4003 	mla	r0, r0, r3, r4
 800a4e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4e8:	e7e9      	b.n	800a4be <_strtoul_l.constprop.0+0x52>
 800a4ea:	2c2b      	cmp	r4, #43	; 0x2b
 800a4ec:	bf04      	itt	eq
 800a4ee:	782c      	ldrbeq	r4, [r5, #0]
 800a4f0:	1c85      	addeq	r5, r0, #2
 800a4f2:	e7cc      	b.n	800a48e <_strtoul_l.constprop.0+0x22>
 800a4f4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a4f8:	f1bc 0f19 	cmp.w	ip, #25
 800a4fc:	d801      	bhi.n	800a502 <_strtoul_l.constprop.0+0x96>
 800a4fe:	3c37      	subs	r4, #55	; 0x37
 800a500:	e7e3      	b.n	800a4ca <_strtoul_l.constprop.0+0x5e>
 800a502:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a506:	f1bc 0f19 	cmp.w	ip, #25
 800a50a:	d804      	bhi.n	800a516 <_strtoul_l.constprop.0+0xaa>
 800a50c:	3c57      	subs	r4, #87	; 0x57
 800a50e:	e7dc      	b.n	800a4ca <_strtoul_l.constprop.0+0x5e>
 800a510:	f04f 37ff 	mov.w	r7, #4294967295
 800a514:	e7e6      	b.n	800a4e4 <_strtoul_l.constprop.0+0x78>
 800a516:	1c7b      	adds	r3, r7, #1
 800a518:	d106      	bne.n	800a528 <_strtoul_l.constprop.0+0xbc>
 800a51a:	2322      	movs	r3, #34	; 0x22
 800a51c:	4638      	mov	r0, r7
 800a51e:	f8ce 3000 	str.w	r3, [lr]
 800a522:	b932      	cbnz	r2, 800a532 <_strtoul_l.constprop.0+0xc6>
 800a524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a528:	b106      	cbz	r6, 800a52c <_strtoul_l.constprop.0+0xc0>
 800a52a:	4240      	negs	r0, r0
 800a52c:	2a00      	cmp	r2, #0
 800a52e:	d0f9      	beq.n	800a524 <_strtoul_l.constprop.0+0xb8>
 800a530:	b107      	cbz	r7, 800a534 <_strtoul_l.constprop.0+0xc8>
 800a532:	1e69      	subs	r1, r5, #1
 800a534:	6011      	str	r1, [r2, #0]
 800a536:	e7f5      	b.n	800a524 <_strtoul_l.constprop.0+0xb8>
 800a538:	2430      	movs	r4, #48	; 0x30
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1b5      	bne.n	800a4aa <_strtoul_l.constprop.0+0x3e>
 800a53e:	2308      	movs	r3, #8
 800a540:	e7b3      	b.n	800a4aa <_strtoul_l.constprop.0+0x3e>
 800a542:	2c30      	cmp	r4, #48	; 0x30
 800a544:	d0a9      	beq.n	800a49a <_strtoul_l.constprop.0+0x2e>
 800a546:	230a      	movs	r3, #10
 800a548:	e7af      	b.n	800a4aa <_strtoul_l.constprop.0+0x3e>
 800a54a:	bf00      	nop
 800a54c:	0800c979 	.word	0x0800c979

0800a550 <_strtoul_r>:
 800a550:	f7ff bf8c 	b.w	800a46c <_strtoul_l.constprop.0>

0800a554 <__ascii_wctomb>:
 800a554:	4603      	mov	r3, r0
 800a556:	4608      	mov	r0, r1
 800a558:	b141      	cbz	r1, 800a56c <__ascii_wctomb+0x18>
 800a55a:	2aff      	cmp	r2, #255	; 0xff
 800a55c:	d904      	bls.n	800a568 <__ascii_wctomb+0x14>
 800a55e:	228a      	movs	r2, #138	; 0x8a
 800a560:	f04f 30ff 	mov.w	r0, #4294967295
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	4770      	bx	lr
 800a568:	2001      	movs	r0, #1
 800a56a:	700a      	strb	r2, [r1, #0]
 800a56c:	4770      	bx	lr

0800a56e <__sfputc_r>:
 800a56e:	6893      	ldr	r3, [r2, #8]
 800a570:	b410      	push	{r4}
 800a572:	3b01      	subs	r3, #1
 800a574:	2b00      	cmp	r3, #0
 800a576:	6093      	str	r3, [r2, #8]
 800a578:	da07      	bge.n	800a58a <__sfputc_r+0x1c>
 800a57a:	6994      	ldr	r4, [r2, #24]
 800a57c:	42a3      	cmp	r3, r4
 800a57e:	db01      	blt.n	800a584 <__sfputc_r+0x16>
 800a580:	290a      	cmp	r1, #10
 800a582:	d102      	bne.n	800a58a <__sfputc_r+0x1c>
 800a584:	bc10      	pop	{r4}
 800a586:	f000 b933 	b.w	800a7f0 <__swbuf_r>
 800a58a:	6813      	ldr	r3, [r2, #0]
 800a58c:	1c58      	adds	r0, r3, #1
 800a58e:	6010      	str	r0, [r2, #0]
 800a590:	7019      	strb	r1, [r3, #0]
 800a592:	4608      	mov	r0, r1
 800a594:	bc10      	pop	{r4}
 800a596:	4770      	bx	lr

0800a598 <__sfputs_r>:
 800a598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59a:	4606      	mov	r6, r0
 800a59c:	460f      	mov	r7, r1
 800a59e:	4614      	mov	r4, r2
 800a5a0:	18d5      	adds	r5, r2, r3
 800a5a2:	42ac      	cmp	r4, r5
 800a5a4:	d101      	bne.n	800a5aa <__sfputs_r+0x12>
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	e007      	b.n	800a5ba <__sfputs_r+0x22>
 800a5aa:	463a      	mov	r2, r7
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b2:	f7ff ffdc 	bl	800a56e <__sfputc_r>
 800a5b6:	1c43      	adds	r3, r0, #1
 800a5b8:	d1f3      	bne.n	800a5a2 <__sfputs_r+0xa>
 800a5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a5bc <_vfiprintf_r>:
 800a5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c0:	460d      	mov	r5, r1
 800a5c2:	4614      	mov	r4, r2
 800a5c4:	4698      	mov	r8, r3
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	b09d      	sub	sp, #116	; 0x74
 800a5ca:	b118      	cbz	r0, 800a5d4 <_vfiprintf_r+0x18>
 800a5cc:	6a03      	ldr	r3, [r0, #32]
 800a5ce:	b90b      	cbnz	r3, 800a5d4 <_vfiprintf_r+0x18>
 800a5d0:	f7fc fea6 	bl	8007320 <__sinit>
 800a5d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5d6:	07d9      	lsls	r1, r3, #31
 800a5d8:	d405      	bmi.n	800a5e6 <_vfiprintf_r+0x2a>
 800a5da:	89ab      	ldrh	r3, [r5, #12]
 800a5dc:	059a      	lsls	r2, r3, #22
 800a5de:	d402      	bmi.n	800a5e6 <_vfiprintf_r+0x2a>
 800a5e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5e2:	f7fd f830 	bl	8007646 <__retarget_lock_acquire_recursive>
 800a5e6:	89ab      	ldrh	r3, [r5, #12]
 800a5e8:	071b      	lsls	r3, r3, #28
 800a5ea:	d501      	bpl.n	800a5f0 <_vfiprintf_r+0x34>
 800a5ec:	692b      	ldr	r3, [r5, #16]
 800a5ee:	b99b      	cbnz	r3, 800a618 <_vfiprintf_r+0x5c>
 800a5f0:	4629      	mov	r1, r5
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	f000 f93a 	bl	800a86c <__swsetup_r>
 800a5f8:	b170      	cbz	r0, 800a618 <_vfiprintf_r+0x5c>
 800a5fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5fc:	07dc      	lsls	r4, r3, #31
 800a5fe:	d504      	bpl.n	800a60a <_vfiprintf_r+0x4e>
 800a600:	f04f 30ff 	mov.w	r0, #4294967295
 800a604:	b01d      	add	sp, #116	; 0x74
 800a606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60a:	89ab      	ldrh	r3, [r5, #12]
 800a60c:	0598      	lsls	r0, r3, #22
 800a60e:	d4f7      	bmi.n	800a600 <_vfiprintf_r+0x44>
 800a610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a612:	f7fd f819 	bl	8007648 <__retarget_lock_release_recursive>
 800a616:	e7f3      	b.n	800a600 <_vfiprintf_r+0x44>
 800a618:	2300      	movs	r3, #0
 800a61a:	9309      	str	r3, [sp, #36]	; 0x24
 800a61c:	2320      	movs	r3, #32
 800a61e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a622:	2330      	movs	r3, #48	; 0x30
 800a624:	f04f 0901 	mov.w	r9, #1
 800a628:	f8cd 800c 	str.w	r8, [sp, #12]
 800a62c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a7dc <_vfiprintf_r+0x220>
 800a630:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a634:	4623      	mov	r3, r4
 800a636:	469a      	mov	sl, r3
 800a638:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a63c:	b10a      	cbz	r2, 800a642 <_vfiprintf_r+0x86>
 800a63e:	2a25      	cmp	r2, #37	; 0x25
 800a640:	d1f9      	bne.n	800a636 <_vfiprintf_r+0x7a>
 800a642:	ebba 0b04 	subs.w	fp, sl, r4
 800a646:	d00b      	beq.n	800a660 <_vfiprintf_r+0xa4>
 800a648:	465b      	mov	r3, fp
 800a64a:	4622      	mov	r2, r4
 800a64c:	4629      	mov	r1, r5
 800a64e:	4630      	mov	r0, r6
 800a650:	f7ff ffa2 	bl	800a598 <__sfputs_r>
 800a654:	3001      	adds	r0, #1
 800a656:	f000 80a9 	beq.w	800a7ac <_vfiprintf_r+0x1f0>
 800a65a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a65c:	445a      	add	r2, fp
 800a65e:	9209      	str	r2, [sp, #36]	; 0x24
 800a660:	f89a 3000 	ldrb.w	r3, [sl]
 800a664:	2b00      	cmp	r3, #0
 800a666:	f000 80a1 	beq.w	800a7ac <_vfiprintf_r+0x1f0>
 800a66a:	2300      	movs	r3, #0
 800a66c:	f04f 32ff 	mov.w	r2, #4294967295
 800a670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a674:	f10a 0a01 	add.w	sl, sl, #1
 800a678:	9304      	str	r3, [sp, #16]
 800a67a:	9307      	str	r3, [sp, #28]
 800a67c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a680:	931a      	str	r3, [sp, #104]	; 0x68
 800a682:	4654      	mov	r4, sl
 800a684:	2205      	movs	r2, #5
 800a686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a68a:	4854      	ldr	r0, [pc, #336]	; (800a7dc <_vfiprintf_r+0x220>)
 800a68c:	f7fe fe9a 	bl	80093c4 <memchr>
 800a690:	9a04      	ldr	r2, [sp, #16]
 800a692:	b9d8      	cbnz	r0, 800a6cc <_vfiprintf_r+0x110>
 800a694:	06d1      	lsls	r1, r2, #27
 800a696:	bf44      	itt	mi
 800a698:	2320      	movmi	r3, #32
 800a69a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a69e:	0713      	lsls	r3, r2, #28
 800a6a0:	bf44      	itt	mi
 800a6a2:	232b      	movmi	r3, #43	; 0x2b
 800a6a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a6ae:	d015      	beq.n	800a6dc <_vfiprintf_r+0x120>
 800a6b0:	4654      	mov	r4, sl
 800a6b2:	2000      	movs	r0, #0
 800a6b4:	f04f 0c0a 	mov.w	ip, #10
 800a6b8:	9a07      	ldr	r2, [sp, #28]
 800a6ba:	4621      	mov	r1, r4
 800a6bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6c0:	3b30      	subs	r3, #48	; 0x30
 800a6c2:	2b09      	cmp	r3, #9
 800a6c4:	d94d      	bls.n	800a762 <_vfiprintf_r+0x1a6>
 800a6c6:	b1b0      	cbz	r0, 800a6f6 <_vfiprintf_r+0x13a>
 800a6c8:	9207      	str	r2, [sp, #28]
 800a6ca:	e014      	b.n	800a6f6 <_vfiprintf_r+0x13a>
 800a6cc:	eba0 0308 	sub.w	r3, r0, r8
 800a6d0:	fa09 f303 	lsl.w	r3, r9, r3
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	46a2      	mov	sl, r4
 800a6d8:	9304      	str	r3, [sp, #16]
 800a6da:	e7d2      	b.n	800a682 <_vfiprintf_r+0xc6>
 800a6dc:	9b03      	ldr	r3, [sp, #12]
 800a6de:	1d19      	adds	r1, r3, #4
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	9103      	str	r1, [sp, #12]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	bfbb      	ittet	lt
 800a6e8:	425b      	neglt	r3, r3
 800a6ea:	f042 0202 	orrlt.w	r2, r2, #2
 800a6ee:	9307      	strge	r3, [sp, #28]
 800a6f0:	9307      	strlt	r3, [sp, #28]
 800a6f2:	bfb8      	it	lt
 800a6f4:	9204      	strlt	r2, [sp, #16]
 800a6f6:	7823      	ldrb	r3, [r4, #0]
 800a6f8:	2b2e      	cmp	r3, #46	; 0x2e
 800a6fa:	d10c      	bne.n	800a716 <_vfiprintf_r+0x15a>
 800a6fc:	7863      	ldrb	r3, [r4, #1]
 800a6fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a700:	d134      	bne.n	800a76c <_vfiprintf_r+0x1b0>
 800a702:	9b03      	ldr	r3, [sp, #12]
 800a704:	3402      	adds	r4, #2
 800a706:	1d1a      	adds	r2, r3, #4
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	9203      	str	r2, [sp, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	bfb8      	it	lt
 800a710:	f04f 33ff 	movlt.w	r3, #4294967295
 800a714:	9305      	str	r3, [sp, #20]
 800a716:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a7e0 <_vfiprintf_r+0x224>
 800a71a:	2203      	movs	r2, #3
 800a71c:	4650      	mov	r0, sl
 800a71e:	7821      	ldrb	r1, [r4, #0]
 800a720:	f7fe fe50 	bl	80093c4 <memchr>
 800a724:	b138      	cbz	r0, 800a736 <_vfiprintf_r+0x17a>
 800a726:	2240      	movs	r2, #64	; 0x40
 800a728:	9b04      	ldr	r3, [sp, #16]
 800a72a:	eba0 000a 	sub.w	r0, r0, sl
 800a72e:	4082      	lsls	r2, r0
 800a730:	4313      	orrs	r3, r2
 800a732:	3401      	adds	r4, #1
 800a734:	9304      	str	r3, [sp, #16]
 800a736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a73a:	2206      	movs	r2, #6
 800a73c:	4829      	ldr	r0, [pc, #164]	; (800a7e4 <_vfiprintf_r+0x228>)
 800a73e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a742:	f7fe fe3f 	bl	80093c4 <memchr>
 800a746:	2800      	cmp	r0, #0
 800a748:	d03f      	beq.n	800a7ca <_vfiprintf_r+0x20e>
 800a74a:	4b27      	ldr	r3, [pc, #156]	; (800a7e8 <_vfiprintf_r+0x22c>)
 800a74c:	bb1b      	cbnz	r3, 800a796 <_vfiprintf_r+0x1da>
 800a74e:	9b03      	ldr	r3, [sp, #12]
 800a750:	3307      	adds	r3, #7
 800a752:	f023 0307 	bic.w	r3, r3, #7
 800a756:	3308      	adds	r3, #8
 800a758:	9303      	str	r3, [sp, #12]
 800a75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a75c:	443b      	add	r3, r7
 800a75e:	9309      	str	r3, [sp, #36]	; 0x24
 800a760:	e768      	b.n	800a634 <_vfiprintf_r+0x78>
 800a762:	460c      	mov	r4, r1
 800a764:	2001      	movs	r0, #1
 800a766:	fb0c 3202 	mla	r2, ip, r2, r3
 800a76a:	e7a6      	b.n	800a6ba <_vfiprintf_r+0xfe>
 800a76c:	2300      	movs	r3, #0
 800a76e:	f04f 0c0a 	mov.w	ip, #10
 800a772:	4619      	mov	r1, r3
 800a774:	3401      	adds	r4, #1
 800a776:	9305      	str	r3, [sp, #20]
 800a778:	4620      	mov	r0, r4
 800a77a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a77e:	3a30      	subs	r2, #48	; 0x30
 800a780:	2a09      	cmp	r2, #9
 800a782:	d903      	bls.n	800a78c <_vfiprintf_r+0x1d0>
 800a784:	2b00      	cmp	r3, #0
 800a786:	d0c6      	beq.n	800a716 <_vfiprintf_r+0x15a>
 800a788:	9105      	str	r1, [sp, #20]
 800a78a:	e7c4      	b.n	800a716 <_vfiprintf_r+0x15a>
 800a78c:	4604      	mov	r4, r0
 800a78e:	2301      	movs	r3, #1
 800a790:	fb0c 2101 	mla	r1, ip, r1, r2
 800a794:	e7f0      	b.n	800a778 <_vfiprintf_r+0x1bc>
 800a796:	ab03      	add	r3, sp, #12
 800a798:	9300      	str	r3, [sp, #0]
 800a79a:	462a      	mov	r2, r5
 800a79c:	4630      	mov	r0, r6
 800a79e:	4b13      	ldr	r3, [pc, #76]	; (800a7ec <_vfiprintf_r+0x230>)
 800a7a0:	a904      	add	r1, sp, #16
 800a7a2:	f3af 8000 	nop.w
 800a7a6:	4607      	mov	r7, r0
 800a7a8:	1c78      	adds	r0, r7, #1
 800a7aa:	d1d6      	bne.n	800a75a <_vfiprintf_r+0x19e>
 800a7ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ae:	07d9      	lsls	r1, r3, #31
 800a7b0:	d405      	bmi.n	800a7be <_vfiprintf_r+0x202>
 800a7b2:	89ab      	ldrh	r3, [r5, #12]
 800a7b4:	059a      	lsls	r2, r3, #22
 800a7b6:	d402      	bmi.n	800a7be <_vfiprintf_r+0x202>
 800a7b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7ba:	f7fc ff45 	bl	8007648 <__retarget_lock_release_recursive>
 800a7be:	89ab      	ldrh	r3, [r5, #12]
 800a7c0:	065b      	lsls	r3, r3, #25
 800a7c2:	f53f af1d 	bmi.w	800a600 <_vfiprintf_r+0x44>
 800a7c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7c8:	e71c      	b.n	800a604 <_vfiprintf_r+0x48>
 800a7ca:	ab03      	add	r3, sp, #12
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	462a      	mov	r2, r5
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	4b06      	ldr	r3, [pc, #24]	; (800a7ec <_vfiprintf_r+0x230>)
 800a7d4:	a904      	add	r1, sp, #16
 800a7d6:	f7fe fa1d 	bl	8008c14 <_printf_i>
 800a7da:	e7e4      	b.n	800a7a6 <_vfiprintf_r+0x1ea>
 800a7dc:	0800cb18 	.word	0x0800cb18
 800a7e0:	0800cb1e 	.word	0x0800cb1e
 800a7e4:	0800cb22 	.word	0x0800cb22
 800a7e8:	00000000 	.word	0x00000000
 800a7ec:	0800a599 	.word	0x0800a599

0800a7f0 <__swbuf_r>:
 800a7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f2:	460e      	mov	r6, r1
 800a7f4:	4614      	mov	r4, r2
 800a7f6:	4605      	mov	r5, r0
 800a7f8:	b118      	cbz	r0, 800a802 <__swbuf_r+0x12>
 800a7fa:	6a03      	ldr	r3, [r0, #32]
 800a7fc:	b90b      	cbnz	r3, 800a802 <__swbuf_r+0x12>
 800a7fe:	f7fc fd8f 	bl	8007320 <__sinit>
 800a802:	69a3      	ldr	r3, [r4, #24]
 800a804:	60a3      	str	r3, [r4, #8]
 800a806:	89a3      	ldrh	r3, [r4, #12]
 800a808:	071a      	lsls	r2, r3, #28
 800a80a:	d525      	bpl.n	800a858 <__swbuf_r+0x68>
 800a80c:	6923      	ldr	r3, [r4, #16]
 800a80e:	b31b      	cbz	r3, 800a858 <__swbuf_r+0x68>
 800a810:	6823      	ldr	r3, [r4, #0]
 800a812:	6922      	ldr	r2, [r4, #16]
 800a814:	b2f6      	uxtb	r6, r6
 800a816:	1a98      	subs	r0, r3, r2
 800a818:	6963      	ldr	r3, [r4, #20]
 800a81a:	4637      	mov	r7, r6
 800a81c:	4283      	cmp	r3, r0
 800a81e:	dc04      	bgt.n	800a82a <__swbuf_r+0x3a>
 800a820:	4621      	mov	r1, r4
 800a822:	4628      	mov	r0, r5
 800a824:	f7fe fce6 	bl	80091f4 <_fflush_r>
 800a828:	b9e0      	cbnz	r0, 800a864 <__swbuf_r+0x74>
 800a82a:	68a3      	ldr	r3, [r4, #8]
 800a82c:	3b01      	subs	r3, #1
 800a82e:	60a3      	str	r3, [r4, #8]
 800a830:	6823      	ldr	r3, [r4, #0]
 800a832:	1c5a      	adds	r2, r3, #1
 800a834:	6022      	str	r2, [r4, #0]
 800a836:	701e      	strb	r6, [r3, #0]
 800a838:	6962      	ldr	r2, [r4, #20]
 800a83a:	1c43      	adds	r3, r0, #1
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d004      	beq.n	800a84a <__swbuf_r+0x5a>
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	07db      	lsls	r3, r3, #31
 800a844:	d506      	bpl.n	800a854 <__swbuf_r+0x64>
 800a846:	2e0a      	cmp	r6, #10
 800a848:	d104      	bne.n	800a854 <__swbuf_r+0x64>
 800a84a:	4621      	mov	r1, r4
 800a84c:	4628      	mov	r0, r5
 800a84e:	f7fe fcd1 	bl	80091f4 <_fflush_r>
 800a852:	b938      	cbnz	r0, 800a864 <__swbuf_r+0x74>
 800a854:	4638      	mov	r0, r7
 800a856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a858:	4621      	mov	r1, r4
 800a85a:	4628      	mov	r0, r5
 800a85c:	f000 f806 	bl	800a86c <__swsetup_r>
 800a860:	2800      	cmp	r0, #0
 800a862:	d0d5      	beq.n	800a810 <__swbuf_r+0x20>
 800a864:	f04f 37ff 	mov.w	r7, #4294967295
 800a868:	e7f4      	b.n	800a854 <__swbuf_r+0x64>
	...

0800a86c <__swsetup_r>:
 800a86c:	b538      	push	{r3, r4, r5, lr}
 800a86e:	4b2a      	ldr	r3, [pc, #168]	; (800a918 <__swsetup_r+0xac>)
 800a870:	4605      	mov	r5, r0
 800a872:	6818      	ldr	r0, [r3, #0]
 800a874:	460c      	mov	r4, r1
 800a876:	b118      	cbz	r0, 800a880 <__swsetup_r+0x14>
 800a878:	6a03      	ldr	r3, [r0, #32]
 800a87a:	b90b      	cbnz	r3, 800a880 <__swsetup_r+0x14>
 800a87c:	f7fc fd50 	bl	8007320 <__sinit>
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a886:	0718      	lsls	r0, r3, #28
 800a888:	d422      	bmi.n	800a8d0 <__swsetup_r+0x64>
 800a88a:	06d9      	lsls	r1, r3, #27
 800a88c:	d407      	bmi.n	800a89e <__swsetup_r+0x32>
 800a88e:	2309      	movs	r3, #9
 800a890:	602b      	str	r3, [r5, #0]
 800a892:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a896:	f04f 30ff 	mov.w	r0, #4294967295
 800a89a:	81a3      	strh	r3, [r4, #12]
 800a89c:	e034      	b.n	800a908 <__swsetup_r+0x9c>
 800a89e:	0758      	lsls	r0, r3, #29
 800a8a0:	d512      	bpl.n	800a8c8 <__swsetup_r+0x5c>
 800a8a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8a4:	b141      	cbz	r1, 800a8b8 <__swsetup_r+0x4c>
 800a8a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8aa:	4299      	cmp	r1, r3
 800a8ac:	d002      	beq.n	800a8b4 <__swsetup_r+0x48>
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f7fc fefc 	bl	80076ac <_free_r>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	6363      	str	r3, [r4, #52]	; 0x34
 800a8b8:	89a3      	ldrh	r3, [r4, #12]
 800a8ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8be:	81a3      	strh	r3, [r4, #12]
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	6063      	str	r3, [r4, #4]
 800a8c4:	6923      	ldr	r3, [r4, #16]
 800a8c6:	6023      	str	r3, [r4, #0]
 800a8c8:	89a3      	ldrh	r3, [r4, #12]
 800a8ca:	f043 0308 	orr.w	r3, r3, #8
 800a8ce:	81a3      	strh	r3, [r4, #12]
 800a8d0:	6923      	ldr	r3, [r4, #16]
 800a8d2:	b94b      	cbnz	r3, 800a8e8 <__swsetup_r+0x7c>
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8de:	d003      	beq.n	800a8e8 <__swsetup_r+0x7c>
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	f000 f89f 	bl	800aa26 <__smakebuf_r>
 800a8e8:	89a0      	ldrh	r0, [r4, #12]
 800a8ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8ee:	f010 0301 	ands.w	r3, r0, #1
 800a8f2:	d00a      	beq.n	800a90a <__swsetup_r+0x9e>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	60a3      	str	r3, [r4, #8]
 800a8f8:	6963      	ldr	r3, [r4, #20]
 800a8fa:	425b      	negs	r3, r3
 800a8fc:	61a3      	str	r3, [r4, #24]
 800a8fe:	6923      	ldr	r3, [r4, #16]
 800a900:	b943      	cbnz	r3, 800a914 <__swsetup_r+0xa8>
 800a902:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a906:	d1c4      	bne.n	800a892 <__swsetup_r+0x26>
 800a908:	bd38      	pop	{r3, r4, r5, pc}
 800a90a:	0781      	lsls	r1, r0, #30
 800a90c:	bf58      	it	pl
 800a90e:	6963      	ldrpl	r3, [r4, #20]
 800a910:	60a3      	str	r3, [r4, #8]
 800a912:	e7f4      	b.n	800a8fe <__swsetup_r+0x92>
 800a914:	2000      	movs	r0, #0
 800a916:	e7f7      	b.n	800a908 <__swsetup_r+0x9c>
 800a918:	2000034c 	.word	0x2000034c

0800a91c <_raise_r>:
 800a91c:	291f      	cmp	r1, #31
 800a91e:	b538      	push	{r3, r4, r5, lr}
 800a920:	4604      	mov	r4, r0
 800a922:	460d      	mov	r5, r1
 800a924:	d904      	bls.n	800a930 <_raise_r+0x14>
 800a926:	2316      	movs	r3, #22
 800a928:	6003      	str	r3, [r0, #0]
 800a92a:	f04f 30ff 	mov.w	r0, #4294967295
 800a92e:	bd38      	pop	{r3, r4, r5, pc}
 800a930:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a932:	b112      	cbz	r2, 800a93a <_raise_r+0x1e>
 800a934:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a938:	b94b      	cbnz	r3, 800a94e <_raise_r+0x32>
 800a93a:	4620      	mov	r0, r4
 800a93c:	f000 f830 	bl	800a9a0 <_getpid_r>
 800a940:	462a      	mov	r2, r5
 800a942:	4601      	mov	r1, r0
 800a944:	4620      	mov	r0, r4
 800a946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a94a:	f000 b817 	b.w	800a97c <_kill_r>
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d00a      	beq.n	800a968 <_raise_r+0x4c>
 800a952:	1c59      	adds	r1, r3, #1
 800a954:	d103      	bne.n	800a95e <_raise_r+0x42>
 800a956:	2316      	movs	r3, #22
 800a958:	6003      	str	r3, [r0, #0]
 800a95a:	2001      	movs	r0, #1
 800a95c:	e7e7      	b.n	800a92e <_raise_r+0x12>
 800a95e:	2400      	movs	r4, #0
 800a960:	4628      	mov	r0, r5
 800a962:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a966:	4798      	blx	r3
 800a968:	2000      	movs	r0, #0
 800a96a:	e7e0      	b.n	800a92e <_raise_r+0x12>

0800a96c <raise>:
 800a96c:	4b02      	ldr	r3, [pc, #8]	; (800a978 <raise+0xc>)
 800a96e:	4601      	mov	r1, r0
 800a970:	6818      	ldr	r0, [r3, #0]
 800a972:	f7ff bfd3 	b.w	800a91c <_raise_r>
 800a976:	bf00      	nop
 800a978:	2000034c 	.word	0x2000034c

0800a97c <_kill_r>:
 800a97c:	b538      	push	{r3, r4, r5, lr}
 800a97e:	2300      	movs	r3, #0
 800a980:	4d06      	ldr	r5, [pc, #24]	; (800a99c <_kill_r+0x20>)
 800a982:	4604      	mov	r4, r0
 800a984:	4608      	mov	r0, r1
 800a986:	4611      	mov	r1, r2
 800a988:	602b      	str	r3, [r5, #0]
 800a98a:	f7f8 f8b8 	bl	8002afe <_kill>
 800a98e:	1c43      	adds	r3, r0, #1
 800a990:	d102      	bne.n	800a998 <_kill_r+0x1c>
 800a992:	682b      	ldr	r3, [r5, #0]
 800a994:	b103      	cbz	r3, 800a998 <_kill_r+0x1c>
 800a996:	6023      	str	r3, [r4, #0]
 800a998:	bd38      	pop	{r3, r4, r5, pc}
 800a99a:	bf00      	nop
 800a99c:	200019f8 	.word	0x200019f8

0800a9a0 <_getpid_r>:
 800a9a0:	f7f8 b8a6 	b.w	8002af0 <_getpid>

0800a9a4 <_calloc_r>:
 800a9a4:	b570      	push	{r4, r5, r6, lr}
 800a9a6:	fba1 5402 	umull	r5, r4, r1, r2
 800a9aa:	b934      	cbnz	r4, 800a9ba <_calloc_r+0x16>
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	f7fc feed 	bl	800778c <_malloc_r>
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	b928      	cbnz	r0, 800a9c2 <_calloc_r+0x1e>
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ba:	220c      	movs	r2, #12
 800a9bc:	2600      	movs	r6, #0
 800a9be:	6002      	str	r2, [r0, #0]
 800a9c0:	e7f9      	b.n	800a9b6 <_calloc_r+0x12>
 800a9c2:	462a      	mov	r2, r5
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	f7fc fd80 	bl	80074ca <memset>
 800a9ca:	e7f4      	b.n	800a9b6 <_calloc_r+0x12>

0800a9cc <_malloc_usable_size_r>:
 800a9cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d0:	1f18      	subs	r0, r3, #4
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	bfbc      	itt	lt
 800a9d6:	580b      	ldrlt	r3, [r1, r0]
 800a9d8:	18c0      	addlt	r0, r0, r3
 800a9da:	4770      	bx	lr

0800a9dc <__swhatbuf_r>:
 800a9dc:	b570      	push	{r4, r5, r6, lr}
 800a9de:	460c      	mov	r4, r1
 800a9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e4:	4615      	mov	r5, r2
 800a9e6:	2900      	cmp	r1, #0
 800a9e8:	461e      	mov	r6, r3
 800a9ea:	b096      	sub	sp, #88	; 0x58
 800a9ec:	da0c      	bge.n	800aa08 <__swhatbuf_r+0x2c>
 800a9ee:	89a3      	ldrh	r3, [r4, #12]
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a9f6:	bf0c      	ite	eq
 800a9f8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a9fc:	2340      	movne	r3, #64	; 0x40
 800a9fe:	2000      	movs	r0, #0
 800aa00:	6031      	str	r1, [r6, #0]
 800aa02:	602b      	str	r3, [r5, #0]
 800aa04:	b016      	add	sp, #88	; 0x58
 800aa06:	bd70      	pop	{r4, r5, r6, pc}
 800aa08:	466a      	mov	r2, sp
 800aa0a:	f000 f849 	bl	800aaa0 <_fstat_r>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	dbed      	blt.n	800a9ee <__swhatbuf_r+0x12>
 800aa12:	9901      	ldr	r1, [sp, #4]
 800aa14:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aa18:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aa1c:	4259      	negs	r1, r3
 800aa1e:	4159      	adcs	r1, r3
 800aa20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa24:	e7eb      	b.n	800a9fe <__swhatbuf_r+0x22>

0800aa26 <__smakebuf_r>:
 800aa26:	898b      	ldrh	r3, [r1, #12]
 800aa28:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa2a:	079d      	lsls	r5, r3, #30
 800aa2c:	4606      	mov	r6, r0
 800aa2e:	460c      	mov	r4, r1
 800aa30:	d507      	bpl.n	800aa42 <__smakebuf_r+0x1c>
 800aa32:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa36:	6023      	str	r3, [r4, #0]
 800aa38:	6123      	str	r3, [r4, #16]
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	6163      	str	r3, [r4, #20]
 800aa3e:	b002      	add	sp, #8
 800aa40:	bd70      	pop	{r4, r5, r6, pc}
 800aa42:	466a      	mov	r2, sp
 800aa44:	ab01      	add	r3, sp, #4
 800aa46:	f7ff ffc9 	bl	800a9dc <__swhatbuf_r>
 800aa4a:	9900      	ldr	r1, [sp, #0]
 800aa4c:	4605      	mov	r5, r0
 800aa4e:	4630      	mov	r0, r6
 800aa50:	f7fc fe9c 	bl	800778c <_malloc_r>
 800aa54:	b948      	cbnz	r0, 800aa6a <__smakebuf_r+0x44>
 800aa56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa5a:	059a      	lsls	r2, r3, #22
 800aa5c:	d4ef      	bmi.n	800aa3e <__smakebuf_r+0x18>
 800aa5e:	f023 0303 	bic.w	r3, r3, #3
 800aa62:	f043 0302 	orr.w	r3, r3, #2
 800aa66:	81a3      	strh	r3, [r4, #12]
 800aa68:	e7e3      	b.n	800aa32 <__smakebuf_r+0xc>
 800aa6a:	89a3      	ldrh	r3, [r4, #12]
 800aa6c:	6020      	str	r0, [r4, #0]
 800aa6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa72:	81a3      	strh	r3, [r4, #12]
 800aa74:	9b00      	ldr	r3, [sp, #0]
 800aa76:	6120      	str	r0, [r4, #16]
 800aa78:	6163      	str	r3, [r4, #20]
 800aa7a:	9b01      	ldr	r3, [sp, #4]
 800aa7c:	b15b      	cbz	r3, 800aa96 <__smakebuf_r+0x70>
 800aa7e:	4630      	mov	r0, r6
 800aa80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa84:	f000 f81e 	bl	800aac4 <_isatty_r>
 800aa88:	b128      	cbz	r0, 800aa96 <__smakebuf_r+0x70>
 800aa8a:	89a3      	ldrh	r3, [r4, #12]
 800aa8c:	f023 0303 	bic.w	r3, r3, #3
 800aa90:	f043 0301 	orr.w	r3, r3, #1
 800aa94:	81a3      	strh	r3, [r4, #12]
 800aa96:	89a3      	ldrh	r3, [r4, #12]
 800aa98:	431d      	orrs	r5, r3
 800aa9a:	81a5      	strh	r5, [r4, #12]
 800aa9c:	e7cf      	b.n	800aa3e <__smakebuf_r+0x18>
	...

0800aaa0 <_fstat_r>:
 800aaa0:	b538      	push	{r3, r4, r5, lr}
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	4d06      	ldr	r5, [pc, #24]	; (800aac0 <_fstat_r+0x20>)
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	4608      	mov	r0, r1
 800aaaa:	4611      	mov	r1, r2
 800aaac:	602b      	str	r3, [r5, #0]
 800aaae:	f7f8 f884 	bl	8002bba <_fstat>
 800aab2:	1c43      	adds	r3, r0, #1
 800aab4:	d102      	bne.n	800aabc <_fstat_r+0x1c>
 800aab6:	682b      	ldr	r3, [r5, #0]
 800aab8:	b103      	cbz	r3, 800aabc <_fstat_r+0x1c>
 800aaba:	6023      	str	r3, [r4, #0]
 800aabc:	bd38      	pop	{r3, r4, r5, pc}
 800aabe:	bf00      	nop
 800aac0:	200019f8 	.word	0x200019f8

0800aac4 <_isatty_r>:
 800aac4:	b538      	push	{r3, r4, r5, lr}
 800aac6:	2300      	movs	r3, #0
 800aac8:	4d05      	ldr	r5, [pc, #20]	; (800aae0 <_isatty_r+0x1c>)
 800aaca:	4604      	mov	r4, r0
 800aacc:	4608      	mov	r0, r1
 800aace:	602b      	str	r3, [r5, #0]
 800aad0:	f7f8 f882 	bl	8002bd8 <_isatty>
 800aad4:	1c43      	adds	r3, r0, #1
 800aad6:	d102      	bne.n	800aade <_isatty_r+0x1a>
 800aad8:	682b      	ldr	r3, [r5, #0]
 800aada:	b103      	cbz	r3, 800aade <_isatty_r+0x1a>
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	bd38      	pop	{r3, r4, r5, pc}
 800aae0:	200019f8 	.word	0x200019f8

0800aae4 <log10>:
 800aae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae6:	4604      	mov	r4, r0
 800aae8:	460d      	mov	r5, r1
 800aaea:	f000 f82d 	bl	800ab48 <__ieee754_log10>
 800aaee:	4622      	mov	r2, r4
 800aaf0:	4606      	mov	r6, r0
 800aaf2:	460f      	mov	r7, r1
 800aaf4:	462b      	mov	r3, r5
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	4629      	mov	r1, r5
 800aafa:	f7f5 ff87 	bl	8000a0c <__aeabi_dcmpun>
 800aafe:	b998      	cbnz	r0, 800ab28 <log10+0x44>
 800ab00:	2200      	movs	r2, #0
 800ab02:	2300      	movs	r3, #0
 800ab04:	4620      	mov	r0, r4
 800ab06:	4629      	mov	r1, r5
 800ab08:	f7f5 ff62 	bl	80009d0 <__aeabi_dcmple>
 800ab0c:	b160      	cbz	r0, 800ab28 <log10+0x44>
 800ab0e:	2200      	movs	r2, #0
 800ab10:	2300      	movs	r3, #0
 800ab12:	4620      	mov	r0, r4
 800ab14:	4629      	mov	r1, r5
 800ab16:	f7f5 ff47 	bl	80009a8 <__aeabi_dcmpeq>
 800ab1a:	b140      	cbz	r0, 800ab2e <log10+0x4a>
 800ab1c:	f7fc fd68 	bl	80075f0 <__errno>
 800ab20:	2322      	movs	r3, #34	; 0x22
 800ab22:	2600      	movs	r6, #0
 800ab24:	4f06      	ldr	r7, [pc, #24]	; (800ab40 <log10+0x5c>)
 800ab26:	6003      	str	r3, [r0, #0]
 800ab28:	4630      	mov	r0, r6
 800ab2a:	4639      	mov	r1, r7
 800ab2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab2e:	f7fc fd5f 	bl	80075f0 <__errno>
 800ab32:	2321      	movs	r3, #33	; 0x21
 800ab34:	6003      	str	r3, [r0, #0]
 800ab36:	4803      	ldr	r0, [pc, #12]	; (800ab44 <log10+0x60>)
 800ab38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab3c:	f7fe bc50 	b.w	80093e0 <nan>
 800ab40:	fff00000 	.word	0xfff00000
 800ab44:	0800cab9 	.word	0x0800cab9

0800ab48 <__ieee754_log10>:
 800ab48:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ab4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab50:	4604      	mov	r4, r0
 800ab52:	460d      	mov	r5, r1
 800ab54:	460b      	mov	r3, r1
 800ab56:	da26      	bge.n	800aba6 <__ieee754_log10+0x5e>
 800ab58:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ab5c:	4302      	orrs	r2, r0
 800ab5e:	d107      	bne.n	800ab70 <__ieee754_log10+0x28>
 800ab60:	2200      	movs	r2, #0
 800ab62:	2300      	movs	r3, #0
 800ab64:	2000      	movs	r0, #0
 800ab66:	4936      	ldr	r1, [pc, #216]	; (800ac40 <__ieee754_log10+0xf8>)
 800ab68:	f7f5 fde0 	bl	800072c <__aeabi_ddiv>
 800ab6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab70:	2900      	cmp	r1, #0
 800ab72:	da05      	bge.n	800ab80 <__ieee754_log10+0x38>
 800ab74:	4602      	mov	r2, r0
 800ab76:	f7f5 faf7 	bl	8000168 <__aeabi_dsub>
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	e7f3      	b.n	800ab68 <__ieee754_log10+0x20>
 800ab80:	2200      	movs	r2, #0
 800ab82:	4b30      	ldr	r3, [pc, #192]	; (800ac44 <__ieee754_log10+0xfc>)
 800ab84:	f7f5 fca8 	bl	80004d8 <__aeabi_dmul>
 800ab88:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	460d      	mov	r5, r1
 800ab90:	460b      	mov	r3, r1
 800ab92:	492d      	ldr	r1, [pc, #180]	; (800ac48 <__ieee754_log10+0x100>)
 800ab94:	428b      	cmp	r3, r1
 800ab96:	dd08      	ble.n	800abaa <__ieee754_log10+0x62>
 800ab98:	4622      	mov	r2, r4
 800ab9a:	462b      	mov	r3, r5
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	4629      	mov	r1, r5
 800aba0:	f7f5 fae4 	bl	800016c <__adddf3>
 800aba4:	e7e2      	b.n	800ab6c <__ieee754_log10+0x24>
 800aba6:	2200      	movs	r2, #0
 800aba8:	e7f3      	b.n	800ab92 <__ieee754_log10+0x4a>
 800abaa:	1518      	asrs	r0, r3, #20
 800abac:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800abb0:	4410      	add	r0, r2
 800abb2:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800abb6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800abba:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800abbe:	f7f5 fc21 	bl	8000404 <__aeabi_i2d>
 800abc2:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800abc6:	3303      	adds	r3, #3
 800abc8:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800abcc:	4606      	mov	r6, r0
 800abce:	460f      	mov	r7, r1
 800abd0:	4620      	mov	r0, r4
 800abd2:	4629      	mov	r1, r5
 800abd4:	f000 f83c 	bl	800ac50 <__ieee754_log>
 800abd8:	a313      	add	r3, pc, #76	; (adr r3, 800ac28 <__ieee754_log10+0xe0>)
 800abda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abde:	4680      	mov	r8, r0
 800abe0:	4689      	mov	r9, r1
 800abe2:	4630      	mov	r0, r6
 800abe4:	4639      	mov	r1, r7
 800abe6:	f7f5 fc77 	bl	80004d8 <__aeabi_dmul>
 800abea:	a311      	add	r3, pc, #68	; (adr r3, 800ac30 <__ieee754_log10+0xe8>)
 800abec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf0:	4604      	mov	r4, r0
 800abf2:	460d      	mov	r5, r1
 800abf4:	4640      	mov	r0, r8
 800abf6:	4649      	mov	r1, r9
 800abf8:	f7f5 fc6e 	bl	80004d8 <__aeabi_dmul>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4620      	mov	r0, r4
 800ac02:	4629      	mov	r1, r5
 800ac04:	f7f5 fab2 	bl	800016c <__adddf3>
 800ac08:	a30b      	add	r3, pc, #44	; (adr r3, 800ac38 <__ieee754_log10+0xf0>)
 800ac0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0e:	4604      	mov	r4, r0
 800ac10:	460d      	mov	r5, r1
 800ac12:	4630      	mov	r0, r6
 800ac14:	4639      	mov	r1, r7
 800ac16:	f7f5 fc5f 	bl	80004d8 <__aeabi_dmul>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	4620      	mov	r0, r4
 800ac20:	4629      	mov	r1, r5
 800ac22:	e7bd      	b.n	800aba0 <__ieee754_log10+0x58>
 800ac24:	f3af 8000 	nop.w
 800ac28:	11f12b36 	.word	0x11f12b36
 800ac2c:	3d59fef3 	.word	0x3d59fef3
 800ac30:	1526e50e 	.word	0x1526e50e
 800ac34:	3fdbcb7b 	.word	0x3fdbcb7b
 800ac38:	509f6000 	.word	0x509f6000
 800ac3c:	3fd34413 	.word	0x3fd34413
 800ac40:	c3500000 	.word	0xc3500000
 800ac44:	43500000 	.word	0x43500000
 800ac48:	7fefffff 	.word	0x7fefffff
 800ac4c:	00000000 	.word	0x00000000

0800ac50 <__ieee754_log>:
 800ac50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac54:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ac58:	4602      	mov	r2, r0
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	460d      	mov	r5, r1
 800ac5e:	b087      	sub	sp, #28
 800ac60:	da24      	bge.n	800acac <__ieee754_log+0x5c>
 800ac62:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800ac66:	4304      	orrs	r4, r0
 800ac68:	d108      	bne.n	800ac7c <__ieee754_log+0x2c>
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	2000      	movs	r0, #0
 800ac70:	49cb      	ldr	r1, [pc, #812]	; (800afa0 <__ieee754_log+0x350>)
 800ac72:	f7f5 fd5b 	bl	800072c <__aeabi_ddiv>
 800ac76:	b007      	add	sp, #28
 800ac78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7c:	2900      	cmp	r1, #0
 800ac7e:	da04      	bge.n	800ac8a <__ieee754_log+0x3a>
 800ac80:	f7f5 fa72 	bl	8000168 <__aeabi_dsub>
 800ac84:	2200      	movs	r2, #0
 800ac86:	2300      	movs	r3, #0
 800ac88:	e7f3      	b.n	800ac72 <__ieee754_log+0x22>
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	4bc5      	ldr	r3, [pc, #788]	; (800afa4 <__ieee754_log+0x354>)
 800ac8e:	f7f5 fc23 	bl	80004d8 <__aeabi_dmul>
 800ac92:	460b      	mov	r3, r1
 800ac94:	460d      	mov	r5, r1
 800ac96:	4602      	mov	r2, r0
 800ac98:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800ac9c:	48c2      	ldr	r0, [pc, #776]	; (800afa8 <__ieee754_log+0x358>)
 800ac9e:	4285      	cmp	r5, r0
 800aca0:	dd06      	ble.n	800acb0 <__ieee754_log+0x60>
 800aca2:	4610      	mov	r0, r2
 800aca4:	4619      	mov	r1, r3
 800aca6:	f7f5 fa61 	bl	800016c <__adddf3>
 800acaa:	e7e4      	b.n	800ac76 <__ieee754_log+0x26>
 800acac:	2100      	movs	r1, #0
 800acae:	e7f5      	b.n	800ac9c <__ieee754_log+0x4c>
 800acb0:	152c      	asrs	r4, r5, #20
 800acb2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800acb6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800acba:	440c      	add	r4, r1
 800acbc:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800acc0:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800acc4:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 800acc8:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800accc:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800acd0:	ea41 0305 	orr.w	r3, r1, r5
 800acd4:	4610      	mov	r0, r2
 800acd6:	4619      	mov	r1, r3
 800acd8:	2200      	movs	r2, #0
 800acda:	4bb4      	ldr	r3, [pc, #720]	; (800afac <__ieee754_log+0x35c>)
 800acdc:	f7f5 fa44 	bl	8000168 <__aeabi_dsub>
 800ace0:	1cab      	adds	r3, r5, #2
 800ace2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	4682      	mov	sl, r0
 800acea:	468b      	mov	fp, r1
 800acec:	f04f 0200 	mov.w	r2, #0
 800acf0:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800acf4:	dc53      	bgt.n	800ad9e <__ieee754_log+0x14e>
 800acf6:	2300      	movs	r3, #0
 800acf8:	f7f5 fe56 	bl	80009a8 <__aeabi_dcmpeq>
 800acfc:	b1d0      	cbz	r0, 800ad34 <__ieee754_log+0xe4>
 800acfe:	2c00      	cmp	r4, #0
 800ad00:	f000 8122 	beq.w	800af48 <__ieee754_log+0x2f8>
 800ad04:	4620      	mov	r0, r4
 800ad06:	f7f5 fb7d 	bl	8000404 <__aeabi_i2d>
 800ad0a:	a391      	add	r3, pc, #580	; (adr r3, 800af50 <__ieee754_log+0x300>)
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	4606      	mov	r6, r0
 800ad12:	460f      	mov	r7, r1
 800ad14:	f7f5 fbe0 	bl	80004d8 <__aeabi_dmul>
 800ad18:	a38f      	add	r3, pc, #572	; (adr r3, 800af58 <__ieee754_log+0x308>)
 800ad1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1e:	4604      	mov	r4, r0
 800ad20:	460d      	mov	r5, r1
 800ad22:	4630      	mov	r0, r6
 800ad24:	4639      	mov	r1, r7
 800ad26:	f7f5 fbd7 	bl	80004d8 <__aeabi_dmul>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	4620      	mov	r0, r4
 800ad30:	4629      	mov	r1, r5
 800ad32:	e7b8      	b.n	800aca6 <__ieee754_log+0x56>
 800ad34:	a38a      	add	r3, pc, #552	; (adr r3, 800af60 <__ieee754_log+0x310>)
 800ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3a:	4650      	mov	r0, sl
 800ad3c:	4659      	mov	r1, fp
 800ad3e:	f7f5 fbcb 	bl	80004d8 <__aeabi_dmul>
 800ad42:	4602      	mov	r2, r0
 800ad44:	460b      	mov	r3, r1
 800ad46:	2000      	movs	r0, #0
 800ad48:	4999      	ldr	r1, [pc, #612]	; (800afb0 <__ieee754_log+0x360>)
 800ad4a:	f7f5 fa0d 	bl	8000168 <__aeabi_dsub>
 800ad4e:	4652      	mov	r2, sl
 800ad50:	4606      	mov	r6, r0
 800ad52:	460f      	mov	r7, r1
 800ad54:	465b      	mov	r3, fp
 800ad56:	4650      	mov	r0, sl
 800ad58:	4659      	mov	r1, fp
 800ad5a:	f7f5 fbbd 	bl	80004d8 <__aeabi_dmul>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	460b      	mov	r3, r1
 800ad62:	4630      	mov	r0, r6
 800ad64:	4639      	mov	r1, r7
 800ad66:	f7f5 fbb7 	bl	80004d8 <__aeabi_dmul>
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	460f      	mov	r7, r1
 800ad6e:	b914      	cbnz	r4, 800ad76 <__ieee754_log+0x126>
 800ad70:	4632      	mov	r2, r6
 800ad72:	463b      	mov	r3, r7
 800ad74:	e0a2      	b.n	800aebc <__ieee754_log+0x26c>
 800ad76:	4620      	mov	r0, r4
 800ad78:	f7f5 fb44 	bl	8000404 <__aeabi_i2d>
 800ad7c:	a374      	add	r3, pc, #464	; (adr r3, 800af50 <__ieee754_log+0x300>)
 800ad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad82:	4680      	mov	r8, r0
 800ad84:	4689      	mov	r9, r1
 800ad86:	f7f5 fba7 	bl	80004d8 <__aeabi_dmul>
 800ad8a:	a373      	add	r3, pc, #460	; (adr r3, 800af58 <__ieee754_log+0x308>)
 800ad8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad90:	4604      	mov	r4, r0
 800ad92:	460d      	mov	r5, r1
 800ad94:	4640      	mov	r0, r8
 800ad96:	4649      	mov	r1, r9
 800ad98:	f7f5 fb9e 	bl	80004d8 <__aeabi_dmul>
 800ad9c:	e0a7      	b.n	800aeee <__ieee754_log+0x29e>
 800ad9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ada2:	f7f5 f9e3 	bl	800016c <__adddf3>
 800ada6:	4602      	mov	r2, r0
 800ada8:	460b      	mov	r3, r1
 800adaa:	4650      	mov	r0, sl
 800adac:	4659      	mov	r1, fp
 800adae:	f7f5 fcbd 	bl	800072c <__aeabi_ddiv>
 800adb2:	e9cd 0100 	strd	r0, r1, [sp]
 800adb6:	4620      	mov	r0, r4
 800adb8:	f7f5 fb24 	bl	8000404 <__aeabi_i2d>
 800adbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adc4:	4610      	mov	r0, r2
 800adc6:	4619      	mov	r1, r3
 800adc8:	f7f5 fb86 	bl	80004d8 <__aeabi_dmul>
 800adcc:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800add0:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800add4:	4602      	mov	r2, r0
 800add6:	9305      	str	r3, [sp, #20]
 800add8:	460b      	mov	r3, r1
 800adda:	4606      	mov	r6, r0
 800addc:	460f      	mov	r7, r1
 800adde:	f7f5 fb7b 	bl	80004d8 <__aeabi_dmul>
 800ade2:	a361      	add	r3, pc, #388	; (adr r3, 800af68 <__ieee754_log+0x318>)
 800ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade8:	4680      	mov	r8, r0
 800adea:	4689      	mov	r9, r1
 800adec:	f7f5 fb74 	bl	80004d8 <__aeabi_dmul>
 800adf0:	a35f      	add	r3, pc, #380	; (adr r3, 800af70 <__ieee754_log+0x320>)
 800adf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf6:	f7f5 f9b9 	bl	800016c <__adddf3>
 800adfa:	4642      	mov	r2, r8
 800adfc:	464b      	mov	r3, r9
 800adfe:	f7f5 fb6b 	bl	80004d8 <__aeabi_dmul>
 800ae02:	a35d      	add	r3, pc, #372	; (adr r3, 800af78 <__ieee754_log+0x328>)
 800ae04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae08:	f7f5 f9b0 	bl	800016c <__adddf3>
 800ae0c:	4642      	mov	r2, r8
 800ae0e:	464b      	mov	r3, r9
 800ae10:	f7f5 fb62 	bl	80004d8 <__aeabi_dmul>
 800ae14:	a35a      	add	r3, pc, #360	; (adr r3, 800af80 <__ieee754_log+0x330>)
 800ae16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1a:	f7f5 f9a7 	bl	800016c <__adddf3>
 800ae1e:	4632      	mov	r2, r6
 800ae20:	463b      	mov	r3, r7
 800ae22:	f7f5 fb59 	bl	80004d8 <__aeabi_dmul>
 800ae26:	a358      	add	r3, pc, #352	; (adr r3, 800af88 <__ieee754_log+0x338>)
 800ae28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2c:	4606      	mov	r6, r0
 800ae2e:	460f      	mov	r7, r1
 800ae30:	4640      	mov	r0, r8
 800ae32:	4649      	mov	r1, r9
 800ae34:	f7f5 fb50 	bl	80004d8 <__aeabi_dmul>
 800ae38:	a355      	add	r3, pc, #340	; (adr r3, 800af90 <__ieee754_log+0x340>)
 800ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3e:	f7f5 f995 	bl	800016c <__adddf3>
 800ae42:	4642      	mov	r2, r8
 800ae44:	464b      	mov	r3, r9
 800ae46:	f7f5 fb47 	bl	80004d8 <__aeabi_dmul>
 800ae4a:	a353      	add	r3, pc, #332	; (adr r3, 800af98 <__ieee754_log+0x348>)
 800ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae50:	f7f5 f98c 	bl	800016c <__adddf3>
 800ae54:	4642      	mov	r2, r8
 800ae56:	464b      	mov	r3, r9
 800ae58:	f7f5 fb3e 	bl	80004d8 <__aeabi_dmul>
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	4602      	mov	r2, r0
 800ae60:	4639      	mov	r1, r7
 800ae62:	4630      	mov	r0, r6
 800ae64:	f7f5 f982 	bl	800016c <__adddf3>
 800ae68:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ae6c:	9b05      	ldr	r3, [sp, #20]
 800ae6e:	3551      	adds	r5, #81	; 0x51
 800ae70:	431d      	orrs	r5, r3
 800ae72:	2d00      	cmp	r5, #0
 800ae74:	4680      	mov	r8, r0
 800ae76:	4689      	mov	r9, r1
 800ae78:	dd48      	ble.n	800af0c <__ieee754_log+0x2bc>
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	4b4c      	ldr	r3, [pc, #304]	; (800afb0 <__ieee754_log+0x360>)
 800ae7e:	4650      	mov	r0, sl
 800ae80:	4659      	mov	r1, fp
 800ae82:	f7f5 fb29 	bl	80004d8 <__aeabi_dmul>
 800ae86:	4652      	mov	r2, sl
 800ae88:	465b      	mov	r3, fp
 800ae8a:	f7f5 fb25 	bl	80004d8 <__aeabi_dmul>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	4606      	mov	r6, r0
 800ae94:	460f      	mov	r7, r1
 800ae96:	4640      	mov	r0, r8
 800ae98:	4649      	mov	r1, r9
 800ae9a:	f7f5 f967 	bl	800016c <__adddf3>
 800ae9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aea2:	f7f5 fb19 	bl	80004d8 <__aeabi_dmul>
 800aea6:	4680      	mov	r8, r0
 800aea8:	4689      	mov	r9, r1
 800aeaa:	b964      	cbnz	r4, 800aec6 <__ieee754_log+0x276>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	4639      	mov	r1, r7
 800aeb4:	f7f5 f958 	bl	8000168 <__aeabi_dsub>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	4650      	mov	r0, sl
 800aebe:	4659      	mov	r1, fp
 800aec0:	f7f5 f952 	bl	8000168 <__aeabi_dsub>
 800aec4:	e6d7      	b.n	800ac76 <__ieee754_log+0x26>
 800aec6:	a322      	add	r3, pc, #136	; (adr r3, 800af50 <__ieee754_log+0x300>)
 800aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aed0:	f7f5 fb02 	bl	80004d8 <__aeabi_dmul>
 800aed4:	a320      	add	r3, pc, #128	; (adr r3, 800af58 <__ieee754_log+0x308>)
 800aed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeda:	4604      	mov	r4, r0
 800aedc:	460d      	mov	r5, r1
 800aede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aee2:	f7f5 faf9 	bl	80004d8 <__aeabi_dmul>
 800aee6:	4642      	mov	r2, r8
 800aee8:	464b      	mov	r3, r9
 800aeea:	f7f5 f93f 	bl	800016c <__adddf3>
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	4630      	mov	r0, r6
 800aef4:	4639      	mov	r1, r7
 800aef6:	f7f5 f937 	bl	8000168 <__aeabi_dsub>
 800aefa:	4652      	mov	r2, sl
 800aefc:	465b      	mov	r3, fp
 800aefe:	f7f5 f933 	bl	8000168 <__aeabi_dsub>
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	4620      	mov	r0, r4
 800af08:	4629      	mov	r1, r5
 800af0a:	e7d9      	b.n	800aec0 <__ieee754_log+0x270>
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	4650      	mov	r0, sl
 800af12:	4659      	mov	r1, fp
 800af14:	f7f5 f928 	bl	8000168 <__aeabi_dsub>
 800af18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af1c:	f7f5 fadc 	bl	80004d8 <__aeabi_dmul>
 800af20:	4606      	mov	r6, r0
 800af22:	460f      	mov	r7, r1
 800af24:	2c00      	cmp	r4, #0
 800af26:	f43f af23 	beq.w	800ad70 <__ieee754_log+0x120>
 800af2a:	a309      	add	r3, pc, #36	; (adr r3, 800af50 <__ieee754_log+0x300>)
 800af2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af34:	f7f5 fad0 	bl	80004d8 <__aeabi_dmul>
 800af38:	a307      	add	r3, pc, #28	; (adr r3, 800af58 <__ieee754_log+0x308>)
 800af3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3e:	4604      	mov	r4, r0
 800af40:	460d      	mov	r5, r1
 800af42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af46:	e727      	b.n	800ad98 <__ieee754_log+0x148>
 800af48:	2000      	movs	r0, #0
 800af4a:	2100      	movs	r1, #0
 800af4c:	e693      	b.n	800ac76 <__ieee754_log+0x26>
 800af4e:	bf00      	nop
 800af50:	fee00000 	.word	0xfee00000
 800af54:	3fe62e42 	.word	0x3fe62e42
 800af58:	35793c76 	.word	0x35793c76
 800af5c:	3dea39ef 	.word	0x3dea39ef
 800af60:	55555555 	.word	0x55555555
 800af64:	3fd55555 	.word	0x3fd55555
 800af68:	df3e5244 	.word	0xdf3e5244
 800af6c:	3fc2f112 	.word	0x3fc2f112
 800af70:	96cb03de 	.word	0x96cb03de
 800af74:	3fc74664 	.word	0x3fc74664
 800af78:	94229359 	.word	0x94229359
 800af7c:	3fd24924 	.word	0x3fd24924
 800af80:	55555593 	.word	0x55555593
 800af84:	3fe55555 	.word	0x3fe55555
 800af88:	d078c69f 	.word	0xd078c69f
 800af8c:	3fc39a09 	.word	0x3fc39a09
 800af90:	1d8e78af 	.word	0x1d8e78af
 800af94:	3fcc71c5 	.word	0x3fcc71c5
 800af98:	9997fa04 	.word	0x9997fa04
 800af9c:	3fd99999 	.word	0x3fd99999
 800afa0:	c3500000 	.word	0xc3500000
 800afa4:	43500000 	.word	0x43500000
 800afa8:	7fefffff 	.word	0x7fefffff
 800afac:	3ff00000 	.word	0x3ff00000
 800afb0:	3fe00000 	.word	0x3fe00000

0800afb4 <_init>:
 800afb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb6:	bf00      	nop
 800afb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afba:	bc08      	pop	{r3}
 800afbc:	469e      	mov	lr, r3
 800afbe:	4770      	bx	lr

0800afc0 <_fini>:
 800afc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc2:	bf00      	nop
 800afc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afc6:	bc08      	pop	{r3}
 800afc8:	469e      	mov	lr, r3
 800afca:	4770      	bx	lr
